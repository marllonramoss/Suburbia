---
description: 
globs: 
alwaysApply: true
---

    Anyone can use AI to build a website these days, but those sites often come out looking really generic with a sloppy codebase that now you are on the hook to maintain. Now more than ever, you need to be making websites that look right at home in a professional portfolio. Today, I'm going to show you how to build something truly special, a luxury brand website that combines stunning visuals, smooth animations, and elegant interactions to create a premium user experience that stands out from the crowd. In this course, we're building
    
    Coat Royale, an elegant fragrance website that really looks and feels like it was built for a high-end brand. Take a look for yourself. As the page loads, we're immediately greeted by a suave entrance. The background image drifts in with a soft fade and subtly scales down while the headline, effortless elegance, slides up from below. That's a technique you'll see everywhere, and you'll learn exactly how it's done. Scroll down and things get interactive. We reveal content based on scroll position. The
    
    text sharpens into focus as it hits the center, blurs as you scroll away. Headings light up letter by letter backed by soft glows and a subtle texture. We'll be using GSAP scroll trigger to make that magic happen. Then we hit the grid. A modern bento style layout with a bold image, strong messaging, and a shop now CTA. It stylishly features our first cologne fragrance. From there, we enter the fragrance showcase with another stylish heading. Then we scroll to reveal Terra, [Music] Aqua, and Ignis, each with graphics to
    
    match their identity. The layout, images, and content are all powered by Prismic, so a content team can easily manage and customize them. Then, we'll build a call to action section that invites users to take a short quiz to find their scent. We'll build out that interactive quiz in the next course. Finally, we drop into a full bbleleed luxury video component. Exactly the kind of thing you'd expect from Gucci or Dior. The fragrance product pages are just as polished. Smooth transitions powered by the view transitions API, a
    
    reflective bottle display, detailed product info, and a you may also like section to cross-ell other scents. All of this is built with a focus on performance and code quality. To get the most from this course, you should already have a good handle on HTML, CSS, JavaScript, and React. Now, the very last thing before we get started, go ahead to the YouTube description and you will see a link for the course resources. Click that and keep this page open for the entire course because there's a lot of stuff in here that
    
    we're going to need to grab. Um, right here, we kind of have a description. You'll have the YouTube video here once it is published. And we have our assets. Go ahead and download these right now. Um we're these are the images and other things that we're going to be using in the course. Uh we also have our documentation. So any documentation that you might need uh I have put it here. We have Tailwind, we have Prismic, we have Nex.js, we have uh all of our content right here. Go ahead and open this up in
    
    a new tab. And this is our content that we're going to need to add to the different pages. We have our homepage, we have our fragrance, uh our three fragrances, and that'll make our jobs a lot easier. So, we don't have to Yeah, it just all in one place for copying content, uh fonts and icons, and so on. Uh we got good docs there. Components and files. These are just a few components that uh telling you to type this out would have been the meanest thing I could possibly do. So, we are instead going to copy and paste this
    
    into our project when the time comes. Uh it's like iframe snippets like I'm not going to make you type this. You don't gain anything. You don't learn anything from typing that. So, maybe learn how to type faster. I don't know. Uh troubleshooting. If you're getting an error uh and like we we find an error after this course has gone live or after a few months maybe uh some API has changed we will put the solution here. So if you're having trouble check here first and if it's if there's nothing here with your problem uh go ahead and
    
    open something in the present community forums and let us know and we will help you out there. And then final code and live site uh will be put here. So you can go check out the GitHub and the um the live site this um and you got some extras here. You got some credits and everything. So uh if you're wondering what font I use or the theme or whatever, go ahead, click there. And you have more YouTube uh courses. So let's get started. Um we can go to our documentation part. And we have the Prismic Docs right here. So let's go
    
    ahead and open that up. and it brings us to the use Nex.js with Prismic and we're going to be following uh the first couple steps of this. This is a really great guide if you ever get lost, you want to do this on your own in some other time. Uh you won't need to follow this right now because I'm going to be walking you through it. But uh this is what we're going to be doing. We're going to go ahead and create a Prismic repository from the Prismic dashboard. Create a Prismic repository. Uh we will
    
    have to either log in or sign up. So either way, uh you want to go ahead and do that. And once you're logged in, you will see these four options. We're going to go ahead with Next.js right here. And we have three options there. Minimal starter, a full website demo to pick apart and look at how it works, or connect our own web app. And the directions here uh say connect your own web app. And that's what we're going to be doing. So, select that. And I'm going to name this uh coat royale uh course. You can name it
    
    coat royale. you know, Steve, Dave, what whatever your name is, um, or anything you want, right? Say coat Royale. And if you want to do the fancy O, which I actually do, hold down the, uh, O key and then hit three if you're on a Mac. If you're on a PC, I don't know how to do it, but uh, it's not that important. You can copy it from, um, somewhere in here, I'm sure. But yeah, that's the code Royale thing. Uh, what made you make a repository today? We are following a tutorial to learn Prismic. So let's go ahead. Uh we can get our
    
    free plan that comes with unlimited documents. Uh one user profile, two localals, so like you can do English and Spanish, way more API calls than you're going to need. Uh ton of CDN usage. Uh we get some support and it is free. So this is more than we're ever going to need. And go ahead and create that repository. So it says welcome to your page builder. Go ahead and close out the uh build your first page. It's a really helpful guide, but once again, I'm here for you. So, uh, welcome to your page
    
    builder. This is where you create and edit pages. Yes. So, at Prismic.io is where we're going to be creating and editing our pages. But first, we're going to define the models for your pages with Slice Machine, which is the local development tool. I'll make this a little bigger for you. Uh, what's your main content language? Choose what you like. I'm going with EnglishUS. And now it says create an X.js project. So, we're going to go ahead and copy this. Hit the little copy button. And I'm going to open up my
    
    terminal. I'm using a terminal called Warp. You can just use the built-in terminal uh with your operating system or even the built-in terminal into VS Code, anything like that. Uh I have a folder called repos. That's where I put all my my repositories. And I'm just going to paste my code in here. It's going to create code royale course. And it's going to ask me, would you like to use TypeScript? Actually, it it might it'll ask you, do you want to install something? Hit hit Y for yes. Um, and then it'll install something and
    
    then it'll bring you to this. So, I already have that installed. Uh, we're going to use TypeScript. We're going to use ESLint. We will use Tailwind CSS. Yes, we want it inside our source directory. Yes, we like to use app router. Yes, we want Turboac. Yes. Uh, sorry. And no, we do not want to customize the import alias. It is good as it is. That's the only no we we say. And then it's off to the races. This is just Nex.js right now. We haven't we're not installing Prismic anything just yet. We're setting up a boilerplate
    
    regular Nex.js app. And then we can go ahead and continue here because it's going to give us the code to move into that folder. So I'm going to copy that first line and go ahead move in there. And now we can do MPX. You could have copied them both. I just uh wanted to do it one at a time. Uh so we're going to say yes. I'm going to install this should have been the same thing as what you just had. And we're installing slice machine init locally and it is going to go ahead and let's see it detected our framework. It
    
    knows we're using Nex.js. It began a core dependenc in installation and we are logged into Prisc. Okay. So now press any key to open the browser to log in. I'm going to hit this key and it says logged in. Great. Let's check out our terminal. And there we go. It fetched all our stuff. doing a lot of smart sophisticated things. We do not want to run slice machine because we want to actually uh move into our directory and o open our um VS code or whatever IDE you're using right now. So run slice machine
    
    no going to uh say code period. And if you have that shortcut installed, it should open up your folder. Otherwise, just open up VS Code and open up your like like you know go file uh open folder, that sort of thing. But if you have that shortcut installed, it's really handy. So I'm inside my project here. Let's go ahead and continue following these directions. We'll hit continue. And it says run slice machine. So we have npm run slice machine. Let's first look at our package json. I just hit command and p and start typing pack and
    
    hit enter. That's a nice little shortcut to moving around your project. I'll be using that a lot. So once again, that's command P and you can just search for anything. Get ignore, right? Um, but let's look at our scripts. We have a dev and we have a slice machine. We're going to run both of those in two different tabs inside of our terminal. So, most terminals have a tab feature. It's either uh control C, sorry, control T or command T, kind of like in Chrome. So, in this one, I'm going to run npm
    
    rundev. And then I'm going to have a new tab. This will be npm run slice machine. And in warp, you can actually name this. So I'll just name this next JS. And I'll name this slice machine. Slice matchy. There we go. So we have uh slice machine running at 99999 or 9999. Yep. And our Nex.js app is running at 3000. So go ahead and command or control-click on both of those. And we're going to open those up in different tabs. And this is good news. We have our project up and running. This is just boilerplate Nex.js stuff. Great.
    
    It just means it's working. Uh, and this is localhost 99999. And this is Slice Machine up and running. This is the local development environment. Uh, the the local development tool that we're going to be using. Uh, let's see what it says to do next. And it says push your models from Slice Machine. So, basically says, hey, uh, chill here or or or like like I'm going to chill here for a bit while you go into Slice Machine and do your thing. And the way a slice machine works or the way that prismic works in general is
    
    that there are really two main kinds of models uh there are types and within that there are page types and custom types and then there are slices and slices are page sections. So if we look at this uh website we see that this right here is a very clear page section. This is like a logo uh grid or you know some some kind of logo thing. And you would be able to move this up and down uh around your website, reuse this component, put it anywhere you want. And it really helps you to componentize your
    
    entire website and unlock your team. So, oh, where are we supposed to go? There we go. So, in Prismic, we have really two main types of models. Uh we first have types, our page and custom types. So, we'll explain the nuance there. And then we have slices. And slices belong or like get added to uh usually page types. They can be added to custom types, but really slices belong to page types for the most part. So page types are models that your editors will use to create website pages in the page builder. So this going to be your
    
    homepage, your contact page, your blog posts, all these kinds of things that actually get like their own URL. That's a page type. custom types we're going to create when you need like a settings page or sorry a a settings area to put like the name of the website or just general information or navigation right so things that don't end up having their own URL path is going to be a custom type typically and then like I said slices are these sections of a website um and we are going to have a slice zone
    
    where these slices get output but for now let's go to page page types. Let's create our first page and we're going to choose a single type here. So you see we have reusable which is like a product. You can have you know thousand products uh a whole bunch of different landing pages, a whole bunch of blog posts but we actually want a single type. So this is just the homepage. We're going to call it that exactly homepage. Just like that. Go ahead and click create. And there we go. Page type saved successfully at and look it
    
    gives/customtypes homepage index. So, let's actually go to our code editor and see what they're talking about. Okay, custom types index. Boom. This is what Slice Machine is doing for us under the hood. It is creating these JSON files and making it so that we don't have to type this. I am over the moon not having to type this stuff. I don't like having to format my own JSON. Like, this should be doing it for me. And it is. Uh, but with a page type, we get out of the box a nice little bit of SEO metadata. Um,
    
    just some fields there that are handled for us. And then not much else, but we do get something kind of magical, like low-key magic. Uh, and that's this page snippet up here. I clicked it a little too fast. Up here, page snippet. And it says create your homepages page component. We're going to create a new route by creating app/page.tsx. Um, but if it should be nested, you put it inside a folder, stuff like that. Um, so we're going to just grab this code. And this code is like part of the magic of Slice Machine
    
    in that like we're not going to make you type this either. And so copy that and we're going to head over to our source um app and then page.tsx. And then right in here, go ahead, select all, delete. Just get rid of it. Paste this in. Or, you know, you could have just paste it over top. Whatever your flavor is. Um, and I'm going to save that. And we're going to go back. We have our create next app here. And if I reload this, ah, I know I got a 404. So I haven't given this to the actual Prismic repository yet. And by that I mean that
    
    um this is still waiting on our models to get pushed. It's saying hey uh make your models locally here and when you're ready those changes and push that model up to Prisma because right now this is all happening locally. It doesn't know about that JSON file. So head to review changes. We'll see one and we'll see a homepage. Go ahead and push that. Success. Great. And now we're going to go over to here and let's say I have pushed my models. It'll go, "Yep, you have." And we're going to create a new page. And we only have one option
    
    that kind of makes sense. Click homepage. And there's not a lot to do here. I'm going to type homepage up here. And I'm going also say uh here for metatitle say co hit three just going to type coach royale for now. We'll come back in and do the metadata later. Uh but I'm going hit save and then I will hit publish. And literally that's all we're doing for this page right now. Um but if we go back over here and reload, I'm crossing my fingers that this should Yep, it does. So I I had to double reload.
    
    You'll have to do that every single time uh throughout this course because of the Nex.js cache. On the first reload, it's it hits the cache. On the second one, it's like, okay, this this person means business. Let's go check it out. Uh, and it goes and fetches new data. So, uh, we see code royale at the top. We don't see anything here. And, you know, that's expected. That's exactly what I would expect. Uh, let's take a look at what we actually pasted in here. So, we have some imports up here. Some typical uh,
    
    Nex.js stuff because we are generating metadata and we're pulling this off of the um, the homepage. So we we're we're we're fetching the homepage single type that we get and we have a little thing that if it's not found, we're going to throw the 404. Um but then it's actually going to use the metatitle that I filled out with coach Royale and return it on this metadata object as the title. And then it has other things for the other fields that we haven't really touched yet. Um then in the page because that's
    
    just the metadata for the page. Look at how small our page is. Um, this is the entire uh code for our page. Why? How? What? How can you build a full website with just this? That's because the slice zone uh really handles the magic. Um, it's going to match the slices that it gets from Prismic. It Prism is going to send back, hey, I have a hero with this data. And the slice zone is going to go, okay, I'll grab the local hero component and I'll pass it that data as props. and then that hero component will render out that content.
    
    So this is doing very little work. All the work's going to happen within each slice. Um but now you can see that like this is a very small and kind of simple file to reason around and to debug if if need be. Um and we already have our page ready and waiting for our first slice and create a slice that we shall. So, let's go ahead and head over to our slice machine and in page types homepage, we're going to say start from scratch. Now, we have a new feature called generate from image, which you could go ahead and drop in the hero
    
    right here um and see how it comes out. I would do that later just because um with any kind of AI, you might get a different uh output than what I have and we might get in trouble later if you are trying to debug and your thing is named something slightly different or there something's a little bit off um because the AI tries to re reverse engineer this, right? So it might call this um body, it might call this paragraph, it might call this copy, it might right. It's like all these different variables
    
    that might um come out of this. I might call this like button or link, etc. Uh background, picture, image, media, right? It's just going to be easier if you follow me. Um and we don't use the AI feature for this course, but I recommend checking it out uh when you're building your own sites. Uh so we're going to start from scratch and we're going to just call this one hero. Just like that. Hit create. And it says no screenshot available, but we can go ahead open this up and update screenshot. And like I said, we can use
    
    these slice snapshots. So if you don't know where I'm getting that, this is from the assets folder. So go ahead. Um, if you didn't download that assets, uh, where is it? Coach Royale. Yeah, if you didn't download the assets folder, sorry for the course assets, do that. unzip it. Slice snapshots and grab your hero and we're going to drop that right on there. Cool. Now, uh when we push that up, everyone editing will see what this uh component looks like. So, it's not just hero, it's very descriptive via
    
    the image. So, this is where we add fields. So, our slice has no fields yet. And a field is an input for content like text, images, links, and so on. So, we got to add a field or else it's not going to do us much good. So, we're going to add a rich text field. This is text with formatting options like headings, bold, etc. Open it up and you'll see what I mean. Got all of our headings, you got bolds, you got italics, you got links, you got images, you can do anything. Uh, we're going to call this
    
    heading. And we actually don't want to do anything. We want to do one thing. So, we're going to click the unselect all button. Going to choose H1. We only want this to be an H1. We don't want the editor to have the the choice to make this an H6 because that messes up u all kinds of stuff, right? So, uncheck allow multiple paragraphs because we know what we want this to be. And that, just in case you were wondering, is the effortless elegance part right there. So, that's what that uh corresponds to.
    
    We then need to uh get that part and this part and the image in the background. So, let's do that. We have our first field. Let's go ahead add a second field. This is another rich text and this we're going to un first we'll name it body and then we're going to unselect all and say it could be paragraph and bold and itallic and yeah we'll allow multiple paragraphs. That's not so bad there. And next we want to add a field for a link. So that's going to be our button. We're going to call it button. And I know that buttons aren't
    
    usually links but this one looks like a button. That's just the design. Uh, and so we are going to allow display text as this allows us to just use one field and get both the URL of like where it's going and also the text for it uh all in one. And we could make this repeatable. I'm just going to leave it as a single um item. And for the variance, we can turn that on because uh our project will have a button that has both uh primary and secondary. And you know what? Yeah, let's make it repeatable. Let let's give our editor
    
    some options. So, repeatable varants, leave these as they are. Primary and secondary works great. Um, yours should look like mine. So, go ahead and hit done. And we want one more thing, and that's just going to be an image. So, add field image. And we'll just say image. And there we go. So, we've added that field. If we go to review changes, we see that we didn't just change the hero, but we also changed the homepage. But if we click into this, we'll see that yeah, now in the slices, we have the hero listed there. And the reason we
    
    created this slice through the homepage is because then it automatically gets added to the homepage. But here's the thing, you can have a bunch of page types. You can have homepages and blog posts and you know, you get the point. Uh, but you don't want every single slice to be available on every single page type. So that that allows you to limit certain slices to certain page types. And uh so that's why when you build a slice just by itself floating out here in space, uh it doesn't get automatically added to all of your page
    
    types. That that could be a mess. U but this one did because we built it through the homepage. Go ahead and push that up. And our settings have or our our changes have been pushed. And now if we head to our homepage, we now see this uh add slice button here. and we'll go ahead click that. And look, now our editors know exactly what they're adding to the page when they click that button. So, let's go ahead and we should be able to use our content uh sheet here and we'll see heading body button image. Uh
    
    so, copy effortless elegance. Paste it in. That copy didn't work. Let's try one more time. I need to select the text. Hopefully I'm the only one having this problem. Okay, so for some reason I can't um command V, sorry, command C commandV, but I can do rightclick copy, rightclick, paste. So hopefully it's working for you and it's just a weird thing for me. I have no idea why this would be the case. I've never had this problem before. Um, okay. So for our button, we want the display text of shop
    
    now. So, I'm just going to type that and then we're going to choose a link type. It's going to be a Prismic page, but right now, uh, we don't have anywhere to send you. So, we're just going to say homepage, right? That doesn't really matter. U, we're going to change it to a secondary, I believe. Um, and we don't want to add another link. We'll just leave it, but we could add, you know, multiple. That's why we made it repeatable. Um, but no, I have to delete those. Uh, and then image. So, go ahead and select image. and it's going
    
    to say, "Yeah, you got to give me something, buddy." And that's what we're going to do. We're going to head and open up our uh course assets and and the Prismic files folder. That is the one that we want to grab everything. And I called it Prismic Files because these files go to Prismic. So, drop these 12ish pictures here and let them upload. There we go. And we're going to see this Pixels Cotton Bro one. Go ahead and click that. And we don't Oh, there's another one selected for me, too. I can tell because there's one, two here.
    
    There we go. That was the default one that got picked. Um, yeah. So, we just want this one. And we don't really need any alt text. We're going to say in our code that it is, uh, you know, just decorative. So, we can leave it like that and say add to page. And there we go. We can hit save. And we can go ahead and publish. Now, what do you think we're going to see when we get back? It's not going to be what what you're thinking. All right, you're going to be disappointed. Placeholder component for hero. All
    
    right, that's okay. That's what I was expecting at least. I know it might not be what you were expecting. So, uh slice machine is pretty magical, but it didn't uh style our entire component just yet. Uh we are working on that feature. It is not landed quite yet. Um, so if we head into uh source slices hero index tsx uh or or just in the hero folder, you can see what was created when we uh went through and added those fields. So, first off, it grabbed our screenshot and it saved it there. Um, it also generated
    
    a tsx file for us and it imported a few things. It typed it for us. So it's a functional component uh with hero props. And so it knows exactly what uh the the hero component is expecting. Um it also created the model for us just like it did for our page type. Right? There's our body. It's a structured text type. Uh it only takes these three things and so on. Um but yeah, here in our React component, our our React TypeScript component, um we have a section and it says placeholder component for hero
    
    slice variation. It's just default right now. And yeah, this is pretty cool. It's trust me, it's a lot cooler uh than just a placeholder might seem. Uh but it's about to get better. So I'm going to close my little sidebar there and I'm going to slide this to the left. And then here I'm going to move this over and we are going to head to slice machine and open the slices and come into our hero. And you see actually make it a little bit smaller. Uh you see see this code snippets toggle. That is another way that we
    
    really save a lot of time uh trying to figure out like okay what is our heading on? Is it slice data heading? Slice what's it? What is it again? Nope. We're not doing any of that. We're not console logging stuff to figure out where stuff is. We are copying and pasting. And then this time, copying and pasting works. We'll import that in a sec. Go ahead and import everything first. Copy and then paste. Make myself some space. Uh button. Just going to copy and paste that in. And then image. Copy and paste
    
    that in. And now we can go through and I'm going to uh click on it, hit command P. Sorry, command period. command period uh and said say add import from prismic uh or add all missing imports. So I'm going to do that one and there we go. So we have uh a couple things from prismic next couple things from prismic react and we are looking good. So now we save that. Now our hero slice is outputting the heading the body uh the button and the image. Let's see if it's doing that. And there it is. We have the heading not
    
    looking very headingy, but if we inspect, we will see that yes, we're making our parents proud. Look at that. Uh, we have an H1 and then we have a paragraph. That's exactly what we want. Now, why is this so small? It's because we installed Tailwind in that introduction or or when we got up and running. So, Tailwind is all up in our CSS. If you go to globals.css, CSS, you'll see that we are importing Tailwind and that is going to bring with it um its defaults. And basically its defaults are just hey, let's nuke
    
    everything. Let's wipe it out and make it so that everything has just really default styling. We don't we don't have to fight to override things. Um but yeah, so this is working well. We have our link and we have our image. It's all looking great. Now we just I kind of lied. It's not looking great, right? the HTML looking good. This ain't looking good. Let's Let's work on it. Hey, Alex here real quick. If you are enjoying this video, please hit like and subscribe. It allows me to keep creating free highquality content like this for
    
    you. Give you a second to do it. Did you do it? Awesome. Well, thank you so much. Let's get back into the video. So, we are about to dig in and start styling. Uh but before that, head to our resources doc. And here in documentation, we have this Tailwind prettier plugin. It's going to make your life a lot easier. Go ahead, open that up. And it says to get started, install prettier plugin Tailwind CSS as a dev dependency. We're going to copy that. And I'm going to open a new tab in warp in my terminal. And make sure it's
    
    inside your repository. Hit paste and enter. And that'll install the plugin for us. It should be rather quick. Um, and then we want to add the plugin to our prettier configuration. So, we see prettier rc. I'm just going to copy that first. And let's see if we have that file at all. There's a very good chance you don't. So, go ahead say new file. And we'll say prettier rc. Just like that. Should be empty. And we're going to paste in that plugins bit. And so now, let's see if the install finished.
    
    It did. Cool. Looking good. I'm going to move this over. I'm going actually call this installs because the cool thing is you can install things while these servers still run. So, I like having a third terminal just to do that. Sometimes it makes things fail. Um, generic failure doesn't look good. I'm going to just restart this just in case. Um, but it's better than having to jump back and forth between things. So, now you might be asking, "All right, you just had me install something. What did that do?" Uh, so this automatically
    
    sorts classes based on their recommended class order. So it's a nice little illustration here where it shows that it's going to move BG Sky I think from here if it was in the front over to here has a very um like opinionated order for things. And you might be like I want my order. Uh trust me this this is helpful for a few reasons. I'll show you as we start to uh write Tailwind which is right now in VS Code we can close prettier RC we can uh in in globals CSS let's go ahead and just get rid of everything after um our import there we
    
    can ditch all that but make sure you keep TW CSS we need that uh for TIN to work at all and then in our heroin or sorry in inside the hero folder Our index tsx is our hero slice. We're going to do a few things right now. Our slice looks uh not great. I'm going to close this. Uh not great because it goes edge to edge and it's just uh not how we want it. Everything's off to the side. We don't we never want something right up against the edge. uh in our finish site, every element has kind of a bounding box
    
    where it's always going to hit that max width and then have some padding on the side. And if we shrink it, see how it never touches the edge. That is because we are using a really handy component that we call bounded. Um so if we head to our resources, this is one of the very few components that we are going to copy paste, but we'll talk through it. Um so go ahead, grab this bounded component and hit copy. We're going to open the wrong thing. There we go. We're going to create a new components directory right in our source folder. So
    
    here, right click on the source and say new folder and say components. And inside there, we'll create a new file. I'm going to say bounded.tsx and paste in the bounded.tsx. And we see uhoh, we have an error. Uh, import clsx from clsx. is saying, "Hey, you don't you don't have clsx." So, let's fix that by installing it. And now I will explain. So, don't just say clsx. Say npm i clsx. And there we go. It's a nice tiny little package. I'll explain what it does in just a second. Let's first look through this component uh to understand
    
    it a little better. It's taking a couple props in. First is the element type. Uh what it will output as. This is going to default to a section because like nine out of 10 times we we just want to use it as a section. Slices are typically sections. So see like the parent element for our slices. We you can take in a bunch of classes. So anything we pass to it is going to be passed onto the um onto the parent element here. And you see that it's actually two elements. It's a a comp which is our section or
    
    whatever we pass in. We we can change that. That's the the nice flexibility that that this component provides. And then inside there's an inner wrapper div that adds some um it adds like the the centering. It's the MX auto uh gives it a max width things like that. Um so then we have children and that's just anytime you pass anything inside an element um that becomes its children. So, we're just going to All this does is wrap it into uh well, not two divs, but a section and a div and add some styles.
    
    That's really all this does. And this is just something that we have to do because of the forwarding of this ref. Um we're we're allowing a ref to be forwarded if if we need to. So, you don't have to worry about that too much. But, yeah, that's what this does. and CLSX right here. It allows us to in in a really nice tidy way combine a bunch of different things into uh one string by the end of it. I link you to the CLS docs here. CLSX docs here. Um and we can see some of these examples. So CLSX, you just pass it anything. You
    
    pass it an array with strings or um all kinds of different things and it's going to output one single string and you can do a lot of um I think there's an example of here we go. So true and foo false and bar it's going to say hello foo. So we can do turnaries inside here. We can do lots of different um logical things and it just makes it a lot easier than having to work with uh a template string where you're doing the back ticks and the dollar sign and the curly brackets. So we're going to be using
    
    this a bunch. It's so handy for Tailwind. So, with CLSX installed and our bounded component freshly made, let's head back to our hero, our index.tsx, and let's wrap this or sorry, let's change section change section to bounded. It's like that. Hit enter and it should autoimp import. If not, uh you make sure it's coming from at components bounded. If it's trying to do it um like this kind of thing, uh a relative path. There we go. If it's trying to do it that way, uh fix it because this is a a a way better way of importing our
    
    components. So once we do that, we head back here. We should see there we go. I just had to reload it. And now we have this max width. It's centering everything. And if we shrink it down, we see that we get that padding built in. And no matter how small we go, we get some form of padding on the sides. So that is a nice component, a little utility for us that we can use. And just real quick, in case you're worried about the uh issue, it's just saying, hey, uh you got to use an alt property. So we're going to either add
    
    alt like that or fallback alt. So this, like I said before, is a decorative image. So we don't actually need to tell screen readers or anything about this image. So on prismic next image, go ahead and just add your alt equals. And there we go. Our issue goes away. Okay, let's start adding some tailwind. So on our bounded component, we're going to say class name equals we'll say relative min screen. Make sure there's all dashes like that. Uh overflow hidden and bg neutral 950. Just like that. And so if you have
    
    the Tailwind plug-in uh installed, let's say Tailwind in your VS Code, uh not Tailwind Docs, I think. Yeah, Tailwind CSS IntelliSense. This is a must-have. Make sure you grab this. It is uh I I I I don't write Tailwind without it honestly. Uh you see it gives you a preview of colors. It shows you the values of everything. Uh so basically what the CSS is going to be output as. um in case you're wondering anything. And it also helps you out um by kind of completing your uh typing. So if I say BG and I can go through and choose from
    
    any of these different uh things that begin with BG, right? So gives you lots and lots of options and it helps if you're like what is that thing? It's like justify. Oh, right. Justify items end. So very very helpful. Make sure you grab the Tailwind IntelliSense. And if we save that, we see that we get this dark background and not much else. It just uh is going to make the min height screen and overflow hidden. So we're not not seeing a ton from that, but the relative is the sleeper thing here where
    
    we're going to uh get a cool well that's how we're going to handle the image background. So, let's actually go down, grab our Prismic next image. And if you hold alt or option and use your arrow keys, it will move up and you can shift lines around like that. I I'll be saying a lot of little uh tips just in case you're not aware of them uh to hopefully help you code faster. Uh so, now we have the image at the top like that. Let's go ahead and say uh priority. And that will make sure that it loads uh like as one
    
    of the the first things. Uh otherwise it's going to default to lazy loading which is great for any image that's below the fold or below that like first scroll. But here it's our hero image. So we want to say priority. Uh we want to say fill and that is going to add it add some CSS properties that make it fill the the space that it has. And then we need to add a class name. And we're going to say object cover. And you can see that it it's going to out output object fit cover. And now if we head back, we see that we
    
    have that it's it's filling our background, right? And so no matter how what size you put it at, it's going to um cover everything. It's just a good looking background. Now um so now we are going to be doing some animation on uh this next image. Uh it's the wrong one. Let me scroll back up so you can see when we load the page in, it goes from uh having 0% opacity to like 50% opacity and it comes in from being scaled up to scaling to the normal size. So that's a few things that we want to change about it eventually and we will
    
    get there. But right now, let's just wrap it in an absolute uh an absolutely position div. So, uh, for EMTT, we Okay, so EMTT is a plugin that is in VS Code and lots of other things that allows us to create HTML with CSS already, um, added on there. So, if you say period and we'll say absolute and hit tab, you'll get a div with class name absolute and your cursor starts right inside it. So going to open that up and I'm going to grab the bottom of the div and put it uh so that it wraps around prismic next image and add
    
    a couple more classes to this absolute. We're going to say insert zero. Well, one more class. We'll we'll do the other one. Actually, let's do it now and then uh later it'll we'll we'll animate it. So scale 125. Just like that. And we should see. Yep. So it got bigger. And we will soon um be placing these uh items on top. So because these three elements uh are all together, we want to wrap those three elements in a div together. And that div is going to have a class of flex among others. We'll say flex. Do
    
    the same thing. Hit tab. Open it up. We're going to wrap around both the heading and the body as well as our uh primary button. Let's just bring it down until it's right above the bounded component. And what we want to do is start to style our typography. Now, we don't have the fonts installed yet, but we're just going to um give it a little bit of styling until we we get there. So, I'm going to wrap this in a div. And I guess I could have given it a class to start with, but I'll say class name. And we're going to give it um max
    
    width XL text 6 XL letting tight text neutral 50 uh MD colon text 7 XL and then LG text sorry LG colon text 8 XL. Now, if you're not familiar with Tailwind, uh this is how it handles responsive uh design or responsive styling. So, uh it has different break points and on large screens and above. So, if the width of the screen is 64 rem or uh 1024 pixels wide or more, these styles will apply. So, we're going to make it um 8 XL, which is uh 96 pixels, but on medium screens and above, it's going to be 72
    
    pixels. So, between medium and large, it'll be 72. Large and above, it'll be 96. And then, uh me uh just below medium, right? Everything up to medium will be 6x, which is 60 pixels. So, that is how Tailwind handles respons responsivity. And you can uh tack this onto anything. So you can make a totally different text color on large screens. It's uh just a modifier that works anywhere. So we've wrapped our Prismicri text in a div with styles. That's important because Prismicri text doesn't take a class field. And you'll see if
    
    you go to try to add one class name, it's like dude, we don't we don't have that. That's not a thing here. And the reason is because prison rich text uh could output one word or it could output an entire blog post. So you don't really want to ever style it directly. Um you want to either wrap that in some kind of a div because there's going to be a bunch of elements and yeah it's it's just a bit complicated. So this is one of the few components that you can't add a class directly to. But if we save this and head to our
    
    actual site here, uh we saw it for a second. Let's drop the opacity on our uh image here. We will shift things around so that it is um is is uh stacking in the right order by adding relative to this flex div. So let's do that actually first. And once we do that, we see we have effortless elegance and we have our body copy there. Perfect. And then here for our Prismic next image, go ahead and add to the object cover, we'll say opacity 50. Save that. And it gets darker. Looking good. Much more uh in line with how it
    
    ends. And now we just need to continue to style this out because that does not look great yet. After relative and flex, let's go ahead and say h screen. So that will give it 100 view height for its height. And we'll say flex call and justify center. So there we go. Looking much better already. Next, let's wrap our uh present rich text here for the body in another div. And we can start that one off by saying uh period MT6 and hitting tab. Wrapping it around. And we're going to add max width MD text LG and text
    
    neutral 100. Save that. The max width should make it uh yeah, gives it a boundary. So now it is looking a lot better there. Now, this shop now link needs some work. So, let's go ahead and give it some styles. You can see that uh our Prismic next link already has a class name added to it. So, don't add a new one. Um but it's passing link.variant. And remember, that can be either primary or secondary. So, let's just wipe that out for now. And we're going to bring in clsx. And we're going to call that. And
    
    we're going to pass it first one string that will say inline flex items center justify center px 12. So that's padding on the x-axis or left to right. Uh py 4. So that gives it one ram of padding up and down. Say text center font. We're going to say extra bold. Uh tracking wider uppercase transition colors. There we go. And duration 300. Just like that. And now we're going to have a comma. And we're going to say link dot variant equal uh triple equal. So three equal signs and then say secondary and
    
    you see that it's actually finishing it for us because uh it is typed. Everything that we are creating with Prismic with slice machine is typed for us. So if we were to do that see how it goes. Whoa, whoa, whoa. That's not one of your options, buddy. So it really cuts down on the mistakes that you can use and it helps you debug your code before you even make that mistake. So uh link variant is equal to secondary. We'll we'll say question mark making a turnary. So we'll say border border white uh text white and hover is bg white. And
    
    we're going to say slash 20. And what that does is that mixes in uh a little bit of transparency. So you see that it's white until the end here. That 33 is uh 20%. So if you ever seen a a hex code for a color, it's usually six. But if you add two more, that handles transparency. So that's what that slash20 does. Really handy little utility. And then we're going to say colon for So if it's primary, this is how we'll style it. So we'll say bg white text black. I'm messing up my typing. Black and hover bg white 80. So same
    
    principle there. Let's go see how it looks. It looks not great, but we we we we we will be fixing this. So, we're going to be abstracting this uh button link out a little bit later because we use it all over the site. Um but for now, uh we can go ahead and pass it one more string. And I'm separating this out because it's going to be specific to this one. I'll say width is fit. So, that just fits the content. And there we go. So, this is looking pretty good. Let's go ahead and wrap our um slice primary button map this whole
    
    thing in a div that gives us margin uh top. So MT we'll say eight and let's open up this div. Bring it all the way down just like that. Now when we save, we have a little bit more space. There we go. And if uh our editors were to add a second button, they definitely could uh because we were mapping over that button array, uh it would output the second one and have the same margin and everything. So now, if you have one of those keen design eyes, you might notice a difference between this and this. And
    
    yes, it is partly fonts. So we need to add our cool fonts to our website. So, if you head to the documentation or the uh course resources here and we go to documentation in fonts and icons, you'll see font gambino adding fonts to next.js and then react icons. Just click open the first two uh gambino. This is the font we're using for our headings. Uh download the family. I could not put it into uh the zip because of the license, but easy enough that we open it up and we should see uh Gambino regular waft 2
    
    is what we're going to be using in just a sec. And then if we look at optimizing fonts over here, we have really good documentation for how to handle fonts both from Google and local fonts. So Gambino is going to be a local font. We're downloading that and we're going to be using a Google font called Railway. And uh the best part about using Google Fonts with Nex.js is that it doesn't send any requests to Google by the browser. So uh it's it's faster. Uh you don't have to worry about like GDPR stuff like Nex.js is is genius for
    
    this move. Uh it's as easy as using a Google font without the downsides. If we head into our uh code and we go and look at the layout.tsx, TSX. This is where they are pulling in two fonts from Google. Gist is the Verscell font like they created this font. Uh so for both Guist and Gist mono get pulled in. And we are going to be editing one of these. So go ahead and uh change Gist to railway. And you should get the autocomplete right there. Right there. Railway. And we're going to change gist to railway. Instead of g
    
    stands, just say railway. I can't say the word railway. There we go. Uh variable. We're going to say font, you guessed it, railway. And we're going to keep the subsets of Latin. We're going to add a display swap. And that's going to cut back on any kind of jank that we might have um as fonts load in. So now we're going to come down here. We're getting an error here. We're just going to say railway. And what this does is this puts uh some CSS variables on our body so that it uh the entire project has access
    
    to it. We can save this. And then let's see. Uh we're using Tailwind CSS version 4. So we want to do this. So at theme inline and then we're going to uh use this this little So yeah. So this will add it to Tailwind. This is what we just did. Okay. So, head over to our CSS and we're going to say at theme inline dash font display colon var uh is going to be font kambarino. We haven't done this one yet. G m a r i n o. There we go. We'll put this in for now. And then we say font sands. It's going to be var d-font
    
    railway like that. And to get this to work, I typically uh like to pull it out of the body and into the HTML just so that it literally is touching everything. So should say HTML language uh means English for me, but you can change that as needed. Uh, and then class name right there. Body has nothing on it right now, but we we will soon. Uh, and there we go. We have our railway font. It's affecting everything because we haven't um set up the Gambborino or the styling for this head heading just yet. So,
    
    let's go ahead and do that. Open up Gambino folder. And like I said, Gambino regular waft 2. Uh, in your app directory, right here is where we're going to drop it. believe it or not, like that's where you put fonts uh in Nex.js. I thought I grabbed it. There we go. So, drop it in there. I'm going to just change the name of this so that it's not um Gambarino regular and just call it Gambarino all lowercase just for ease. Uh then if we come up here, we see ah Gist Mono is not uh a a a local font,
    
    right? It's coming in from next font Google. So you go ahead and remove that. And let's head to the next.js docs and grab the local fonts part. And we see import local font from next font local. Copy that. Bring that over. I'm going to put it above my globals.css just for organization purposes. Um and then font files can be located inside of app. And so I'm going to say const my font local font. Just go ahead and copy that. And we're going to knock out Gist Mono and put instead of my font, we'll say
    
    Gambino, which is a fun name. Uh, and keep the local font aspect source is going to be dot slashgambino. Uh, we'll keep display at swap. And we want a variable. I'm going to copy this font railway. And I'm going to change it to font gambino. And now, last but not least, Gambborinovariable. And now our CSS that already has it ready. Uh if if we type uh you know text display, that should swap out uh the font for the right one. This shouldn't change yet because we haven't specified it. So let's add font
    
    display to our uh heading there. Where is it? Heading. So, we'll say font display. Just like that. It moves. You see how the prior tailwind moved it all the way to the front for us. That's just the order that they wanted it in. Um, and now boom, we have our font. So, we have both Gambborino and Railway set up. It's already looking much more luxury. All right. I want to get into my personal favorite part of the of just developing websites, honestly. Uh, let's get going with GAP. So, if you head to
    
    our resources, we have animation right here. Got a bunch of links for you just uh because Gap, you know, it's it's robust. Uh it's not I wouldn't say it's complicated, but it's it's robust. You can do so so much with it, but at its core, it's pretty simple. So, uh first off, the Gap docs are fantastic. Um good friend Cassie uh works at GSAP and they just do such a good job. Um there's so much to Gap. It's been around for years. It is like the gold standard for for animation. Uh so we have the docs, we
    
    have gap get started, which is fantastic. We're actually going to be going through that in a second. Um I have a simple demo for you if if you want to um comment these things out and play around with it. Uh that'll kind of, you know, hopefully shore up some of the concepts just by seeing the code running. Um and then yeah, we'll get into some of this other stuff as we go. Uh, but let's go to I'm going to close these just because I don't know which ones to get started. Get started. So, let's get animating. So, in this
    
    article, we're going to cover GAP's core fundamentals and animate some HTML elements. So, this is the uh the the the API for GAP. Let's see, they they break it down right here. So, you have GASAP dot and then we have two, we have from, we have from two, and we have set. There are there are four methods. And it says right here to from from to and set. We'll get into what those are. You then pass it a target or targets. Um this here just you know any uh element with class of box. You can also pass um
    
    direct uh like you can pass react refs. Uh you can pass ids you can pass um just elements like if you want to animate all divs. Um and then vars. This is where it's just so robust because you can p you you can animate pretty much any value uh with GSAP. And so if we look here and we rerun this and it slides in from the left. Let's look at the JavaScript. Gap 2 x 200. So it starts over here and it slides 200 um I think pixels or units on the x-axis. So that's it's that simple. like that is GSAP right there. Um we can do much much
    
    more with it. Um this uh illustrates the two and the from and from two and the set. So here we're going to say Gap to uh these values. So this is um us animating to the values defined in in between. So it's going to go to blue and it's going to move over 40. So if we rerun or if we just click it maybe let's see there we go to blue and it moved over 40. Excellent. From let's see what it does. So it was from blue and from negative -40. So it shifted into what it already was. So it was it was already
    
    positioned here. It was already green and the from just gave it a starting point to like animate in from. And then from two, we're going to rarely use this if at all. Um because usually you you want to animate uh either from or to just the elements default styling. Uh but this allows you to set both. So you get to set uh where it comes from and where it goes. And uh I I want to sing cotton Joe right now, but I'm not going to. Um the video might get taken down. Uh and then set just immediately moves
    
    it over. All right. So that that's good for setting up um certain animations in the beginning. Uh but yeah, that that set immediately moves it to the values without any kind of animation. Um see what else we might need. Yeah, so this shows the like just how robust you uh the target aspect is. You can pass it just about anything. Um and any like CSS property is animatable. Um and and even more you can just animate numbers. So almost anything. So that is kind of all we need for right now. Uh but yeah, it's a it's a it's a
    
    wonderful wonderful library. So we need to install it. Um so let's see if we click on the Gap Docs and we click installation, we see Cassie and we are going to uh head down to the npm install helper here. And we want a couple of things. We want React. So click use gap. We also want scroll trigger. That shouldn't change it, but um yeah, that is just helpful. So we're going to grab npm install gap and npm install gap react. We can just do that as one command. I'll grab this one. Um and head to my terminal, my installs tab, and I'm
    
    going to say npm install gap react. I guess it already added a return. I'll just run that. and then npm i gap. Perfect. They are both now installed in our project. And we're going to be grabbing scroll trigger as it shows here from gap/scroll trigger. So we don't need to install uh scroll trigger as a third thing. But we do need whenever we're using either use gap, which is how we use gap with react, or scroll trigger, we need to tell gap, hey, we are using this uh this is in in play now, so be aware.
    
    So, it's time to add uh animations to our hero component. Anytime you're using uh gap directly in a component when you're importing it, uh you need to make it a use client. Make it a client component. That means that this will run JavaScript in the browser. Otherwise, uh it's just sending static HTML and CSS. Uh but now we're saying, hey, I want some interactivity. I I want this to run in the browser. that then we can go ahead and import GSAP from GSAP and we're going to grab import use GAP from at GSAP react and then right under
    
    that we're going to say GAP plugin register plugin use GSAP like that. Now, this stops uh use Gap from getting uh tree shaken or like as the uh website is bundled, we'll make sure that we don't ditch this as as it goes. Now, use Gap actually has its own docs. If you scroll down to the left, uh React use Gap and that's just saying like why would you choose Gap? But this is the use GAP hook. This makes working with React and Gap together so much better. Like there were a few foot guns that we had before,
    
    but this uh really gets rid of them all. So you'll see that we have a use ref that we we uh we we want to target and scope down our gap animation to just this slice. So we're going to use a ref for that. And you see how it scopes it down. And then we're going to use use gab, which is essentially a use effect that automatically cleans up um our twins if it breaks down for whatever reason. Either it's removed from the DOM for some reason. And why is it so important? Because it can just basically crash your browser. So let's use it. Uh
    
    we're going to head in here. Okay. I'm going to say const container ref equals use ref and import that from react. Yep, use that from react. And then we're going to uh just say null there. Uh but we want to type this. So in here we're going to use angle brackets. This is typescript. So we're going to say html div element just like that. And then here on our bounded uh uh component we want to say ref is container ref just like that. And now we can use our use gap. So we'll say use gap. I'm going to open this up with an
    
    arrow function inside. And then after that arrow function we want to pass an object that it says scope. And that scope is container ref. Awesome. Now, as it says here, inside that arrow function is where we do our GSAP stuff. So, let's go ahead and open up that arrow function. And we want to target our background image first. So, I'm going to add a class here so we can target it easier. I'll say bg image. And then here, I'm going to say gap uh 2. I'm going to call that and pass it.bg bg image and then comma after that
    
    and we need to pass it the config object or or or no our varss it's not a config our variable. So now we want to affect the scale here. So we want it to start at scale 125 and go to so we'll say scale is going to just be one and that's um short for 100 or or you know like scale as one is is what we're really going for. This is scale at 125%. Not sure what these stars are. That's interesting. Okay. Um but yeah, so percentages and this you could do 100% same value. So we'll hit that and let's go to our site. Oh, that went
    
    really fast. But it works, right? We are seeing it happen. Um that's already working. So, we already have a little animation that just shrinks our thing down. Uh, let's do another. Let's actually slow this down. We're going to say duration is five. That's going to be five seconds. So, now when we go back, reload the page. Much nicer. Now, in order to get it to fade in, let's go ahead and get rid of this opacity 50. And let's instead put that opacity here. So say opacity is actually zero. We want to fade in from zero. And
    
    then go to opacity of 0.5 or 50%. Um and now if we we reload. There we go. Looking real slick. Now let's touch on easing. And easing is one of the um the most powerful ways that you can add like kind of a feeling to your animation. So if we go to ease visualizer, uh this is a wonderful tool to kind of like sample each ease and be like that's not how I want my animation to feel. I want it to feel a bit more I don't know fun, bouncy, sleek. Uh so you'll see elastic very fun kind of thing. So it gives you this very springy feel, right?
    
    Where sign is pretty tame, just like, all right, we're just going to get there kind of at at the same rate and then slow down a little bit at the end. But this is because it's sign out. Uh if you do sign in, it'll do the reverse. It'll kind of gradually go and then just straight shot from there. Um and watch the the uh sphere to really see like what is being animated. So um if we do bounce, you'll see that kind of crazy. That's bounce in and then bounce out. Pretty cool effect. And you can think of different ways to actually use
    
    that. Uh but for us, we're going to go with power three and we're going to do out just like that. So coming and you see here it shows you the code ease power three out. You can either copy that or just type it. So ease and then in quotes power three and then it even helps you because it's typed power three out. And that'll give us a subtle change with just how it's working or like how it's animating in um at what speed for you know what part of the animation. So what other animations do we need here? Uh we need this text that
    
    slides up from underneath uh and just kind of appears that way. We also need a similar like fade in style animation here on the body. It fades up, fades up. Um, and we see a lot of those two things. This is its own kind of animation that's special. Um, very, you know, just unique for that component. Um, but here we see the three fade up kind of things. We see that animation again. Have another fade in and another fade in. Right? So, we're seeing a lot of this fade in. I really don't want to have to write all this um each time.
    
    I know it's not much, but it starts to add up as we add things um to each component. Also, I don't love that we're having to make this entire component a client component. That's not sitting right with me. Uh and also, this doesn't handle accessibility yet. And when we handle accessibility with Gap, it's going to be kind of uh like maybe like three or four or five more lines per uh um component that we're animating. And I don't want to, you know, multiply that by every single animation that we put into our project. So what we can do
    
    is something pretty cool and the Gab docs actually talk about it. So creating reusable animations, that is what we want. So you see how they have this fade in element that takes some bars uh and it wraps around the box. So pretty handy. Um and if we look in here, we'll see that we have this fade in component that wraps around those boxes. And then in the app, we have uh fade in box. Yeah, really really great pattern. we'll only have to have one element across our whole uh our whole project that handles fading in uh rather than
    
    every single slice, every single component having to worry about that. So, let's go ahead and create that helper component. So, head to components. We have bounded already. We need a new helper component called fadein.tsx. And then here, we're going to immediately say use client because this is definitely going to be a client component. Uh we want this to run JavaScript on the client in the browser. Uh then we'll say export const fade in is equal to we're going to do an arrow function and inside here we're going to
    
    uh uh spread the props and have children uh varss is equal to an empty object. And then we'll just say class name like that. And it's going I don't know what these things are. it's uh getting typed as any, right? And we don't want to do that. We'll fix that in just a second. And then in here, we're going to return and we'll say div around children. So that's just going to pass it back through. Uh but we want to type this fade in component. So we'll say type fade in props. It's equal to an object. Open this up. We'll say children
    
    is a react. React node uh semicolon at the end when we're creating these types. Uh next line we'll say varss and this is optional uh because we want it to be that if we don't pass anything then we just get like a default nice fade in anyway. Uh we'll say gap tween varss like that. And we probably should import gap before we start doing that. Um we'll say import GSAP from GSAP and after varss we will have a semicolon and then say class name is optional so question mark and that's a string so we won't get yelled at if we
    
    don't pass a class name. Uh but then we want to use this fade in prop. So after the object inside the parenthesis we want to say fade in props. And that fixes all of our issues. And we can save. And back here, instead of a regular div, we're going to change this to fade in. And that should import it from at components fade in. There's a lot of funky stuff around here. So, here's the thing. We're not going to do it every single time because it'll take up a lot of time in the course. But um the way that I
    
    recommend you order your components is uh that your sorry order your imports um is that your imports uh from your own stuff goes at the bottom. Um anything from either React or Nex.js goes at the top. Um, and then everything else from other packages, uh, goes somewhere in the middle. That's how I like to separate it out so you can kind of, um, not just have complete chaos. Uh, once again, I'm not going to stop and do this throughout the course. It's just my my one-time recommendation. So, I'm going
    
    to save that. And just like that, we've lost our animation because right now, fade in doesn't do anything. Um, but it is just kind of there. And we're not passing any of the classes or anything through just yet. So let's actually start there. We'll go to div. We'll say class name. U equal a an object when sorry just curly braces. This isn't actually an object. Just curly braces inside JSX. We'll say clsx and import that. And inside here we're going to say opacity zero because that's every every
    
    one of these is going to start at opacity zero. And then we'll say class name. And if we save that, now we see our animation come back. But it's not because fade in's doing anything. It's because we are passing this BG image along. So actually going to get rid of that. And what we're going to do is we're going to copy out this uh entire thing. So grab the container ref, grab the use gap, all of that. Cut that out. I'm going to save uh and and delete it from your bounded component as well. Going to save that
    
    and then back in fade in we can where's our component right here. Can paste this in. We have to do some imports and that's fine. Import our use ref import from react and import gap react. And now we're using use gap. So, we've got to say gap uh plug register plugin and use gap. Awesome. Now, if we save that, uh we want to actually I'm just going to call Yeah. So, container ref works. We can keep that name. Um and I'll say ref equals container ref like that. Save that. Now, this is looking good. Um and
    
    let's see. It should be working I would think. Maybe not yet. Uh uh because we we need to change what we are targeting. So instead of bg image we want to target uh container ref.curren. And if we save that now there we go. So that's looking great. Uh some small changes that we want to do here. Um because we want this to be a universal component. most things, almost everything but this is going to fade in to opacity one. We want it to go to, you know, full opacity. So, we will fix this in just a second. Um because right now
    
    then it it gets too bright, right? We don't want that. Um but I'll show you how we're going to fix that in a really clever kind of way. Um so we want scale. Uh we we shouldn't need the scale. We're also going to pass that in for this uh component. But in terms of we want the duration, we want the opacity, we want the ease, and also a lot of things are going to be um animating up. You might have noticed that uh yeah, all these things fade in but also animate up a little bit. So we want to make sure that
    
    y is zero and they start a little bit down. Um, and then what we're going to do is we're going to spread with three dots our varss. And that allows us to pass in uh tween bars and it's getting typed for us. And just after all of these, we we spread this so that if um we actually have a duration of 10, it will override this. Uh so that's why we're putting it last. Make sure it's there. And if we hit save, then uh go to our site. We just see that we don't see the scale uh changing at all. Um but we will in
    
    just one second. So head to our hero. We have fade in. And if we open this and hit control space, we see that we can pass children. We can pass a key if we're uh within a map like if we're iterating because you have to pass keys. Uh or we can pass vars. And let's go ahead and do that. that. So, TypeScript's helping us out there uh just so that we don't do anything that isn't uh accepted by this component. So, here we're basically going to um pass vars here that undo the things here that we don't want to uh finish with. So,
    
    scale 125 is where we're starting. We're going to end with scale one. Uh oh, sorry. Uh inside here, you also have to pass in an object like that. There we go. So, uh nested curly braces. So scale one and then we want to uh change the opacity. Say opacity and this is where we override the default and we say 0.5. Save that. And if we reload now, that's exactly what we want. And check it out. Uh we can go up here and remove our use client. Get rid of use ref uh because we don't need that anymore. And if we save
    
    that, this is now a client component. And the only thing that's getting uh JavaScript on the server is oh not there is this little bit that's wrapping around our Prismic next image. And guess what? We can just go ahead and copy this and oh actually we we don't need to copy that because we can just change some of these to be fade in components. So our heading isn't going to fade in in that same way. So we're going to skip that. But this div around our body, it's not a div, it's a fade in. Uh, and if we just
    
    run that just like that. Let's try it. See it fading in a little bit. Yeah, there we go. But that's not what we want, right? We want to change that. Um, so that open this up. So, say varss equals double curly braces. Uh, we're actually going to pass a delay. And I'll I'll I'll give a big delay at first so you can so you can really notice it. say delay is going to be four seconds and duration is going to be 1.3. Uh so I'm changing the speed at which it it it finishes the animation and I'm making it wait for a little bit
    
    before it actually animates. So save that and we'll reload. Three, four. My counting is bad. Um yeah, and then it came in a little bit faster than 5 seconds. Much faster, actually. Uh, now how do we get it to slide up? Because right now it's just fading in. Um, and I'll get rid of my delay. I'll drop it down to 1 second. Um, we get rid of sorry, we we we slide it up by starting it a little bit down. So we'll say translate Y and we'll say 8. So this is going to push it down by 32 pixels. And so if we start it again, there we go.
    
    just slides up. Nice little fade in. And once again, we are using this reusable component. And I love doing stuff like this. Uh if we come down to this div with MT8 on it, we can go ahead and say fade in. And we're going to be animating our buttons. Now, uh make sure it Yep, it added there, too. Um and to MT8, instead of just that, we're going to say translate Y5 and opacity. Uh actually, we we we shouldn't need to do opacity zero on there. just do translate five. There we go. Um, but we don't like that
    
    duration and we want to delay it a little bit more so it happens after uh our body copy. So, we want to say varss double curly and we'll say delay is 1.7 and duration is 1.1. Now, these are all every animation here is just an animation that I tweaked and eventually liked. Uh, if you want to make your delay different, your duration different on anything that we're doing, knock your socks off. Like, like go for it. I would love to see you uh tag me in a site that like has a very different feel or just
    
    like you think you perfected the animations. I'd be like, "Yes, that's that is better. That's awesome." Or whatever. So, uh, don't feel like these are numbers that have been handed down from on high. These are just my taste. Um, but if we save that, we can see it goes boom boom. Now, we're going to go back and animate this. But, uh, congratulations. You've got a component that not only can you take around this entire project, but you can take this to other, uh, Nex.js React projects and use it. And it's really simple. It's 36
    
    lines and it it's pretty powerful. Now that we have a reusable component for our fade in effect, let's create one for our uh like reveal text effect. So head over to components and we're going to say new file reveal text.tsx like that. And at the top we want to say use client because we are using gap here. We have to add to use client for that. We're going to make a component here called uh reveal text. So say export const reveal text equal an arrow function and above that let's say type reveal text props equals open up these
    
    curly braces and we'll say field and that's going to be a rich text field and we're going to import that from prismic io/client like that. Uh, next we're going to say ID, it's going to be a string. Class name, that's optional. That's going to be a string as well. Then we're going to say stagger amount. And this, uh, determines how the gap in time between each word. So, uh, it's going to be optional. Has to be a number in seconds. And we'll say as question mark as optional. And this is react element type. We see this with
    
    bounded. Uh duration is going to be a number that's optional. We want to have a default. And align also optional. And it's going to be a string center pipe which which stands for or. So this is a union say uh start or end. And so it can be one of those three values, but nothing else. So now we can go ahead in here and I'm going to just make an object and use colon and say reveal text props. And now remember how we did it last time where we did the props first and then we typed it after. Now I save a little bit of
    
    time because I get to hit uh control space and it has everything that I need. So, it has the field uh it has ID I need a comma. There we go. Uh it has a line as min all kinds of different keyboard shortcuts. Uh and let's see duration align as and what else? Class name and stagger amount. Excellent. So now those are all imported. That's looking good. Um but we want to give stagger amount a default so we'll say equals uh 0.1 duration we want to give a default so we'll say equals.8 and align we want to say
    
    start and is that it and oh uh as is going to be colon we're going to rename it to component and that's going to default to div like that comma at the end. Nice. All right. Go ahead and open up that component. So, we need to split it up into individual words so that we can um create elements for each word and animate those individual elements. So, we'll say const words equals as text uh is a uh Prismic client helper that turns rich text into just a string. We'll say field and then uh once we have that
    
    string, we're going to split on every space just like that. And now we can go ahead and return we'll say component. And inside here we want to map over the words and create actually two spans uh for each word and you'll see why. So we'll say words mapap and we'll pass this an arrow function inside and just do an implicit return. So two parenthesis there. And what we're going to get here is word. Oh, I overwrote it. Word and index. And then in here, we're going to go ahead and say span. And we're going to need to give
    
    this a uh both a key and a class name. So, first first we'll say key equals, and we'll do back ticks dollar sign word and then dollar uh sorry, no space there. dollar sign curly braces index. So this just makes it so that the key is unique. So if we happen to have the same word twice like 'the', um the index will kind of add that uniqueness to it. Um but we also want it to be unique across the entire um the entire page, right? Because you might have the in the first position in two spots. So we want to add
    
    a third thing and that's going to be our ID. Um, so that kind of will be uh applied to the entire thing. And so now we have a unique key there. That's great. Uh, next, let's go ahead and just close this span. And I'm going to style it real quick. So we'll say class name, uh, MB0, so no margin on the bottom. And inline block and overflow hidden. So this is the span that is going to be um masking our text. And then we have an inner span and inside there we're going to have word and we'll style this span. We'll
    
    say class name and we're going to say mt0 inline block translate y full. So it's going to uh translate 100%. So, but by its own height. Uh, and then we want to uh help the browser to animate this a little bit more efficiently. So, we'll say will change transform. Excellent. And I think that's all we need for that. So, if we save this, we should uh here. So, go ahead and put a border here. So, just say border um and then border red 500. Got to love a red border. So, let's just kind of like break down this effect
    
    and see what's happening. Ah, we haven't imported it yet, so we're not using it yet. Um, open up your hero and instead instead of uh right here, the heading, instead of the this div and the printing rich text, we're only going to need the uh one element. So, it's going to be reveal text. Change your div. And then we can Oh, make sure you import it. Cool. And then I'm going to cut the field out of our prism rich text and delete that. Um, reveal text isn't happy yet because we haven't given it what it
    
    needs. And it needs an ID. So here the ID is going to just be uh I'm going to say hero uh heading. There we go. That should be unique enough. And if we save that, we don't see an animation. Um, and that's because we want to uh we we we haven't added GSAP to this at all yet. But if we just screw up the overflow hidden, so I put like a a dash in front of it. Um, so that tailwind no longer recognizes it. But you see effortless elegance uh gets pushed down there. So that is what's happening. So it starts out underneath
    
    where it is v visible and then it slides up. And these will stagger once we have the animations in there. But right now uh we can keep the overflow hidden and those go away again. But right now none of our styles are getting passed through to this reveal text component. So on component that parent element go ahead and say class name. And we're going to open up curly braces and say clsx import that. And we're going to have a few strings here. So, first we're going to have a string that says reveal text, and that will be what we uh
    
    target with GSAP. So, it's not going to do anything uh for Tailwind, but that that's how we're targeting it with Gap. And then text balance. And if you're not familiar with this, this is a wonderful, wonderful little thing that uh just balances out the lines of text. I I'll show you as we uh continue to work with it. Um right now, we only have two words, so it's not going to make a big difference, you know. Um, so if I then have a comma and then we want to uh set up our align, right? So align triple equals
    
    center. If so, and and uh text center, we're going to pass that class. So if this statement is true, then we're going to return that string and that class will get added on to uh the full string. And we're going to copy this twice. So we'll say align is uh end and align is start. And then we'll say text right and text left. Um and last we're going to say class name. So we should now see it's much bigger, right? And we know that it like each word is hiding underneath um its own thing. It's aligned to the left. It's looking pretty
    
    good except for the fact that we can't see it. You got to take my word for it. Uh so let's go ahead and bring in GAP. Uh first we want to be able to reference our component to scope this down. So let's go ahead and say const component ref is equal to use ref and we're going to type that as an HTML div element and we're going to pass that null as its default. Uh then component ref. Going to put on component ref equals component ref. Just like that. And then this is where we bring in our use gap hook. Use
    
    gap. Make sure it's imported. Um and before we forget, go to the top. Gap.plug register plugin and use GAP. Excellent. Where were we? Use GAP. We're going to call it and inside we're going to pass it a function and then after that we're going to pass it a scope or not object with scope and that's going to be a component ref and and then inside our function uh we can use a little bit of gap gap.2 two and we need to actually add a class because um we want to specify each uh word or or sorry we we want to target
    
    each word. So we want to go and if you think about it of these two spans which one do we need to move? Well this one's kind of like the picture frame right and then this one is the word that needs to slide up. So this is the one that we need to animate. So let's give this a class. We'll say reveal text word. Just like that. And I'm going to save it. Come back up here. Say period reveal text word. And the cool thing is that Gap handles that for us. So that is going to uh um apply to a bunch of words. Like if
    
    if we have a full sentence, it's going to uh be like, you know, six or seven elements. and Gap automatically turns this into an array and we can handle the stagger within our animation thanks to that. So the most important part we have to do is set Y to zero. That's going to reset our uh our you know it's pushed down. We need to bring it up. Uh then we're going to say stagger. That's going to be stagger amount. And we say duration and that already has a default. We're importing that, right? And then we want to say
    
    ease and power three out just like before. And if we save that um Oh, maybe not. Gap is not defined. Did we skip that? Yeah, we did. Import Gap from Gap. Yeah. Uh my biggest Gap tip is to always import Gap. Um, moving things around. Cool. Um, all right. Let's see if it worked. It does. It moves a little bit fast for my liking, but that's definitely working, right? Like, it's the effect. Let's get rid of the border. Uh, so remove both uh border red 500 and border just itself. And there we go. A little too fast.
    
    Let's Let's fix that. Now, back in our hero component. Well, first off, we can get rid of the uh we can just make it self-closing. There's nothing we're not passing it children anymore. Um, but we can go ahead and pass it some custom values. So, we'll say uh stagger amount is going to be 02 and duration is going to be 1.7. And we're going to say as H1, this is a heading one. We want to make sure of that. And I think that is it. Let's check this out. There we go. That's looking a lot better. That slides in real
    
    smooth. Okay. So, there's one last thing I want to do here because I do not love the gap between uh each line in the heading. So, let's fix that. It's not as easy as it might seem, and I'll show you why. So, if we head into our hero, uh let's go and change this letting tight to letting none. And that's going to essentially be a letting of one. So we'll save that. And that's looking really good right there. I like that. But look at what we have. We have this G that's getting cut off. And any descender, which is what those are
    
    called in typography, uh will get cut off just like that. You wouldn't notice it in the uh all caps one, but for this, yeah, we notice it. So what we can do now is we can head into our reveal text and we can fix that. can add a little bit of padding to our uh component with overflow hidden. So, we'll go PB4. That should give us enough space that um our G doesn't get cut off. And it does. So, that's looking really nice. Uh but let's test the animation. Let's see. Uh-oh. It's playing a little bit more peekab-oo
    
    than we would like. So, what we do then is go to our translate Y full and we're going to remove full and put square brackets because we're going to put a a custom value. Uh we with Tailwind you can create your own values. You're not limited to the set that they give you. So, instead of 100%, we're going to do 120%. And that should uh give us just enough space uh pushing it down just a little bit further so that it looks nice. Once again, uh there's not this huge gap in between here and we have our
    
    full G. Excellent. So, while this component looks good, uh it has one problem, and that is accessibility. So, in your OS, uh if you're using Windows, you'll have to kind of dig at this yourself. But, uh in Mac, if you go into settings and search for reduce motion, it will bring this up. You go into display, and we see reduce motion right here. And so if we turn that on, that should tell the browser or tell pretty much anything that hey, I don't want uh I I don't want uh any extra motion, any extra effects that uh might cause some
    
    kind of a vestibular problem for some people. But look, we're still animating the exact same way, even though this user is saying, uh, please don't give me that that much motion. So luckily Gap has a way to handle that. So if we head to the Gap docs and click on the docs and say match media, let's head to this. So this is a great feature with GSAP that uh handles responsive and accessible animations and scroll triggers and all that kind of stuff. So uh we'll get into scroll triggers in just a minute. Um but yeah, basically
    
    this is how with Gap you are watching out for any kind of change. So whether it is the screen width or it is a user changing their settings to say hey uh I don't want motion right like like please reduce the motion. Uh it is if we click accessible animations with prefers reduced motion uh we see this animation here and right now it's not really doing much and we have reduced motion turned on. So let's see what happens if I turn this off. Right away uh match media recognizes that and says all right let's
    
    get back to spinning. Right. So if you look at the code here we have this mm for GAP match media and we add things to it. we add specific queries. So, prefers to reduce motion, no preference. And we change the actual animation. So, uh if they don't prefer or sorry, if if if they're fine with motion, uh then we do something here and we we rotate. Uh otherwise, prefers reduce motion reduce, we don't do the rotation, right? We don't have that extra uh animation. So, we're gonna be doing something very
    
    similar. So let's open up our fadein component and add this match media uh accessibility feature to that component. So you'll see we say let mm equal gap.mmatch media and we because it's typescript we're going to go const mm equals gap uh match media call that whoops that was supposed to be inside our use gap there. Sorry about that. Um, yeah, make sure that's inside there. Cool. Anytime you're you're working with Gap and React, make sure you're doing it inside a use Gap. Um, then we want to say
    
    mm.add and then we're going to pass it parenthesis prefers reduced motion colon no preference and then uh close parenthesis there. And then we want to pass it an arrow function for what will be called if that is true. And all we want to do is move what we have here uh this gap.2 tween move this up into there. Let me save that. And so right now this will only run if uh the user has no preference. Otherwise nothing is going to run. So, we can go ahead and check our settings. Let's say reduce motion. And I can load up our
    
    page. And nothing happens. Is that what we want? No, not really. Right. Um, so what's the issue here? We are uh making our elements visible through GAP. So, if that's not coming through uh then we we have a problem. So we actually need to add the alternative also. So copy this whole block and give it some space and we'll say mm.add and down here we'll say reduce for the value there. And here instead of the duration being five, we're going to make the duration 0.5. And we we're going to make sure
    
    that y is zero because what we're going to do is get rid of the varss. Uh, we don't want the variables coming in on this one. We want it to be pretty um consistently just coming in pretty quickly, not really having any uh any fancy stuff. Change the ease to none. That just makes it a straight line in our ease. It's uh where's the easing ease visualizer? If you choose none, it's just a straight line. It'll just animate the same speed the entire time. And that's fine because we're just doing it in uh within half of a second,
    
    right? And just in case, let's add a stagger zero to this just to make sure that um nothing is happening there with stagger. So if we reload, there we go. What's our new problem? Right? Every time we change something, we kind of have a new problem. But don't worry, Tailwind has a fix for this. So you might have noticed, wow, this is suddenly really bright and it's also very zoomed in. So let's head to our uh hero component and we have these two classes scale 125 and a class that we need to add to pris connect next image
    
    which is to drop the opacity. So first let's change the scale 125 to uh motion safe scale 125. So only if uh the user wants motion right uh then we will scale it up. So we should see on reload. Yep. Yep. We start off at this uh normal scale. So this doesn't apply. And now down here we want motion reduce opacity 50. Now just to make sure we didn't break our animations normally. Um as soon as we change it, it realizes what's happening and it does that nice little zoom out or zoom in. Zoom out. Yeah. And
    
    there we go. Okay, let's go ahead and do the same thing with our reveal text animation. We want to tuck as much animation behind uh accessibility features as we can just to make sure that all of our users uh have a pleasant experience. So, uh I want to go ahead and just copy this entire thing. Let's see where does this end there. And we're going to be able to swap out uh the values inside. So, I'm going to go boom. Just paste that whole thing. Uh, grab the reveal. Actually, grab this whole GSAP 2. Yink that out and put that
    
    in here. There we go. Uh, ah, don't forget to grab uh the mm equals gap match media because otherwise it has no idea what you're talking about. Uh, there we go. And now we want to create a very similar thing. So, we'll say gap 2 to reveal text word. And I'm just going to paste that in here. And let's see what we might need to do. No, I don't think there's anything we need to change. Um, the stagger would have been the only thing that is kind of unique to this component, but we had it in the other
    
    one already. And so, this will work just fine. And now, just like that, our reveal text uh is much more respectful to accessibility needs. Now, we have a pretty solid hero that's coming in, but uh there's that's kind of it. And I think every website needs a navbar at the top and a footer at the bottom. So, let's add those now. Going to go over here to components. And let's start with the footer. It'll be the easier one. I'll show you why. Footer.tsx. And if you look at the uh final version of the website, um it's a
    
    little bit complicated, right? like it like this will take us a little bit of time, but also like you're not getting a lot from this, folks. Uh this is not something that you're going to, you know, have your mind blown by uh when you learn about it. But you might pick up something and I'm hoping you pick up some things with a component more like this, right? So, we're going to spend our time in the course on stuff like this and not so much on a static uh pretty normal footer. So, for that reason, we actually have it over here in
    
    the components and files section. So, right here, components/footer.tsx. Go ahead and copy that. And we're going to paste that in right here. And it should not give us any errors. Looking good. And then we want to head over to our layout file. Where is that? Here we go. Layout.tsx inside your app uh directory. And we want to put that footer inside the body. So going to make a couple of changes here. We're going to say footer. And we should see it uh importing from at component/footer. That's great. Hit that slash. And then
    
    uh around children, we actually want a main element. Every page should have a main element. And now ours does, too. And then we're going to put our uh navbar here, but we're just putting a comment for now because we don't have one yet. We're about to build a simple version of it just to set that up. But let's see. Let's see if we have a footer. And yeah, we kind of do. I think I just hovered over something. There we go. So, we see that there is actually the text there. And if we select everything, we do see
    
    the text. Um, and we do see a broken image here. We got a few reasons for all this stuff, right? Uh, so first we need to bring in some of our local files uh and our assets here. So, let's do that right now. Uh, first we can actually start off with something kind of related, but go ahead and delete this favicon.ico. Just delete that from the app directory and instead pull in this icon. SVG into the app directory. And we have this cool CR. And if we go back, boom, it has been changed for us automatically. It is that easy to update
    
    the uh favicon for Nex.js. Sweet. That took us no time at all. Next, let's go to the public folder and see. Okay, we've got some stuff here already. And guess what? We don't need any of it because this is from the boiler plate that they gave us. So, go ahead and delete all of that stuff. And then in the public directory, let's grab our local files. Open that up. And we're going to select all four of these files. And we're going to drop it. I almost dropped it in the wrong spot. Drop it into the public folder. There we go. So,
    
    we have a background that we're going to be using uh in a little bit for uh our um call to action component. We have uh a fallback OG image that will appear if uh if the person does not set it um in Prismic. We have our logo and this is what we we really need right now. And we have a noise texture that we're going to apply to I think the scroll. Um so, yeah, those are the local files that we have. And now if we go back and reload, there we go. We've got our Co Royale Paris logo down at the bottom. Now we
    
    still have black text on black. Uh that's because we need to add a couple of styles to our body right here. So go ahead and say class name and we're going to say BG neutral. Uh it's going to be 900 like that. And we'll say text is white. And if we save that now, that's looking a lot better. So, the footer is now set. If that was uh less dramatic or anticlimactic than you would have liked, I am sorry. Uh maybe uh comment below and I'll make a whole footer course. Um now, let's create just kind of a a skeleton of the
    
    navbar. So, we're going to go into uh components again. Here we go. And we create new file navbar. Just like that. TSX. I'm going to start by saying export const navbar and that's equal to an arrow function and that will return a header. That is the uh semantically correct element to return here. And what we're going to do for this simple version up uh to begin with is just kind of have the logo centered, have uh like the word menu over here and the word icons over here. We're not going to be building out um this
    
    functionality or anything just yet. Uh but I I do want to get something here while we uh create our slices so you can at least see what we got. So uh back to our code, I'm going to say navbar. It's like that. Open up that div. And then inside here, I'm going to say flex open that div up. And then inside there, we're going to create a button. So say button and we're telling uh EMTT the plugin uh what kind of element we want and then we can add with a dot a class onto that. So I'll say p-2 sorry yeah p-2 and we open that up and we'll
    
    just say menu like that. Simple enough for now. Um then we want our logo. So we're going to sayabsolute. Open that up. We'll come back and style all these through. I just want to kind of um mock this up real quick. And here we're going to say image and import that from next image. And I'm going to self-close it. And then add some things inside. So first we'll say source is equal to /lo.svg. That's what we have in the footer. Um we're going to have some alt text. So say alt is equal to we'll say
    
    co. Give it the little thing coat royale Paris. And then you see it got happy once we gave it the alt text. And we're going to say width is going to be 180 and height is going to be 30. And we'll finish this off by saying class name is going to be width of 32. And on medium screens and above we'll say width is 44. So we can go right outside that absolute div. And here we want our nav icon. So, we're going to say flex and we'll say icons. So, we have menu and image and icons. This is not going to
    
    look good. Um, but have we even imported it yet? No. So, go ahead and bring it in right here. Navbar from at components navbar. Doesn't need any props yet. Um, but let's see what we have. Yeah, it's a nice little mess here, but that's fine. We got it all loading in. And let's continue to style this out. So in the div called navbar up here, we'll add fixed top zero, left zero, Z50 width full, bg black, and text is white. Save that. I'm going just keep kind of paging back and forth and seeing how Yeah. So, we're seeing
    
    changes, but I have a uh typo and I I was able to catch it because it got moved to the front. So, if I fix this from with dull to with full, it shifts back. And that's one of the best parts about that uh Tailwind prettier plugin is that if I screw something up, like I say BG bill, um it will move it up to the front because it doesn't recognize it. Navbar doesn't recognize either and so it sticks that in the front. Um, so if you ever see something that you know you you are used to being towards the back or
    
    towards the middle uh shifted to the front, you you know just keep an eye in that spot for typos. So if we save that and look again, there we go. So we have our full width. Now inside this flex uh div let's let's say items center and justify between P is two and on medium screens and above we'll say P is four. Looking better we have icons over there. That's looking good. Now we just need to shift the coat royale Paris over uh the menu thing here. That's done. We're good there. Uh but this absolute
    
    div let's let's say left is 1- half or sorry yeah dash one slash two so left 1/2 and then negative so translate put the the dash in front of translate so it goes the opposite direction uh I'll say x is also 1/2 and transform and we will say yep and there it is looking real good Um, what else do we need to hit? This looks good. That's exactly what we want. And here for this, we will eventually have um some, you know, a few items here, but right now we don't need anything. So, that is our little menu bar. Right now, it doesn't
    
    do anything. Um, but it'll do for now. And then we can continue to build out the rest of our slices. And we'll come back to this later. So before we move on to our next slice, we have just one more thing that we one more thing that we want to fix and that is the fact that this navbar covers part of our uh hero component here. So what we want to do is we want to head into our layout and here on main we want to say class name it's going to be uh padding top 14 and then medium and above we'll say padding top 16. And that will just give
    
    a little bit of space. See, now it's not covering our beautiful hero. So, looking a lot better. Now, it is time to create our scroll text component. It's got a few pretty neat tricks on it. Um, one of them is that it pins as we scroll, right? It lights up each letter one at a time and it blurs in. See how it looks all blurry and then it blurs in. We also have this glow that comes in in the background. And that's pretty neat, too. So, let's go ahead and create this slice. Going to head to slice machine
    
    and head to page types and open up our homepage. And we're going to create our second slice. So, start from scratch. Going to call this one scroll text. Uh, Pascal case is the way we have to do it there. And you're going to click into it. And then let's add our screenshot right now. Update screenshot. And I'm going to bring over the folder that we have. Go to slice snapshots. And I'll say scrolling text. Drop that in. And that's looking great. It's exactly what we want. So now let's add a field. The
    
    first one's just going to be the little eyebrow at the top. So it's going to be a regular text. We just need a string. Call this eyebrow. And then the second one's going to be a rich text field. And we're only going to allow paragraph. And we don't really I mean, do we want it to be multiple paragraphs? I don't think so. So, and we're going to call this one uh text. Just like that. And that's really all we need here. So, let's uh go ahead and review our changes and push those up. You should have homepage and scroll text to
    
    push up. You should have two changes. Push that up to Prismic. And then if we head into the page builder as soon as it's done, might take a second. Uh head over here, hit the little plus sign. And there we go. Scroll text. We're going to add that. And for the eyebrow and the text, we can grab that right from here. So you have scroll text, eyebrow, defining luxury. Going to grab that. Hopefully I can copy and paste this time. There we go. And Coat Royale is designed for the man who commands attention without seeking it.
    
    Um, I really love how cheesy this kind of stuff can get. So, um, there we go. See, I'm able to paste it in. I had to right click though. You might have to do the same. Not sure why. Something between Prismic and Google Sheets is acting up. Uh, but if we hit save and then we hit publish. Let's go back to our page. I'm going to double reload. And we see placeholder component for scroll text variation default slices. So let's open that up. So scroll text index.tsx. Here we go. Here's our placeholder component. Uh I'm going to
    
    go back to slice machine. Going to open up that scroll text slice and I'm going to grab these code snippets. Go ahead and copy that. We're going to put that I think just inside of a span maybe. Um, and then grab this text and we'll pop that down there just to make sure that's coming in. We're not going to This isn't how we're going to display it. We have to do a lot of other stuff first. But, um, ah, so we just saw that there's a bit of a bug on small screens. Well, we'll have to fix that before we uh,
    
    launch this. um defining luxury is there and we have our full sentence there. So next let's change this section to our favorite bounded. There we go. And save that. There we go. We see a small change but it'll be more dramatic on bigger screens. And then here we're going to give it some styles. Say class name is flex. Height is screen. Let me scroll down so you don't get blocked. height is screen items center justify center and bg neutral 950. So we see it got a lot bigger and that'll that'll get pinned so it won't
    
    look as silly as it does right now. Now let's go ahead and wrap all of this in a div. Let's just say div. We need any styles just yet. [Music] Um, we're going to be animating based off of this div in a little bit. So, that's that's why we have it, but it doesn't do anything yet. Um, and then let's actually change the span to a div. That was my fault. Uh, we will say class name, and it'll be margin bottom two, text center, text small, tracking wider, and text neutral 200. And let's just save there and see how
    
    it's looking. There we go. Already looking a little bit better. Let's keep going. Uppercase medium screens and above. We'll say margin bottom eight and medium and above text base. So get a little bit bigger. And there we go. That's our eyebrow looking really nice. Next, we basically need to do the same thing that we did for our re reveal text. So when we chopped up the word or sorry we we chopped up the sentences into words but now we need to chop it up into characters. So each individual character needs to have its own like
    
    span element. So we can go ahead and wipe out prismicri text here. Let's put uh the paragraph or like the sentence or whatever just so we know where that's going. And then if we come back up to just above the return, let's make some space for ourselves there. We're going to go ahead and say const words equals as text which is a function from prismic. You think we think we used it the first time too. Say slice primary.ext and then we're going to say split and we're going to only split this on uh spaces. So we pretty much have the
    
    same result that we did before, right? Um but we are then going to break that up further in our JSX. So down here right after the paragraph comment we're going to say text center open up that div and we can say p do font display and then open up that paragraph tag. We'll come back to it and we will say words do map parenthesis passed an arrow function that has an implicit return word, index and then inside here we want a span and that span is going to have a key of back tick. We'll go dollar sign
    
    word dash outside of the dollar sign and curly braces and say index. And let's give this a class of inline. And it it automatically defaults to inline, but I just want to be uh very specific about that. Spans are inline, divs are block um elements, but let's just make sure. And then here we're going to say word.split. And then we're going to pass it uh no space in the middle, just an empty string, nothing in there. So it's going to split on every single character. We're going to say map and then another arrow function with an
    
    implicit return. And here we're going to say char and then char index so that we differentiate it from the actual index. And so we want to say span and then inside here we need another key that's got a little bit nested a little bit kooky but uh we got it. We'll talk about it in just a sec. So we'll say char and then dollar sign char index like that. And to give the same class name inline and then here finally at the heart of everything we say char or you know for character but for some reason I
    
    can't say car is that that that word is char I don't know anyway just that is is that just me I don't know comment below um and then afterwards this is what we actually missed in the first one we need to handle um spaces essentially. So let's go ahead and right underneath where we split out the word into letters, we're going to say index is less than words.length minus gthgh minus one question mark. So if we haven't reached the end just yet, we want to return a span with inline uh that has inside it, we're going to
    
    say amperand nbsp non-breaking space and then semicolon. And outside of those parentheses, we need to have um our colon and then we'll return null. So, if we save that, we get a sentence. It is it it looks okay. Like, yeah, cool. Why did we have to do all of that work just to get a freaking sentence? Um, and the reason is if we inspect it, we'll see that every single letter is wrapped in its own little span here. So, each word and each little letter. That is why we went through all of that. And now we can animate uh the
    
    color on this uh element and this element and this element. And so that's how this is going to work. So I can close this up. So just to go through it again um here we go through all the words and we map through them. And then here we take uh the individual word split it up into letters or characters I should say and return that character. And then after each character we check and see if we are um done. Sorry, not after each character, after each word. So you see how we we've split up the word and then
    
    okay, the word's done. Are we at the end? Yes. Then we don't return a space, but otherwise we do. Now clearly we have some styling to do. So up here with text center, that's going to stay the same. But font display, we're going to add some new some more classes. We'll say flex and then flex wrap justify center uh text 5 XL leting tight text balance uppercase and medium and above we'll say text is 7 XL. There we go. That's already looking a lot better. It's looking like how we're going to be finishing. And cool.
    
    Now, we just need to add a couple of stylish things. So, right inside bounded here, we're actually going to create two divs. One we're going to call glow background, just like that. And the next one we're going to just say absolute. And that's going to be our um texture. So, we have our glow and our little grainy texture. Let's start with a glow background because we are going to grab that. That's one that I showed you at the beginning uh from our resources. So, scroll text uh component, we are in that. And we're going to grab
    
    this glow background. We are not typing that. I refuse. So, uh open up your CSS file. You should only have one. Um there we go. My icons changed recently. That's strange. Um and just underneath, go ahead and paste that in and save that. And so now we have this glow background, but we also want to add a couple more styles. We'll say absolute and inset zero, zero, h is full, that's height full, and width is full, and opacity zero. But I'm going to cancel that part out so we can see it uh before we animate. So put a couple dashes in
    
    front of it, and we'll know to um you know, fix that in a little bit. Uh so if we go to our page, we don't see it. What's going on? Well, if we go up here, yeah, we do see it. Why is that? Because we are using absolute positioning and this component uh is not catching it just yet. So, uh, for now we're going to put relative on here, but soon we're going to use gap scroll trigger, and that will change, um, the the, um, position of this element, uh, to sticky, and it will handle that for us. So, now
    
    that we've done that, the glow shows up down here, and that's already looking better. Now, let's go ahead and add a couple more styles to this absolute div underneath the glow background. say inset zero. BG is going to be uh square brackets. We'll say URL parentheses uh single quote or uh is that single quote? Yeah, that's what it's called. Uh noise texture.jpeg or sorry jpg or whatever just you typed it right. Uh and then after that we'll say opacity is 30 and mix blend multiply so that only the dark parts of
    
    it show up because right now uh as I showed you before it is a black and white like kind of like staticky image. It's a noise image. Cannot resolve noise texture.jpeg u oh because I didn't put slash in the front. Make sure you have a forward slash there. Reload it. Did we break our server? Maybe because we definitely do have noise texture JPEG right there. So, I'm going to restart my server. Sometimes that happens. Um especially with the new Turbo pack. Um sometimes the server just uh you you you do one error and it can't
    
    recover from it. So, let's see if that was one of those cases. Yep. So, if you ever hit that, it's kind of first thing you do is re restart your server. You can see we got that noise and just adding a little bit of grain, a little bit of uh texture to our page. And if we make it full width, that's looking really good. And honestly, like by itself, it would be kind of a cool thing. Uh our text is getting that grain though. That shouldn't be the case. We'll just keep an eye on that. I think that the GSAP animations will change how
    
    that works. But if not, we will uh we will deal with that. So before we uh bring in GSAP, we are going to need to target a few of these elements. So we're going to use a use refs. And right at the top uh in here we're going to say const component ref is equal to use ref import that from react. I'm going to say html div element and then null. And then go ahead and copy that two more times and just change this to text ref and change this one to content ref. I know this might all sound kind of similar, but we will handle that part.
    
    No worries. So, down here on bounded, we're going to say ref equals component ref. And then down here on the text center div, we're going to say ref equals text ref. Oh, and I missed one just up here. This div that doesn't seem to do anything. Uh, that's because it is going to be our content ref. Awesome. And now with those three refs in place, we're going to go ahead and bring in GSAP. So I'm just going to go ahead and try use GAP and pass that an arrow function. And after that, we can give it
    
    the scope of component ref. Um, but first let's import it from Gap React. And then inside here, uh, see if we just say GSAP. Will that help us import it? Yeah, there we go. So, GSAP from GSAP. There we go. I like to usually do this, but it doesn't seem to change anything. I'm just being consistent across my project. Oh, and go ahead and remove the prism rich text if you have that import in yours. So, we have our use GAP hook here. Let's pull in our component ref, our text ref, and our content ref um in an easier way to
    
    work with it. So, we'll say const component equals component ref.curren. And we're going to do the same for const text element equals text ref.curren and const content element equals content ref.curren. Great. And last but not least, we'll say const letters equals text element question mark dot query selector all. And then we're just going to pass it the word span like that. So that is going to give us all of our letters. And here we want to check and make sure we have everything. So we'll say if parenthesis exclamation mark
    
    component. So that's basically saying if no component, right? or no text element or no letters or no content element then return like we don't want to proceed at all. So we we pull these all in and then we make sure that we have them and if we get to this line then we do. So we're going to now just like set initial blur and color. Let's put a little comment for us there. So let's say gsap and for the first time we're going to use gap set and we're going to pass this content element and we're going to give this a
    
    filter and we're going to give it a string that says blur parentheses 40px inside there. That's all that one needs. We just need to set it so it starts with a blur and then we will transition to not blur later. Um, and then here we want to say gap set letters. And in the object, in the vase object, we'll say color. And we're going to give this a string. We'll say hsl parenthesis 220, space 9%, comma, space 20% close parenthesis. And so that will set the beginning value. Let's see what do we uh what's the issue here? Ah, yes. So, it's
    
    saying, "Hey, uh, you need to make this a client component." So, let's go ahead and do that right now. At the very top, go ahead and say use client. It's a very interactive component, so I don't mind uh this being um one of those. So, I think this is just blurred to all heck. Uh let's change this down to 20 just to see. Going to reload. Yep. You see, you can see that it's it's right there. Um let's do this one more time. 10 pixels. Reload. And then yeah, you definitely see this letter. So, we're starting at a
    
    big value, 40. So, it's just pretty much like dissipated. It's barely even there. That's great. And now what we want to do is on scroll, as we start to scroll here, we want it to start to transition to uh blur of zero, right? Just like completely sharp. Uh how are we going to do that? We're going to use gap scroll trigger. So, come back to our resources, head to documentation, and gap. I don't think I have scroll trigger listed here, but let's go to the gap docs and we should see scroll trigger right here in
    
    the plugins. And this is such a cool plugin. And like the rest of GSAP, uh it is both robust and also simple depending on what you need. So look, this is already what what we're familiar with, right? Gap.2 box. We know we know how to work this. And then, you know, there's a a var where we're moving this box 500 to the right. But look, we just added a new property scroll trigger. And we're going to start the animation when box enters the viewport. And if you just leave it with that default, it's going to scroll
    
    and be pretty straightforward and simple. Um, let's see if there's any. Nope, there's no like playground here. Um, but that's fine. But you see, now here's an ad advanced example just to give you an idea of like all the things it can do. So, we're going to pin ours, for instance. We can specify where we start and where we stop. Um, that animation. This, uh, makes it for smooth scrubbing. This will take 1 second to catch up to the scroll bar. If you make this like 10, it'll take it'll feel like you're moving through molasses. Um, and
    
    yeah, lots of different features that we can add on, but uh, scroll trigger is one of the best ways to do these kind of scroll animations. So, back in our code, we need to do two things. One thing that I forgot to do, uh, we'll go and just say gap.plugins register plugin. And we're going to say use gap and scroll trigger. And let's import that from gapscroll trigger. There we go. Um, and real quick, I'm just going to move this down. You know how I like my stuff organized. And there we go. So we're now
    
    registering that we have scroll trigger uh in the mix and what we can do where are we set up. So right after our gaps sets we can say gap.2 two and we're going to to uh affect the content element and we are going to say filter is blur oops in quotes blur 0 px and duration is going to be one. The duration part here is a little funky. Um it just kind of becomes a a a unit like a fractional unit almost if if you're familiar with with CSS grid. um when you're scrolling, right? Like I determine how fast I scroll. So this
    
    isn't seconds anymore. It's just kind of uh yeah, it's it's relational to any other uh duration you add to this same animation. Anyway, uh we'll say scroll trigger and then we pass this an object. Um we'll say trigger is going to be the component and I'll show you what that means. Um, we'll say start is going to be top and 75%. We'll break that down in a second. End is going to be top. Top and scrub is going to be two. And last but not least, we want to say markers. Oh, no, not mark. Markers is
    
    going to be true. And that is going to give us little helpers on our page. Uh where is our page? So here it is. Reload. Um and you'll see we have these little markers now. So we have that scroller start and end. And we see that as we scroll up and down, right? Once we get to there, it's 100 or it's at um blur zero pixels, but as we move back up, it starts to blur more and more and more. So this uh component right here is our trigger. So So the animation is going to start when the top of the component, let's look at
    
    our code. When the top of the component reaches 75% of our viewport. So we see we're at 75% here with this scroller start. I know it's very tough to see the green on the on the gray. Um but that's 75%. And the animation is going to start when this component, this trigger that that we set, right? Right? We set that the trigger is the component and when the top of that component reaches 75% of our viewport and then it's going to animate through until the top of the component meets the top of our viewport. That's
    
    why it's top top. You see the end matches up with the end at the top of those two things. And then in a second we're going to pin this and then we're going to animate um straight through with the uh turning this text to white. But yeah, you've just done your first scroll animation and all it took was uh a few properties on on on GE that you've already learned. So pretty freaking sweet. And you can see uh if you go ahead and change the scrub to like uh let's say eight, you'll see a big difference. So, I'm going to scroll back
    
    up, reload the page, and you'll see that as you scroll, it takes a lot longer to come into focus. And as you scroll away, it like moves a lot slower. So, that's what scrub does. Scrub kind of delays uh the update. It's like it it makes it lag. Um, just change that back to two. We we we want a little bit of that, but not tons. All right, let's remove those markers. And we're going to now create for the first time a GSAP timeline. So we're going to say const color TL equals GSAP.timeline. And Gap timelines are
    
    great for when you need to chain or have animations relate to one another. So, if I want uh this animation to happen right after that animation and like kind of do like a sequential sort of thing, that's when timelines are the thing to to reach for. And it's one of the main reasons why GEP can be a lot easier than animating in just regular CSS because you don't have that ability in CSS to kind of like chain uh you know when when this animation finishes then that one starts. You kind of have to change the
    
    timing by hand. And if you then change one of the uh animations in the middle or something, then everything else has to be, you know, changed by hand again. So, it's kind of a pain in the butt. So, we have gap.timeline. We're going to call it as a function, and we're going to pass it an object for some defaults here. Uh, but we're going to say scroll trigger. We want this scroll trigger to affect the entire timeline. Basically, be the way that we scrub through this animation back and forth. And we'll pass
    
    this an object. And we're going to say trigger component start is going to be top top and end is going to be bottom and negative 100%. Once again, we'll see what that looks like. We're going to say pin true. Been talking about that a little bit. And then scrub is two. And then markers true. Make sure you uh never ship your page with markers true. Um you know it looks a little bit amateur when you do that. It's it's okay. But uh you know people be like why what is the scroller start scroller end thing like
    
    oops. Um so do we have anything happening just yet? What or oh no no we we don't. Sorry because um we haven't added anything to this timeline. But we do see that our setup works. And so it's going to start here once it's pinned. And then you see that this is kind of like the progress bar. And we are now um released. There we go. So we we we get released there to kind of continue scrolling on um because it's negative 100%. So it doesn't just stop there. It stops another 100% past it. And now we're now we're free. So let's add to
    
    this timeline. So now they have this color timeline. We aren't going to be calling gap.2. We're going to be calling color TL.2. So we are adding the twins to this timeline and it'll take care of the order from there. So we'll say color TL.2. We'll say letters for our target. And then we're going to pass it uh our vase. And we'll say color. We're going to say white. And here we're going to um add a stagger. And and this is kind of the key. Uh well, actually, you know what? Let's let's do this first and then we'll
    
    we'll we'll add the stagger once you see like, oh, okay, that's why we need that. So, see how this just does every letter at the same time, makes them all white at the same time. Not Not really that interesting. And it wastes the entire thing that we did here of of breaking them out into individual characters. Uh but so color white. Now, now we need to stagger it so that one happens after the other. staggering and pass out an object. We'll say each is going to be 0.01. Once again, not real time, but
    
    it's relative to one another. Uh we'll say from is going to be start in quotes and then ease is going to be power one.in out just like that. And so if we scroll to the top, reload, and let's scroll through. There we go. We are seeing this light up. And you can see that like what I was going for is I don't want it to um you know, kind of like snap into being white. You you have like a gradient of gray here, right? And so you got like pure white here, then you have lots of like little grays. And it's just kind of a nice little feeling
    
    so that even once it gets to that letter, um, it still has a little bit of time to become fully white. So, that's looking really good. Play with that. Go ahead and en enjoy that real quick. Um, and then we have one more thing to do. That's really fun. Now, the other thing we have to do is uh take care of our um, glow backgrounds. Remember I disabled the opacity zero on glow background. Let's bring that back. So opacity works again and it's it's a hidden element now. Right? So we have this dark dark background. Uh then going
    
    to come up here and we want to say color TL.2 two and we're going to say glow background and we're going to pass it a vase object and say opacity if I can type it is going to be one ease is going to be power to is that in out yep and then duration is going to be one if we save that let's go ahead and reload our page And let's give it a test. So we hit here and then, you know, we start to move through. And then we get our glow background. Now, that's working exactly how it should be, but that's not how we
    
    want it. Um, if we go back to this, this is the final version. Um, you'll see that the glow and the letters are happening at the same time. How can we synchronize that in a decent way? Well, we have something called uh a position parameter when it comes to GAP uh and these timelines. So, right after our vase object, we can pass uh a few different things. We can pass a number. So, I can say, all right, at uh at second two in the timeline is when I want this to start, regardless of what's happening before it. Um, I can also say
    
    things like uh where wherever this is supposed to start, say plus equals 1. So it'll start 1 second later. This kind of adds a a 1se secondond delay. You can also do minus equals 1. So you know a negative 1 second delay. Make it start 1 second sooner. We don't want any of that. We want it to start at the exact same time as the rest of the timeline as this animation here. So we're going to say zero. This one because it's first defaults to starting at at zero and we we say hey make this one start at the
    
    beginning also. So now if you put zero right after your vase object right so it should look like that. Um and we reload we should come back up and we should start to see the glow coming in about like you know halfish way. And there you go. That's that's your scroll animation right there. I'm I'm curious. Are you surprised that it was actually easier than you might have thought? Um like it's a pretty cool effect and we are we are pretty much done with it. I think yeah I mean we we handled it. So
    
    fantastic job. Uh it's looking really good. Now we are ready for more. Whoops. I almost committed the cardinal sin that I warned you about and that is leaving your markers on and just saying you're done. So let's head to our code uh and let's grab markers. remove those and reload the page. There we go. No more markers. All good. But another thing I said we needed to fix was the lack of space between our words. Uh you can't really tell when it's on a new line, but as soon as it gets like that, you can
    
    tell. So, just like we did for the words in our um scroll text component, going to go ahead here and say index is less than words.length length minus one question mark. Make sure you spell length right and then we we will uh return a fragment. We'll say and NBSP little colon. And then we can just say null. Uh oh, sorry. NBSP. Yep. Oh, make sure you put a colon there to have that as the other option. So, if we're not done, return a space. If we are, don't return a space. There we go. Looking a lot better. We've created two slices.
    
    Now we have our hero and we have our scroll text. And next we need to create this product feature slice. And you can see it has an image. It has uh a little bit of text over here. And then it has this which is not content that we're going to put directly into the slice. This is going to be a reference to a different model. So we are going to uh create specific models for our uh going to say scents fragrances same thing right uh so when you click into here it will bring you over here and give you a
    
    lot more information and this is going to be a new type that we create in slice machine. So let's go ahead and do that right now. Um if we head over here we go to page types and we see homepage. We're going to create a new one. We're going to call this uh fragrance. It's going to be reusable type-C product. We're going to add that here. Fragrance. F R A G- R A N C E. Create. And there we go. Page saved successfully. Uh now the thing is most pages that you create are just going to be a slice zone, right? We talked about
    
    this where uh the page snippet, you know, you just grab this uh it literally just returns one component which returns a bunch of components, but that's all you're you're going to roll with. Well, not on this page, right? This is a very structured page and because of that we are going to be adding uh many fields directly to this page type and we're not going to really return any slices here. So this is kind of a uh an anomaly I would say. Um so if we go back to slice machine we're going to start up here with the static zone. this
    
    little plus here, not the uh big purple ad cuz you know they want us to add slices, but we're going to add a field directly to the type and that's going to be a rich text field. We're going to call this title and that only returns a heading one no multiple paragraphs. That's going to be Ignis or Terra or Aqua. Those those titles for the fragrance fragrances. And so let's look here and see what else we need, right? Um, this is going to be applied to everything. So, I'm just going to hardcode that, honestly. Um,
    
    there's our title. We need a description. We need, uh, a couple of these features that each of them have. So, if you look at the other one, aqua is fresh and aquatic, refreshing, and invigorating. I'll show you how we're going to do these. Um, and then we need an image for this. And there's also a few like OG images. And as well as um if we go down to our next component that we're doing after uh after this one um we have this very different style of uh of image. So it's you know we got to get like the the uh feature image in there
    
    too. So we're going to put quite a few fields on this type. So next let's do an image and that's just going to be our bottle image and we'll save that. another image and this will be our feature image. It's when it's like in fire and in the water and stuff. Uh next we're going to do a rich text field. Going to call this one description and remove everything except for paragraph bold and itallic. Hit done. Next, we're going to add a number. Scroll down a little bit to number. This is going to be the
    
    price. Um, and we are going to uh in cents. So, it's not going to be dollars, it'll be in cents. And then we will convert it. Um, that way it allows you to, you know, do like $99.99 and not have to put in any decimals or anything. It's just easier for validation. Um, incense. Cool. Now, we're going to do a couple of um selects. Now, give us a drop down of options. And we're going to call this first one scent profile like that. And we don't need a placeholder, but our options are going to be uh all lowercase. We say
    
    spicy and then woody and then fresh. Just like that. And we'll say use first value as default. Spicy. Looks good. Save that. And then another select we're going to call mood. This is all like, you know, cologne stuff. It's not not real, but uh yeah, so like the the mood is bold and seductive. Sure. Right. Um but it's fun. I I en enjoy how uh how kind of over the top this stuff is. So uh our first option is bold, then grounded, and refreshing. And we use the first value as the default. That's fine. And we'll
    
    say done. And then we don't need to add an OG image because it's already over here. our meta images right here. Um, but we're going to get rid of the metatitle and the metad description because we're going to actually pull that and programmatically create it from the title. So, I don't want to have to enter it twice and potentially we forget to enter it and it looks bad, right? So, get rid of the metatitle and the metad description. We'll keep just the meta image over here. And that is it for our
    
    new page type. We can review our changes. Yep, that changed. I made that. Let's go ahead and push that up. and we can create our first uh little cologne fragrance. So, head over create a new page. We now have one option still, but it just shows you like this is a singleton and it already exists. So, yep, you can't you can't build another one, but this one we can make make as many as we want. So, I'm going to start off by saying terra. Uh actually, I said Ignis, sorry. Uh and then bottle image. If we select image, um, you should have
    
    already uploaded all of these images into Prismic. So, go ahead and find Ignis bottle.png. Add that there. And I'll say a bottle of Ignis cologne. Like that. Uh, and you know what? I'm going to go ahead and do that to the other two while I'm here. a bottle of Terra and a bottle of Aqua because now that's going to be the default wherever we add that throughout the project. So that's really handy. Um we can just add like a global um alt alt tag. So uh don't select that one. Select Ignis and add to your page. Nice. Uh
    
    feature image. This is going to be decorative. So you know we don't need to say the bottle again. Um but this is our feature image right here. Terra add. Oh, I'm I'm getting them all mixed up. I keep I I really want to do Terra, apparently. Uh, Ignis ad right there. Uh, add to page. Now, description, you're going to find over in the Google sheet. So, we'll say fragrance Ignis and then say forged in fire. Oh, and and see if you uh get confused at all. Um, there you go. There's the information. Um, so
    
    copy and going to paste. There we go. Forged in fire looks good. Price in cents, uh, $110 apparently. That sounds reasonable, I guess. Uh, spicy and bold, I think, is how you define this one. Yeah. And then our OG image is that. So, let's go ahead over to the SEO and metadata uh tab. Yep. And choose that. We don't need an alt text again because OG images don't like get all text. So, we're going to go ahead and save that and we can publish. And now we have our first um fragrance. And now that we have that, we
    
    can start to build the slice that references it. I mean, we could have done it either way, but I like having something to already point at. So, we'll say add uh generate, no, sorry, uh start from scratch. And for slice name, we are going to say product feature. And there we go. Let's get grab our screenshot and I'll pull in my slice snapshots. This is the product feature here. So I'm going to drag this in. And there we go. Now everyone knows which one we are talking about. So as you can see in the image,
    
    guess we can just reference that without going back to the other tab. Um, we need a title. We need a like a body or a description. We need an image here. And we need to reference uh a fragrance. So let's get those added in. So to start, let's say add a field. And we're going to say rich text. This will be a heading. Unselect all and select just H2 because this this is not designed to be a hero. Um and don't allow multiple paragraphs. Another uh rich text field. And this one is going to be called
    
    description. And this one, unselect all, paragraph, bold, itallic. And yeah, we can allow multiple paragraphs there. Uh, we're going to add another field. And that's going to be an image. And I'm just going to call this image. Uh, so that the ID gets picked up like that. I'm going like edit it a little bit. Um, but I want this to actually be called feature image. Uh, so if you like tweak with this a little bit, uh, it'll stop mirroring that one. So I want the label for my editors to be feature image, but I just
    
    that's plenty for me. I I I know what that's going to be, uh, in the actual markup. I just don't want to confuse them if they think that that is another image that they need to upload, you know. Um, and then add a field. We are going to do a content relationship right here, a reference to a Prismic document. So that's how you can have one document reference another one. And for this we're going to say fragrance. And down here we get to specify the type. Now if you had a whole bunch of types um this would be even
    
    more important because you don't want them to just point to, you know, uh a handbag or whatever else in unless you want them to. But like pointing to the homepage would be terrible cuz I wouldn't I wouldn't have all of those things like the bottle image to reference and put into um my slice. So make sure they're referencing another fragrance that locks it down. And we'll say done. And we need to do one thing. Check this out. So if we go into review changes and we just added a slice. Uh-oh. We should be like ah one one
    
    change. That's not right. We need to add this to our homepage page type. So go in here, add uh reuse an existing slice and we're going to say product feature. Click add. And now we review changes. We see we have two things changed. So go ahead and push that up to Prismic. Nice. So let's go ahead and uh add that slice to our homepage. We go over here to under scroll text. So, we're going to say product feature and our heading. Let's go check it out. Let's see. Uh, nope, not there. I can close that for now. Uh,
    
    our heading and the product feature is powerful simplicity. All right. Copying and pasting. There we go. Our description. Grab that. And our feature image is not this one. Not the one where they're up and down. But the one where they're like kind of diagonal side to side. That's our grid picture. And I think we have alt text written here. A loving couple caressing one another. Ain't that great? Ain't love grand. Um, fragrance linked to a prismic page. We're going to go ahead and click that. And right now
    
    we only have one option. And we'll say Ignis. Click save. Click publish. And now if we go back and double reload at localhost 3000 uh we will see our little placeholder component for product feature. We are used to that by now. So let's go ahead and find that and say product feature index.tsx. There it is. And I'm going to wipe that out. And let's bring in that slice the product feature and show code snippets. So go ahead and grab these. You know what to do. Got to collect them all. Click, copy,
    
    paste. And last one here. All right. Now, let's go ahead and I'm going to hit command period and then add all missing imports. And it's happy again. Love to see that. Let's see what we have. Powerful simplicity and expression of quiet luxury. Nice. That's all coming through. And we have a link. And that doesn't take us anywhere right now. That's okay. That it it it shouldn't right now. Um, but the first thing that we can always do when we open up a new slice is to just say bounded. Just a nice quick little
    
    first step that gets us rolling. Um, we can also come in in here say class name. And we're going to do an overflow hidden. And you'll see why. Well, I I'll say it right now. Uh it's cuz the bottle uh tilts and because it has a square bound um it like creates uh a box like this. And here I'll zoom in a little bit. It creates a box at an angle and that can sometimes like poke off the edge. So it's not a big deal. Uh but we just need overflow hidden. And we'll do bg black. uh py is 16 and text white and medium and above
    
    we'll go padding y 24 and if we go back here we're starting to see some stuff happen. So we see our bounding uh to took place. We have the black background now. Now let's go ahead and wrap all of this in a div with grid. So I'll say grid and I'll come down and wrap our uh rich text next image and next link all four of those and add a few more styles. Say grid calls to sorry grid calls one and then items center. I botched that one. And gap 8 large and above we'll say grid cols three and large and above we'll say
    
    grid rows. And this is going to be a custom value. So square brackets we'll say auto, auto. Remember, no space in between or or breaks it. There we go. We hit save. And that is looking better, but not what we want, right? And that's No, it's fine. We're We're getting there. Don't Don't sweat it too hard. What what we need to do is to get uh this image to span two of the three columns, right? So, the way we do that is by uh pulling the image up first off. So that it is the first item here. And then we're going to wrap that in a fade
    
    in. Might as well get right to it, right? So components fade in and wrap that around your next image and give fade in uh some classes. So we'll say class name is translate Y16 opacity zero large and above we'll say cal span two. So it's going to span two columns and large and above well it'll uh span two rows also. So row span two. Let's see how that's looking. That's already looking a lot better. And that nice little fade in. You got to love that. Uh let's tweak that a little bit more though. Um
    
    because we want uh just kind of a short duration. So varss is going to be uh duration one. We just reload. Hm. We missed it. We missed the animation. Tuck that away in the back of your head. Uh we're going to fix our fade in component in just a minute cuz you know if the page loads in all the way up here, none of these animations that fade in down here are going to be seen unless we do something. Um so we need to add some classes to our perfect next image. Go ahead and say class name, we'll do height is auto,
    
    width is full, and object cover. Just like that. And that should just help when we go into smaller sizes. Now, we want to actually combine the heading and the description into one element, right? We just have this box, kind of like a bento style thing. So, we're going to wrap both of those in a fade in. So, we'll say fade in and wrap that around uh the heading and the description. If we save, it should already make it look a little bit better. And then there's our ignis coming through. uh let's just say ignis
    
    but we don't have that yet. Um then we can add some styles to our fade in. So we'll say class name is going to be translate y16 space oh y 6 self start and bg is going to be white but only 10% opacity. going to go uh padding is 10, opacity zero, large and above col start three and large and above row start one. So we specifically state where we want this to be. It is where it is, but I I don't want it moving around if we shift any of these uh elements, excuse me, elements around. And there we go. That's looking better. Let's uh
    
    style our prismaker rich text in a different way than you might think. So, we're actually going to create an H2 here. And inside that is going to be our Prismicri text, but not actually. We're going to change it to a Prismic text. I think we've done that in this course already. Um but if not, this just returns a string. And so now it's inside our H2. And nothing's changed over there. But we're going to style this. Uh class name is going to be text 3XL letting tight font semi bold and medium and above we're going to
    
    say text for XL. That's looking good. Now for our next prismic rich text we have to keep that as uh rich text because we want to keep any kind of formatting that we put on there. Um, but we can just wrap that in a div and we'll say period uh text base. Open that up and add a couple more classes. We'll say max width LG and text gray 300. Be a little bit dimmer than the title. Let's give it a little bit more hierarchy. And last, we have this Prismic next link down here. But spoiler uh this is not what we're actually going
    
    to be using. We don't uh we're not using our prism next link and we're not going to be just kind of like throwing a link down saying, "Hey, go over and get it." We need to fetch um for this specific fragrance. So, we're going to just delete that and put a comment here. Say fragrance. And if we head up to the top right in here above the return, we're going to say client, sorry, const client equals create client. And that comes from at prismic io. Really want to emphasize that uh not at prism.io client
    
    at prismic.io. I know that sounds very similar. Uh and here's why. This is where we're getting it. Um we have a file here, prism.io.ts. TS that was automatically generated for us when we kicked up slice machine and we are doing two main things in this component uh or in in this file I should say uh we have a routes array that matches our product project's route structure. So what we're going to do right now we can actually do it uh is uncomment this and we can go ahead and say instead of type page we'll
    
    say type fragrance and path is going to be slashfragrance slash uh UID and because of the colon there that's going to make this a variable. So that'll give us back like SLnis for the uh UID that we have for that. So we handle routes here. Now, if if we link to a document like we just did with uh with Ignis, I I wiped it out, but um it will automatically append the fragrance UID and like know how to route users to it. So, we don't have to type in /fragrance/ignis at at all. Um and then it also creates a client for us that has
    
    a few built-in um things that that are are helpful, necessary, whatever you want to say. Um, but this right here is kind of the big one for the Nex.js app router. Um, we want to make sure that we are handling the cache. Well, that's kind of been a problem. If you don't have the the cache handled properly, uh, it can be kind of tricky. So, make sure you're going with with these defaults. These are really good. Um, and this also uh sets up auto previews. We'll be doing previews at the end, but this is how
    
    your your uh editors can see what the page will look like before they push it out to the world for for them to see it. Um but we are exporting this create client um and that is basically uh yeah so so we're pulling in create client as base create client here to kind of differentiate that but we want to make sure that we are pulling in uh the right one from at prisio our local personalized create client that knows exactly where to go and and all that stuff. So with that little spiel done, let's call that just as a function. And
    
    then we'll say const fragrance is equal to and now we need to do a check first to make sure that the user put in a uh a fragrance, right? Cuz that field might be empty. So we'll say is filled. This is a little helper file uh that comes with with um the client. We we want to use this for more complex things because uh you can't just do truthy or falsely because an object is truthy even if it's an empty object. So make sure you're using this little function. We'll say is filled and then we have to tell it what
    
    type uh of field we are checking. We'll say content relationship and then we'll pass it slice.primary fragrance. And so if that's the case we're going to do a turnary. Then we want to await client.get by id. And we're going to type that real quick as a content dot oh um I think we import content already. Yeah. Content dot fragrance document like that. And then in parentheses we are going to pass it the slice primary fragrance ID. So slice primary fragrance id like that because we're doing uh get by ID and that's how
    
    we are fetching this. Now if not then return null. All right. So we save that and it goes whoa whoa whoa. What do you mean? Oh wait. Huh? We we don't have this as an async uh component. So we got to go right here right after the equal sign and say async. So, it's now an async arrow function. And we're not using fragrance yet, but we can go ahead and go down to our fragrance area. And I'll just do a quick fade in. So, we have a container for that. Uh, what's this? Oh, it's not heavy. There's no children. It'll come. Uh, and
    
    then we can say here, I'll say an H3. And inside there we'll say uh prismic text and field is fragrance question mark because we don't know if it exists right it could be null uh data.title title and then fallback because this component allows for this. We'll just say uh or fragrance, right? We just I don't know. It's some it's some fragrance. Hope hope you like it. Um so if we save that and we are on local host. Yep. Let's go down. We do see Ignis. Did I delete the extra the other Ignis? Good. Yeah, I
    
    did. So that is coming from uh our fragrance. So we can go ahead and also bring in the bottle. So, let's go ahead and grab Prismic next image. Uh, I shouldn't have done it that way, but that's fine. All right. So, now we want to say field, and it's going to be fragrance question markda.bottle image. Save that. There it is. All right. So we can doubly confirm that the link to our other uh page type is working really well and we can get go ahead and start adding some styling to our fade in so we can kind of get back
    
    into the flow. I just want to show you that hey that worked. I wanted to show it to myself honestly. Uh so class name is going to be animate in and we're going to say opacity zero relative uh translate translate is going to be y16 self and bg white slash10 and will change transform. Now, if if you're ever curious what one of these classes is doing, you can always comment it out. Um, but this is going to make it so that it slides all the way to the bottom and isn't like hanging up here. Um, that's
    
    what that is. That's that's for our or that is a grid setting or a grid property. Um, and there we go. See, like I went flush at the bottom there. Don't worry about this gap. We will be handling that soon. Um, but this is looking great. I do want to add some vase to our fade in though. So we'll say varss equals double curies I'll say duration it's going to be one and delay it's going to be one as well to have it a little bit later than the initial image there. Now let's uh scoot this over so we can actually see what we're
    
    styling. And here for pris next image we'll say class name and that's going to be MX auto and negative MT10 width is full and negative rotate 12. O t um and medium and above we're going to say negative margin top is going to be 20. So let's go ahead and see that. There we go. So, we have this rotation, but also we are moving um the bottle up and that's why like it it's cutting over the background that it has because it has a negative margin top. So, it's actually shifting up. Now, let's go ahead and wrap our H3
    
    in two divs. One, we're going to uh chain a couple of classes together and then create it. We'll say um flex.justify justify between P10.PT4. If you didn't want to do it that way, that's fine. You can just type them in normal, but that's another way that you can create your divs. And then the second div is much simpler. It's just going to be a space y1 and wrap your h3 in that one. And it's getting a little bit better. But we need to bring in uh our little paragraph that says u de parfum. That's my best French accent. So
    
    take it or leave it. Uh say e a u d e p a r fu m. And here we'll say class name margin top is two and text gray 400. Oh yeah, there we go. Parfume. There we go. Uh next we need our button. So, we're going to be using the same style button as this. You know what? Why don't we just make this into a component? That's what we're going to do in just a minute. Uh, I'm going to comment right here and just say, uh, button link, uh, whatever P and then say button link. So, we want to go outside of that first div and we want to say the price.
    
    So, we're going to create a paragraph and we're going to inside here create a span. And we are going to return uh fragrance dot sorry question mark.data dot uh price. There it is. And close that. Now, we're going to have a problem and and we'll fix that problem in just a second. But that's a spicy price, right? Like that's that's a lot of money uh even for the greatest cologne in the world, which this is. Uh but we'll fix that in just a sec. We'll format it better. Uh but let's style our paragraph. So class name is going to be
    
    margin top 4 text gray 100. And then we'll have an Arya label that says product price just so that um you know screen readers know in intuitively or just inherently what this is. Not intuitively we we are saying it clearly. Um what is this? That is the product price. So to format that price let's go ahead over to our uh resources here components and files. And right here we have source utils formatterers and we have this nifty price formatter. So go ahead and grab that and put it exactly where it says source utils
    
    formatterers. And I'm going to do the same. So I'm going to close up all my things. Source create a new folder utils and new file formatterers.ts not tsx. And then paste that in. And you know, we're not going to go through this. Uh just pretty much if you Google this kind of uh function, that's what you're going to get. Pretty standard uh cents to dollars kind of thing. And here instead, we are going to go up and handle this just up here. So we'll say const formatted price equals format price. Import that. and h pass it
    
    fragrance question mark dot data.pric and grab this formatted price thing. Bring it down here inside of our span and rejoice because look, it's looking really good. Um, if that had sense on it, it would add the sense, but because it doesn't, it doesn't. So, nice little formatter. Good formatter. Back here, we have a couple more styles we need to hit. We have to hit this H3. So, we'll say class name there. font display and uh text 4XL. That's looking much better. Here we go. And now we want to go and grab our button link. We want to
    
    bring that over. So if we head to our hero and our index.tsx, let's look for it. Reveal text fade in fade in prismic next link. Here it is. So we have all these styles. this link variant equals secondary stuff. We're going to grab this. I'm just going to copy it for now. Um, and I'm going to comment that out so I don't, you know, forget. And we're going to go and create a new component. We're going to call this button link.tsx. And we're going to say export const button link equals. I'll do a little arrow function.
    
    And in here we'll return the prismic next link that we have. Now we have to fix a couple things. I'm going to import prismic next link. Um just like that. But also we need to add uh a few props, a few different things that we have that we we're going to need in this uh component. So we're going to make a type for this. So we'll say export type button link props. Uh, and this is so we can use it elsewhere. Um, now what kinds of things does the button link props take? Well, first off, it takes everything that Prismic next link
    
    takes, right? So, luckily we can go uh Prismic next. Oh, we can't do that. Next link props. So, this ships also with its props. So, we can easily do this. Uh, and we're going to open an object. So, we we can add our own on top of that. And we'll say variant question mark is primary or secondary. That's not something built in there. Um, and now we want to go ahead and pull off a couple things in particular. So, in here, we're going to open up a new object. We'll say class name because that is part of prismic
    
    next uh link props. So we can we can call that and uh we'll say variant is equal to primary as our default. And then we're going to spread not that rest props. Uh so everything else that um this component gets we're just going to spread it or or sorry we're going to I meant to say rest hence uh rest props right uh so after the curly brace we're going to type this as button link props and now it's happy and we're going to change a few things in here uh for one we're not going to put a key here we're
    
    actually not going to put a field here we are going to import clsx do that. Uh, and we are going to change link.variant to just variant. That's why we brought that in. Uh, but now next link isn't happy. So, what we're going to do is we are going to we'll first tack uh or get get rid of the w fit and put in class name so that anything we add onto this uh gets added there. And then while you're still inside uh project next link, go ahead and open curly braces and say dot dot dot rest props. Now we're spreading. This is how
    
    you spread. This is rest. It's like the same syntax just opposite. This collects everything. This spreads it all out. So anything that we pass will be uh put onto pris link. And we're already handling the required fields because we gave it um pris link props which will yell at us if we don't have certain things. So, uh, we don't need to worry about them here. So, now we have a reusable, uh, button link component. Let's go ahead back to hero. And let's plug it in. I'm going to go just above so that I don't lose anything. Let's say
    
    button link. Import that. And now we can pass it these things. I'm going to uh bring key and field up. And going to close it. Make sure you close button link. And only thing I'm going to give it for class name. I'm going to uncomment those first. Uh for class name is going to be that w fit uh that I tacked on at the end there. And that I think is it. Link variant secondary. Yes, let's say variant secondary. Got to capitalize. Looks good. And let's go check our hero real quick. Make sure we didn't ruin
    
    it. And it still animates. Great. Looks great. Love it. Now let's bring it into our new component instead of this button link. Uh I'm going to close the hero. I'm going to close button link. That should be good. And here instead of button link we are going to do the real button link like that. And we'll say document instead of field. This is this is key right? We we want to reference a document. We want to send them to a specific document. And um when we do that, it's going to go to our uh routes
    
    and say, "Okay, I've got a document here. Is it a homepage?" Nope. So, I'm not going to send them to forward slash. Is it a fragrance type? Yep. So, I'm going to send them to fragrance slash the UID of the document I'm looking at, which is Ignis, right? That's how that logic works. So, document equals fragrance. You pass the entire document to it. And then we're going to say variant is going to be secondary. And class name is going to be margin top six. And go ahead and close that. Save it. And hm, something went wrong. That's
    
    because documents don't have uh text for you to write like for that link. So we actually need to pass button link a child this time. So, we're going to do that. And then here, we're going to say shop now. And now, if you look at it, it looks a lot better. So, just remember, if you're linking to a document, there's no like built-in button text. So, you're going to have to add that. Luckily, our uh nifty button link works with either either having children or having the uh the button label or the link label built
    
    in. So, that's looking awesome. But uh what happens? Uhoh. Right. We didn't build that yet, but we will very soon. But other than that, uh this component's looking real slick. Great job on this. I think I think we're set here. Let's just go all the way up to the top. Uh reload the page and enjoy those fadein animations as we scroll down. Right. So, that's cool. That's cool. Um H. But this isn't animating, right? I told you to stick a pin in that. We need to now bring scroll trigger to our fadein
    
    component. So open up your fadein component and we need to add a few things. One of them uh being when to start in our fadein props. We'll say start question mark and we'll say it's a string. So it's an optional string and then we'll also import it here. We'll say uh start. Save that. We go. Well, let's go ahead and give it a default uh of top 80%. Just like that. And that will be the default starting spot. And right after varss, come on down here. We'll say scroll trigger. And before I even do that,
    
    let's go ahead and import scroll trigger and register it. So, we'll do it in the same time. Scroll trigger and get it from gap/scroll trigger. There we go. And where were we? Scroll trigger. And we're going to say trigger is ref.curren. Start. We can just leave it as that. Uh oh, sorry. Ref. Uh by that I meant container ref.curren. And you can just say start because that will be the same as start. So all right. And down here, we don't really need to actually do anything because we just want it to appear. So,
    
    we don't need to change that at all. So, now if we uh go back and check our site, let's scroll up, reload the page, and now we should see animations when we get into view. There we go. Nice. All right. So, that's much more what we're looking for. You can customize the top, right? I mean the uh start value. So that's what we can do. We can head to our product feature. There we go. And up here in the fade in that wraps around our prism next image, we can now pass it start. And we can say uh top and we can
    
    say like 70%. Just to bump it up a little bit so that we see uh like we cover more of the component before it appears. And I think the default will work for the other ones just fine, but let's try this. I'm going to reload there. Yeah. And that one once you get down to the bottom, it'll load in. So, yeah, you can tweak this as you like, but I think that's looking pretty darn good. So, now that this one's finished, let's go ahead and take a look at our next slice. So, this one we are calling the fragrance list. has this nice little
    
    uh eyebrow and heading and a little bit of body. And then it links out to our fragrances and it links out to all three of them. And there we go. So what this uh slice needs is one, two, three, and then a repeatable group with a content relationship. Right? So let's go make our fragrance list slice. Going to go to the page types. Going to go to homepage and make it within here just to save us that step. Uh start from scratch. Call it fragrance list. Hit enter and enter it. Enter into it. Uh update screenshot. And I'm going
    
    to pull in let's see fragrance list right here.png. This image just has one because it would be you know really long otherwise. Uh, but it gives you the idea of what you're choosing. For our first field, we're going to do the eyebrow. So, we'll just do a regular text and say eyebrow. And next, we have our rich text for our heading. Unselect all. Only allow heading two. No multiple paragraphs. Hit done. And then we want a rich text for the body. unselect all except for par uh the paragraph like regular and then bold and itallic. And
    
    then we want to add a repeatable group. So a set of fields that editors can repeat. So we're going to create one repeatable group with one content relationship inside and they'll be able to repeat that group and get more and more content relationships. Um, so we're going to call this fragrances. And inside here, click the add field inside, not up here right now. Uh, we're going to create that content relationship as promised. And we'll just call this fragrance uh, singular. Cool. And we're going to limit
    
    this to fragrance types. Hit done. And just like that, our model is done. We can review our changes. see that we do have it added to a page and we can push that up. In the meantime, let's go find it. Here it is. Fragrance list and we can start to get rid of the boiler plate. I bring in bounded right away. Oh, I'm shouting in caps. There we go. Bounded. And let's go to our slices fragrance list and start to grab each of these things. Uh, let's see. Shift things around. There we go. Um, eyebrow. I'm going to
    
    grab that and I'm going to put this inside of a paragraph tag this time because we want it to be a block level element. So, I'll go ahead and do that. Slice primary eyebrow. Going to grab our heading. Grab the body and fragrances and fragrance for inside. So see where it says render the item just paste into that. Uh now command period add all missing imports and we are set up there. But we need to go in and add a little bit of content into Prismic. So come on in here, hit the plus button, choose your fragrance list, and then
    
    let's check our content. Um eyebrows going to say our fragrances. Okay, let's type it. And then the heading is going to say in essence for every man. Literally every single one. All of them. Uh body. Going to grab that. I shouted body. I was really excited for that. Uh and then fragrance one, two, three. Yep. You just going tohead add those. Uh we'll start with fragrance one, which is the only one that we have, Ignis. And then we'll add the others soon. But we don't need the other ones. just yet to
    
    build this out. Hit save. Hit publish. And then we can reload our page and see what we got. Getting an issue. And that's because we don't have a uh key that's getting added there. We will soon though. Uh but we're getting the stuff that we expected. Essence for every man, expression of quiet luxury, and our oop our link that I didn't mean to click. Uh cool. So let's start by adding some classes to bounded. We're going to say space Y8 BG black py16 text center text white and medium and above go py
    
    24. And it's already looking better. Yeah. Not not not our best component yet, but it's getting up there. All right, let's put on the side. Put this on the side. That's looking good. Uh, now let's wrap everything in a div with uh period mx auto. And we'll bring that all the way down and add some more classes there. Uh, space y8 and text. Uh, we don't need text center again. That's why I had that twice. Everything should stay text center. So that's good. We have our paragraph here. Let's style this a little bit. And it'll
    
    say text SM font light tracking uh 0.2EM. That's a relative unit to this uh this exact font size. And uppercase. Looking good. Loving that. See? Zoom. Nice. And uh with for our prism rich text for the heading, we actually don't want that. We want to do a reveal text just like that. That can self-close. And we'll pass it a field. That's going to be our slice primary heading. And it needs to be an uh a H2. So we'll say as H2 and our ID is going to be uh back tick. Sorry for that. Uh back tick. So we'll say
    
    fragrance list heading and then we'll give it the uh actual slice ID. Slice ID. That way it'll be unique for sure. Uh align it's going to be center and duration is going to be 1.5 seconds. Stagger amount is going to be.3 seconds and class name go ahead and add some styles. say font display text 5 XL uppercase small and above we'll say text 6 XL medium and above we'll say text 7 XL and large and above we'll say text 8 XL really want this one to be uh oh that was cool right that was cool um want this to be very specific so that's why
    
    we went and did all that okay we can get rid of this present text heading gone. And I'm going to wrap a div around our body prismic rich text. So we'll say uh period MX auto and then go back and add some more styles here. Max width 2XL and text it'll be large. Text balance. Uh this is where it's going to really come in handy. Actually, you know, I'll keep the balance X on there and then we'll we'll show like the before and after text gray 300. So, see how it really long top thing, uh, short bottom. Where's our text balance? There
    
    we go. Uh, going to add text balance. And it's just nicer. Look at that. That just looks like it was like actually planned, right? Rather than just like, uh, oh well, it it happened. Now we're going to uh create like a wrapper around this uh fragrances map. So we'll say uh period grid and put that down and round and we'll say uh margin top is be 12 grid columns one just to make sure it doesn't change and gap will be uh 12 between each item. All right, what's our issue? It's still the same thing because
    
    it doesn't have a key. That's fine. We're going to give it a key. Um, and uh, yeah, we can do that right after we create the new component. So, so just so we don't have a whole bunch of clutter in this component, we're going to break this out into a second component. So, in our fragrance list folder, we're going to colllocate this component uh, just because it's only going to be used within this context. So in the fragrance list folder, new file, fragrance display.tsx. Like that. Give yourself some space from the top. And we'll say
    
    export const fragrance display uh equals. And we're going to just go ahead and make this an async uh one already. We'll say async and then it's going to be an arrow function. And you can just return fade in wrapped around uh fragrance display just to make sure that it is working. Go ahead and import fade in and let's save that real simple component so far. And let's go ahead and call in fragrance display. There it is. Uh ooh see what just happened? Um, oh, actually, nope. We're good. I was going to say, ah, you
    
    don't want to import from slash, but we do because that's that's where it is. It's not in the components folder. So, we're we are good there. No worries. Going to reorganize a little bit. And that's looking better. Um, fragrance display and we want to put a key on it. So, we'll say key is going to be item. Fragrance ID. And that should work except for the fact that that could be null, right? Um it could be an empty content relationship field. So we need to first check, hey, is this content relationship field empty or not? So uh
    
    grab from this uh purple parenthesy right after the arrow. Yours might not be purple. Um but grab from there and create curly braces around that. And then at the top we're going to say return. So we're changing it from an implicit return to an explicit return. And in here we're going to check if is filled content relationship parenthesis item.france then we're going to return this. There we go. Uh and that's all we have to do. And if we go and check we will see that yep we have fragrance display. I want to make sure
    
    that it is indeed this one. We want to get excited about it. Fragrance display. There we go. So, it's coming through just fine. So, now we have our fragrance display. We're going to say type fragrance display uh props equals and just need one say id string. And in here, we're going to do that. We say ID and then outside of it we're going to say fragrance display props and save that. And if we head back here, it's now throwing an error because it says, "Hey, I need an ID." Great. We're going to give you one. We're just
    
    going to copy the key, call it ID. So, we should have key and ID as the same value of item fragrance ID. And then in here, we now have the ID for the Ignis document. So, let's fetch it from within here. And don't worry, uh, this is going to be a server component. So, we're not going to hit take any hit uh on the client or anything. Plus, this uh request will already be cached. most likely. So it won't even uh take like a run on on the server. It's going to be very very fast, very efficient the way
    
    that Nex.js handles the cache. So we're going to say const client equals create client from at/prismic io. And then we're going to say frag sorry const fragrance is equal to await client.get get by ID and then we're going to say content fragrance document inside of these curly sorry not curly at all uh these angle brackets and unnecessary oh wait not yet not yet my friend uh and we can just call that with ID inside I'm just going to go ahead hit an import content from atprismic ioclient And now see uh that's the problem. But
    
    look it's it it will type that for us. So it says content.france document and now we know like what is on fragrance. So dot see we have data dot mood price all those things right. So really handy typescript. Okay let's get rid of our little excitement in there and going to go ahead and create a div with absolute. Sayabsolute. Open this up and we'll give a prismic next image. Now we'll have a field of fragrance data feature image. If we close that and let's add a couple more classes to both our uh div and to our fade in
    
    before we we we go ahead and check this out. So say inset is going to be zero and Z is going to be zero as well. We have a little bit of a Z-index stuff happening in this component. And on our fade in we'll say class name and we'll go relative. So this will uh hold or like contain the absolute positioning of that. We'll say Z is 10. grid min height is going to be a custom value of uh 85 view height fills most of the screen uh width will be full translate Y 20 items center justify items start uh border border white slash10 so it's
    
    only a little bit opacity It's 10% opacity. I'll go P4 for padding. Uh text left align that left. Uh and medium and above we'll say P14. And large and above LG and above we'll say P 20. See how that goes. And let's see what we have over here. That's looking great. That's looking really good. So that is what we're expecting. Um, yeah, we still don't have our text or anything on it yet. Great. Although, one thing, uh, it's going to be a little bit too intense. So, let's add some styles to our Prismic
    
    next image. And we'll say object cover and opacity 40 and medium and above opacity 100. Because if you look over at the final version um here it's fine for 100% opacity, but once we get to mobile um we want to dim it because we're not really like showing most of it, right? It's kind of like a hint at it and you get a little bit of like the uh the effect there like the water and stuff like that. So we had to dim it on mobile but we want to bring it back on uh you know larger screens. It also comes in as
    
    a very large image. So let's add some extra properties to make sure that it's uh doing what it needs to do. So we'll say fill and we're going to say width is going to be 1150 1150 and our quality we're going to put that up to 90. And alt is going to be just a regular string or sorry an an empty string because this is just a decorative image. you don't really need to talk about it in accessibility terms. So next we're going to say fade in right between the fade in and the div. And we want to open
    
    that up and inside here we're going to put an h3 and inside there we're putting our prismic text with uh field being of course the title. So we'll say fragrance.data.title and close this afterwards. And we need to import prismic text. And now uh after the h3 go ahead and create a paragraph. Uh let's put uh margin bottom 8 on that just to start with. and we will say u darfume. Uh let me show you what we're what we're matching up. So we have the name, we have the the parfume, we have the description, and we're going to
    
    build out a cool component to handle this because this shows up both there and here. So we want to have a reusable component for that. Um but yeah, that's what we are building. So next up is the description. So we'll say MB10 and in here we'll say prismicri text and close that and say field it's going to be fragrance data desescription. All right, save it. Let's see how we're looking. Okay, it's coming through. We're not have any styles really yet, but uh I just want to make sure that it is popping through.
    
    If we look at the final version, we have these um fragrance attributes is what we're going to call them. And then we have uh two buttons down here. We have the discover button and we have the add to bag button, which doesn't actually do anything. This is not, you know, a full tutorial on uh like Shopify or anything, but um we're going to go ahead and add those buttons right now. And we'll put a little pin in that for right now. So down here, I'm going to create a new div with flex. and say flex
    
    wrap and gap 4. Open that up. And we're going to do two button links in here. So button link document is going to be fragrance. And because we're doing a document, we know that we have to uh pass it what we want it to say on it. Right? We'll do variant. It's going to be secondary. And in here, we're going to say discover. Save it. Let's see. Looks good. Now, let's add our add to bag. Um, under under that button link, we'll say button link. Uh, can we copy it? No, let's just write it again. Button link because here we're
    
    going to say href is equal to just little hash. uh variant is going to be primary and inside there we're going to say uh is it plus? Yeah. So plus span add to bag. Save that. And how does it look? Not great, right? Primarily that plus is not actually what we're going to be using. We can go ahead right now and add our icons to our project. So let's see documentation we have react icons right here. So under fonts and icons you should have react icons to click on. So this is a fantastic package that pretty
    
    much uh unlocks any icon pack in your project. So include pipel icons react react projects easily with react icons. Um and only the icons that your project is using get imported. Um, so it keeps a really small bundle. Go ahead and copy that npm install react icons and head to your terminal and install it wherever you're installing stuff. Nice. So now what we can do instead of that little plus sign is we can say hi plus and then it's going to uh import it. We're going to do from high 2 because that is hero
    
    icons uh two the the second pack. You always want to go with the sequel, right? So, if we look again, that's looking a lot better, but we need to add a little bit of margin off of the uh icon so that it has a little bit of space to breathe. So, we'll say margin right. And that's looking much much better, but it could definitely look better. So let's go up to uh this fade in at around line 30 and let's give it some styles. So say class name relative Z10 grid translate uh Y8. Save that. Not much change. I just
    
    want to kind of keep peeking in to see how we're how we're doing. Uh class name font display margin bottom is going to be three. text is 5 XL, medium text is 6 XL, and large text is 7 XL. That's looking better already. Uh, now for our paragraph here with margin bottom eight, add text base for the size, font semibold, and text gray 300. Nice. And then this just needs to get kind of like condensed and like cut off to about there. Uh let's see what we got. Margin bottom 10, max width medium, text large, and text gray
    
    300. That is it. Exactly what I was. It's exactly what I said, right? It's as if uh I designed it or built it or, you know, looked at it at the end. All right. So let's build this fragrance attributes component that we both use here and over here. So in our code in components we're going to create a new file called fragrance attributes.tsx like that. Now let's think about what we want to do here. Uh we want to take in a couple of things. We want to take in the the fragrance uh scent profile and mood. And remember
    
    those have just these strings, bold, grounded, refreshing. And we want to turn those uh into both icons and full not sentences, but you know, more than just the one word. So, we're going to have to map uh to icons and strings once we get these essentially these keys in. So, let's go and actually start by making those. So, we'll say const sent profiles uh equals and we're going to make an object and we're going to say spicy and create an object there and we'll say label is spicy and smokeoky. Is it smokey? I think smokey.
    
    Is it smokey or smokey? All right, it's smoky. Moving on. Icon. Capital I for icon to show that this is going to be a component. And we're going to say lu flame. And it should say react iconu to autoimp import. Go ahead and do that. Put a comma at the end of the line and hit command C commandV twice to copy that entire line. and we'll say woody and fresh. So for the woody one, we're going to say woody and herbal. And the icon is going to be lu tree pine. And for the fresh one, we're going to say
    
    fresh and amperand aquatic. And the icon will be lu droplet. Nice. And once we have that, we can go ahead and copy this over to a second one, but we'll say moods all caps to show that it is going to be a constant. And instead of spicy, woody, fresh, we're going to go bold, grounded, and refreshing. And for the label, for bold, we're going to say bold and seductive. and we'll say lu crown. And for the grounded one, we'll say grounded and sophisticated. And the icon is going to be lu no uh yes lu
    
    gem. And for refreshing refreshing and invigorating icon is going to be lu zap. That's the invigorating part. Now uh we can type these in a really cool way. We can go ahead and say type attribute data and this is going to be uh we're basically typing this part of it right now not that part. So we're going to say uh label is a string and icon is icon type and we're going to import that from react icons. So should come in from there. And once we do that, we can type this sent profiles as a record. I'll explain that
    
    in a sec. And I'm going to put angle brackets. And we'll say content import that from at Prismac.io client because we want to access our types that are autogenerated for us within this project. Contentfragrance document data. And then we'll say uh comma attribute data. And why is this complaining? Oh, right. I need to uh specify which part of that data we are we're grabbing. So we'll say sent profile. So square brackets then quotes profile just like that, attribute data. So this record it is a utility type that lets you create
    
    an object type with a set of properties whose keys are of one type and whose values are of another type. So the keys belong to the first thing that we passed it which is these scent profiles and the values are all part of our attribute data. So very nice. Let's copy from the colon to the uh closing angle bracket. Put that into moods. But we need to change from scent profile to mood. Just like that. And you see if we say bolds, it's going to say nope, that's not a thing. And we can't add anything to this uh either like foo
    
    equals true. Can't do it. Says fu isn't part of that. So looks great. Now let's uh create types for the actual component we're returning. And we'll say type is fragrance attribute attributes props equals open that up. We'll say scent profile content. Fragrance document data and we'll specify that scent profile and we can copy and paste that. We'll say mood and this will be mood and last is class name optional and that's a string. Awesome. Now we want to export const fragrance attributes. Cool. And we're going to
    
    make an arrow function. And inside here we are going to first type this object as fragrance attributes props. And we can spread that open and say mood. But we don't want to bring it in just as uh mood. And you'll see why in a second. We'll we'll say that uh we'll rename this to be provided mood. And then sent profile is going to be provided sent profile. And last we'll say class name. Awesome. Open up our arrow function here. And we want to grab uh the write stuff from our moods and from our scent
    
    profile. So we'll say const sent profile. It's equal to sent profiles all shouty. And let's say provided sent profile. So now that will make that into one of these three depending on what it what key it gets. Oh, sorry. It's not going to make this. It'll make it into uh this object, one of those three objects. Um and we can tell because it'll say sent profile dot we have icon and label on there. Very cool. But we'll do the same thing again. We will copy that and say mood and mood. H sorry provided
    
    mood like that. Oh, and moods. There we go. I guess copying and pasting didn't really help with that one. I'm just used to it. Uh, let's return now. Return. We're going to return a div. And that's going to have a class name with class name and pass it right through and put it on our parent div in this. And then we want to have a paragraph with uh text base. And inside there, we're going to say features. And let's continue to style this out. Let's actually save it. Um, and let's bring it into our fragrance display.
    
    Right underneath our button link, I believe. No. Uh, above Let's Let's go look. Where do we put that thing? Oops. I'm all over the place. We have it above the buttons, right? So, right in here. So above this div that says flex flex wrap, we're going to call fragrance attributes and import that. Let's pass it the scent profile and we'll say fragrance.data.ent profile and mood is going to be fragrance.data data mood. And we also want to pass a class. So we'll say class name is margin bottom 10. If we save that and go check out our
    
    coach Royale, we see the word features. Awesome. Let's keep going. Let's actually move this over. I'm going to try to have it over on the side as we work on it. Me zoom in a little bit. And let's head back to fragrance attributes. So on features, let's style this a little bit further. And we'll say margin bottom two. Move this up. Uh font semibold and uppercase. Save that. And it's looking better. Underneath our paragraph, we're going to need a div with grid and gap two on it. So we'll say grid and gap
    
    2. And here we're going to make another paragraph with flex items. Uh, flex do items center and gap 2. There we go. My fingers didn't know what to do. Uh, and here is where we're going to pull in both the icon and the label. So, check this out. We're going to say sent profile icon, capital I, right? That's what we named it. And then we can just close that. And check it out. We've got our flame because that's matching up to the icon that we declared up here. And but I want to change the size of it a
    
    little bit. So pass this a class. And that's going to be size of six. So size is a shortand for doing both width and height of the same size. Looks better. And now right after it uh we want to say sent profile.l label. There you go. Amazing. Now, copy this paragraph and paste it and change sent profile to mood. And there we go. Just like that, we are up and running. Now we can move use this component in two different spots in our project. Okay. So now the individual items for our uh list component are
    
    done. But it's not much of a list component if you have one item. Am I right? So, let's head to uh our Prismic repository and we can go ahead and create a new page. And I'm not going to walk you through each step of this, but I'll send you off in the right direction and then we'll check after. So, create a new fragrance. And then you can head to uh our content and you have aqua and terra that we still need to add. Your choice which one you do first. I'll go with Terra here. And you're going to just put the bottle image, the feature
    
    image, description, and so on. We already did this for Ignis, so be sure to do this on your own. I'm going to pause and I'll check in with you in a sec. Okay, so here's what I have for Terra. Just check your work against mine, basically. Woody grounded. Oh, don't There we go. That's the right one. Then you check my work against yours, I think. Uh, and then meta image using that one. And just make sure you save and publish. Now, let's do the next one. Okay, I think I got this one right. Uh, so we got Aqua. Check yours. Fresh and
    
    refreshing. And then meta image. Make sure you choose that one. Add to page. Save and publish. So now we have four documents total. Uh, let's go to our homepage. Let's add these two new fragrances. So you can add them in whatever order you like. I'm going to go Aqua and then Terra. You can even shift them around. I'm going to bring Terra to the top and put Ignis on the bottom just because I'm sick of seeing Ignis at this point. It got special favor for too long. Uh now if we head back to our site, remember double refresh to bust
    
    the cash. And we have Terra at the top looking great. Woody and herbal, grounded and sophisticated. Aqua is fresh and aquatic, refreshing and invigorating. And then Ignis is spicy and smoky, bold and seductive. These all look great. A little thing about the animations though, I'm not loving the animations. Let's tweak those a little bit. If you head back to fragrance display, um this fade in at the top here doesn't have any um like it's just the default stuff and I want to specify it a little bit. So I want uh varss and we're going
    
    to do double curlies. We'll say duration is going to be 2.5. And we're going to have a start of top and then 50%, I want it to get a little bit uh further up the component than just 80. It'll happen a little too quick. So start and then top 50%. And then let's also adjust this fade in here because this is the text and stuff on the left, right? So like the image is here and then this is everything else. um it's all this stuff. So I want that to animate in after uh the the image basically. So we'll say
    
    varss equals double curly duration is three and delay is 08. So we're going to give it a little bit of a delay and then it'll come in uh and we're going to say start is going to be the same as the other one. Top and then 50%. Save that. And now let's give it a reload and scroll down. Get that and then that. So our eyes go to the bottle and then our eyes go to the text. Eyes go to the bottle, eyes go to the text, right? So that's the idea behind that animation. It's not just uh willy-nilly, but you know, there
    
    at least some concept behind it. So, with our fragrance list out of the way, if we scroll a little bit further, we find a nice little call to action. Looks good. And we are going to build this exact thing. It's not going to be too tricky. And we're going to use a new uh way of building that uh Sites Machine provides for us. So, let's get into it. We need an eyebrow, uh a heading, we need a body, and a button here. So let's go and build that in page types homepage. I'm going to go a little bit faster than usual because this is our
    
    fifth uh slice. So going to start from scratch. Going to call it call to action. Create. Open it up. We are going to update the screenshot. I've got my call to action right here. And we're going to create that text for the eyebrow. You know how to make a heading now. Rich text heading. And unselect all but H2. Add a field rich text for the body. Unselect all but PBI. And we'll allow multiple paragraphs. And then we need a link. And we're going to add that. And we'll say button. Uh placeholder. We don't need
    
    one. You can do that, but I I don't love to. Uh, we do want a variance on and we do want it to be repeatable and we want allow display text and hit that. We'll say done. And now we have it added to the homepage and we have our new call to action. Push that up to Prismic. But let's also go back. Let's also go back to our call to action as I promised you a new way of building that you've never seen before. So slices call to action. You might have noticed this little simulate button up at the top right. And if you click
    
    that, this opens up just uh by itself an individual slice in here. And so this is just that component. Now it's picking up it's picking up the white uh text, but it's not picking up the black background. So let's fix that real quick because this is called the slice simulator. So, in your app, you should see this slice simulator folder and this page. And this is a really handy way of building slices in isolation without having to worry about putting content into Prismic uh to to begin with like we've been doing. So, what we're going
    
    to do here is this slice simulator is what's rendering out our component. And you see there's a slice zone in the middle uh that we're pretty much used to. So on slice simulator, we can give it a background. So go ahead and say background equals, and we're just going to say like hash uh let's say like 2 two two. So six twos. Let's see. Is that enough twos? One, two, three. Nope. I need one more two. There we go. Um you got to count your twos. Uh so we have a nice dark background that now we can uh
    
    build on top of. So you can close out the slice simulator. That's fine. I'm also going to close reveal text and all these other ones. And I just want to find my new call to action. Here we go. We have our placeholder component. We know what to do. Get rid of that. And we want to go back because now we have two uh slice simulator windows. Sorry. Sorry. Uh two slice machine windows. This is the simulator. This is slice machine. Gets a little bit little confusing, but um going to copy this over. I'm going to put uh the eyebrow
    
    just inside of a fade in. Just like that. Import that. And put the eyebrow inside. We want our reveal text to be here. And we want to just have that self-closing. I'll give it an ID of uh CTA heading. And we're going to just say field is equal to slice.primary heading. Just like that. Now if we save just those two and go to the simulator uh we see if we reload it again we see important slides in and out fades in and you see that we have uh our content over here. So, we can kind of add some mock content here and say
    
    fragrance quiz and then uh the coat royale fragrance finder. And I'll save that mock content just so when we reload it still works. If we reload the page, there you go. The coat royale fragrance finder fragrance quiz fades in. And we can keep adding to this and it's just a nice way to build in isolation like I said. So, uh, continue with reveal text. Let's give it some more styling. Um, actually, you know what? Let's build out everything first and then we'll come back with styling. I'm going to open this up a little more. So,
    
    let's save that and let's bring in uh our slice.primary.body. Grab this and we'll paste that in. Import prism rich text. And we're going to wrap this in a fade in. There we go. And then we want to map over uh our buttons because we have um the opportunity for a repeatable button. So let's go ahead and copy this and paste that in. But instead of prismic next link, let's do button link. That's really what we want, right? And then instead of class name equals link variant, let's do variant equals link variant. Uh field
    
    can be link, key can be link key. That's fine. But let's also wrap each button in a fade in. So do it inside of the map. And we're going to move our key up to the fade in. It that's what actually needs the key, right? And if we save this and head to our slice simulator. Cool. Dawn. That's very ominous. I don't know. We click at dawn. Um, so see the quiz. That works for me. Nice. All right. Uh, we didn't do the thing that I always do first. Bounded. If you did it, you get extra points. Uh, comment in the comments below and I'll
    
    make sure you get your points added to your report card. Uh we are looking better there. So I'm going to uh toggle the editor off. I'm going to shift it over and I'm going to work side by side. Let's start styling our bounded component. Class name it's going to be relative overflow hidden bgy and then we're going to use uh square brackets because we need a custom value. So, URL parenthesis uh single quote slashbackground. Aavif single quote close parenthesis close bracket. Make sure you just have
    
    that one. BG cover and BG center. PY is 16. Text gray 50. And on medium and above, we're going to do PY is 28. already looking a lot cooler. All right. So, uh on this fade in for the eyebrow, let's give it a class name of translate Y2. And then text SM. Um font light tracking. We're going to do a custom value of 2em. and uppercase. Looking good. Uh we actually want to uh surround everything in a div. I missed that at first. So uh just inside bounded, we're going to say relative. And we're going to move that
    
    all the way down. If you hit uh command X, while I just like selected selecting nothing but your cursor's on a line, it'll snip that out. It'll cut it. And then I'm gonna paste it just above bounded by pasting it from that line. Nice little shortcut if you don't know it. Um, so relative we'll say Z10 MX auto max width 4XL space is going to be Y8 and text is center. See how that looks now. Wow, that looks terrible because I said max width 4 XL is what I meant to say, not four. very different values. Great. Now on this fade in here,
    
    we also want to add uh vase. We add double curlies and say duration is going to be 08. All right. Now for our reveal text with the ID of CTA heading, we'll go uh just below the field bit and we will say as H2 and class name is going to be font display MX auto max width 3 XL. Make sure you put that small and above we'll say text 6 XL and medium and above we'll say text is 7 XL. And you might have to reload the page and toggle off the editor. There you go. You saw it come in. And we want to align
    
    that center though. So align be center. Stagger amount is going to be 01. Sorry, uh 0.1. So just 0.1. Uh duration is going to be. 08. And that'll realign it. Let's see what we got here. Nice. Real spiffy. And for this fade in around the body, we want to give this a class name of MX auto max width 2XL translate Y2 and text large or LG and text gray 300. Looking a lot better, but we can still make it cooler. on this fade in component. We're going to say uh varss. Open up the object. Duration is going to be 08 and delay is going to be
    
    04. That way it happens a little bit after the heading does. And then here we will say start is going to be top 80%. Actually that's our default. So let's get rid of that. We don't need to add that. That's unnecessary. And I think the last thing we want to do here is around our slice primary button map, we want to make sure that there's a little bit of separation. So we want to say uh MT10 and wrap it around there. There we go. So Royal Fragrance Finder, we have a nice little CTA. Don't worry about um this part. That is just
    
    that the um the slice simulator has a set height here uh and our CTA isn't matching it. So this is completely fine. And here in the slice simulator, you can even say like tablet uh mobile, right? And you can see what it's going to look like. Oh, we found a bug. Yeah. So come up to reveal text. Um we have text sizes for a small and above. We don't have uh below. So we'll say text 5XL. There we go. See, this is why the slice simulator is awesome. It allows us to check on stuff like that. pretty easily. Now, another thing I
    
    don't like uh in typography, having one word alone at the end is called a widow and it's something you you would like to avoid. So, once again, I'm going to bust out the text balance and it didn't seem to do anything. Let's try this again. Desktop mobile. Huh. Well, we tried. I don't know why that's not working, but oh well. I I'm I'm puzzled if you figure out why that didn't work. Uh let me know because that should in my opinion have balanced it out. But I guess it guess the whole thing is pretty balanced. I
    
    don't know. I do know that text pretty is another one, but that's not available I think in Safari. Uh I think it's a better one. Yeah. See, it's it's better overall I think, but it's just not uh universally available yet. So, I stick with balance. And uh apparently that has a flaw. Cool. And just to check, it's actually uh only available in Chromium browser. So, Safari and Firefox both do not support it. So, I I recommend not using it. I'm not sure how to fall back within Tailwind from like uh use text pretty,
    
    but if not, use text balance just so I just stick with balance. So, now that we've built it here in Slice Simulator, uh we can go ahead and pop this into our um into our homepage. So, add the call to action slice and we'll say fragrance find. Wait, is it fragrance finder? Let's see our content. Homepage, call to action, fragrance quiz. Got it. Fragrance quiz. Code Royale fragrancefinder and body is just find your perfect scent with our personalized quiz. And now this quiz is actually going to be the next video we come out
    
    with. So if you're enjoying this and you want to build an interactive quiz in this same Coach Royale website, uh stay tuned. It should be out within a week, unless this video has been out for more than a week, then it's out. Go check it out. I'll have a link on the screen somewhere here hopefully. If not, it's going to be in the description below for sure. It's it's it's a lot of fun. It just became a little too big for one video and so I decided to break it out into two so that you're not like how how
    
    much more do we have to do? So yeah, it's it's it's a good time though. And for the button, we'll say uh take the quiz. Yeah, I'm going to change it. You know, change what you want. Uh choose link type. I'm just going to say link to perfect page. And I'm just going to do the homepage because we don't have the uh quiz here yet. And that's fine. uh going to keep it as a primary and we'll hit save and we will hit publish and we can go to our local coach Royale and scroll down and I noticed something. I'm
    
    curious if you did. We didn't get this animation and that is because we have never added uh scroll trigger to reveal text. We just haven't done it yet. It's pretty quick. Uh so let's do it now. So we're going to do uh right here scroll trigger and remember I got to import it right. So use gap scroll trigger from gap slcroll trigger and we have our ref right here that we are targeting. So that's going to be our trigger. Let's put that on here. Trigger don't want to shout. Trigger is going to be uh oh no that's
    
    see the quiz let's see what was it component ref component ref there we go trigger component ref uh does not like the ah right ref.curren current. We're going to pass it the object, not the ref. Then we also wanted to determine uh the start and the end, but we want that to also be something that we can from the outside change. So, we're going to have it as some props. So, let's start from the top and add it to our type. So, we'll say trigger start and it's going to be optional and be a string. And I'm going to copy this and
    
    say trigger end. Great. Now here we'll say trigger end. Uh they gave it to me wrong direction. Trigger start. They give it to me alphabetically though so I can't blame them too much. Um but we are going to give this a default value first. That trigger start we'll say top 80% just like before. And for trigger end we're going to say bottom 20%. And now we're going to say start is trigger trigger start and end is trigger end. Okay. Now just by default we should see a uh an animation only when we scroll down. So let's
    
    see. That's Yeah, that one doesn't count. It's not what we're looking for. But let's see. See, there it is. We It comes into view and now scroll trigger is handling that for us. That's fantastic. And same with uh this one too. That one would have had the same problem, too. We just didn't notice it too much. So, the hero will never really notice because we we uh are already here once we see it. But this comes in, then we should animate. Uh not that one, but then this one. There we go. Nice. All right. These are all animating in really
    
    well on scroll. And remember, these are just two reusable animation components that we are just using over and over in really smart ways. Okay, my friend, let's not stop now. We are on a roll. So, if we look at the uh the final site, we see that right under there, we have this full screen video component. Uh when I was building this, I saw a few different uh luxury cologne brands with just like big um full width uh videos. Then this is exactly what we want to do. This is just a YouTube video that plays
    
    on loop and that's what we're looking for. Coach Royale. Beautiful. So let's go to our um let's go to our slice machine and let's create a new slice inside the homepage. Go ahead hit add. And we're going to start from scratch. And this model is going to be pretty pretty short. We're just going to call it video. And we'll create open it up. add our screenshot and we can bring this over. This is our last screenshot. We did the call to action. We did the fragrance list. We did the hero. We did the product
    
    feature. We did the scrolling text. Let's drop that video in. And that's fantastic. They're not actually going to have a play button, but I just wanted to show in the thumbnail like, hey, look, this is a video, right? It's tough to show a video within a picture. Anyway, you get it. We just need one field. It's be a text field. We're gonna call it YouTube video ID. Yes, I typed it before. So, YouTube video ID and our placeholder. Um, we're going to go ahead and grab it from over here. So, YouTube video ID is
    
    one of the uh components and files things. I didn't want to, you know, have you type lowercase E, uppercase T, and so on. So, go ahead and copy that. and we're just going to put it as a placeholder just to kind of show, hey, this is the sort of thing that you're going to want to type in or just that exact thing cuz that's the video ID that we're using. So, hit done, review changes, push it, and we're just going to go ahead and add that right in here. And I'm going to say video and we will paste that in and hit save and
    
    publish. There we go. And before we we continue on, um you might have noticed this live editing configuration needs to be finalized uh within Prismic. We haven't really touched on it yet, but when you're adding content, you'll see the live updates as you're doing it. So, let's go ahead and add this live preview. And we're just going to grab our local host 3000 for now. Later, we'll put the uh production course or sorry, the production site. So, like you know, coat royale.com or whatever. Um, and it will automatically add slice
    
    simulator on at the end. Remember that is that file that we edited. Uh, we put the black background on it. So, go ahead, hit save and we should start to see these uh show up. This one's going to be a little funny because of the nature of a scroll thing like that. So, that's never going to really show normally. U, but everything else should be looking pretty good. And then that list uh might not fully render in because of the way that uh once again we have it working with scroll trigger. We could go and make it so that like if
    
    you're in slice simulator then just show it. But um not really worth it for this the sake of this course in my opinion at least. I see that this is loading in a little bit slow but maybe my computer's just chugging along. Either way we want to add that video and we did. So we pasted it in. Okay cool. So now we can head back and let's reload twice and we are getting our placeholder component. Excellent. Open up our video. It should be at the bottom. Mine has a fancy uh little icon just because video apparently is a
    
    recognized icon that they use, but it's not that kind of video thing. Remove your placeholder. And what we're going to do here is go and grab uh this YouTube I frame snippet. So copy that. Once again, I'm not going to make you type this. I didn't make me type this, right? Like this is something I I copied from somewhere else. Um but then the slice primary YouTube video ID. I just make sure yours matches up and it's throwing any errors. And so if we go ahead and save that, let's see if that's just
    
    working out of the box. it is for the most part, right? Um, it needs some styling around it, but we already have our YouTube video up and running. And once again, I know we skipped a little bit. Uh, but what you can see here is pointer events none. Uh, that is important so that people can't click on it to stop it. Um, we also made sure that we have autoplay and loop equals one for basically true and mute. So we have autoplay true, mute, true, loop, true, right? So that is kind of the important part of this. That's what makes this
    
    iframe a little bit unique. So just above our I frame, let's go ahead and make an H2. And we're just going to uh call this coat royale video real. And this is just because all sections should have a heading within them. And I'm going to say class name is going to be SR only. and see if it gives a description here. Yeah. So, screen reader only or SR only uh essentially keeps it within the DOM but makes it so that it's definitely definitely not visible. So, a screen reader will pick this up uh but human
    
    eyes will not. Right? So, if we save that, we shouldn't see any change. It doesn't show up there. That's great. But we need to add some uh styles really only for now. We want to add a style to here uh to our section. And we are not going bounded because bounded does what? It it binds it. It bounds it uh and makes it less than full screen. So we we want full width. So we can't use our bounded component or we don't we just don't want to. We could but we're going to use bg black instead. So make that background black.
    
    Um that's okay. So, it's it's overlapping because we uh because because it's an I frame and we need to put a container around it. Now, what we're going to do for that is we're going to actually uh lazy load this and create a lazy component. It's going to be pretty cool. So, let's head and make I think one of our last components lazy.tsx. And here we're going to start off at the top actually by saying use client and then we'll say type lazy props is component props. We're going to import that from
    
    react and we're going to say angle brackets div and close those angle brackets um or angle braces. I I always forget uh amperand curly braces and I'm going to say root margin question mark string. So we are going to be we're try that again. We are going to be using the intersection observer API. So does very similar things to scroll trigger and I think scroll triggers actually actually utilizes the intersection observer API under the hood. But scroll trigger gives us like a much easier API to work with. But for
    
    this, we just don't really need it. And u it's also good just to know how to use the intersection observer API. So that's what we're going to get into. Um so we have this these this type of lazy props. Now let's go ahead and say export const lazy. Just like that equals arrow function. And in here we're going to say first we're going to type this as our lazy props. And then in here we can say root margin. And because we did component props div, so we're getting all the potential props that a div could take
    
    and this extra uh one prop. So say root margin, but then also children and we're going to rest props just like that. Now let's open up our function and we're gonna use a few things from React in here. We're going to use state. We're going to use a ref and we're going to use effect. So let's start off by just creating some state to track whether or not this element that uh or sorry like this component as well as its children is in view or not. So is in view it's going to be the first one and set is in
    
    view will be the second item of the array. Now remember we are uh dstructuring what u state returns. This is going to be a value. This is going to be a function. So say use state and the default is going to be false. Right? That makes sense. Uh import use state from react. And now for our second line, we're going to say const ref is equal to use ref. And we're going to type that as an HTML div element and have a default of null or I guess in an initial value I should say. and use effect. Go ahead and import that from
    
    React as well. So we have four imports from React now. And we're going to call that and pass it an arrow function. And inside here we're going to say const current ref equals ref.curren. Just easier to reference that than having to do decimal each time. and say const observer is equal to new intersection observer and yeah that's not happy yet because we need to call it and then we pass it a callback and a config object. So let's do that first and then we'll dig into the intersection observer just
    
    in case you're not familiar. Um actually I hope you're not familiar because I get to teach you something new, right? So, we're going to do an arrow function and we're going to pull off entry from this. We're just going to grab that first item off of the array that the intersection observer receives. And so, in this arrow function, we're going to say if entry is intersecting, right? So, that's going to be a boolean there. Then set is in view to true. But then after that uh we're going to pass this config object. We'll say
    
    threshold it's going to be zero and root margin is going to be root margin. Right? Because we pulled that in. So we don't have to give that a value. It will receive the value that way. So with that out of the way and I will come back to this and explain but I just want kind of the whole picture first. So uh we want to check and see if there is a current ref. Then we want to tell the observer here because this is a uh the we created a new intersection observer right and what it does if the thing is
    
    intersecting then it does this function. It it does that right? It sets view to true. So if current refs observer and we want to observe the current ref right because we created it now we're going to use it but return so once this gets cleaned up uh like once it's it's leaving the DOM we want to have some cleanup so you want to unobserve so you don't have a bunch of um old observers just continuing on and running processes when they don't need to. So return And this is going to be a function that
    
    we return an arrow function. Say if current refs observer ununobserve makes sense current ref. So this is us observing. This is us saying, "All right, cancel that. Stop watching. Go to sleep." Uh, and now we're going to close up this use effect and just pass it the dependency that it has, which is root margin. And here before the end, we're going to return a very simple bit of JSX. Return going to say div ref equals ref. And we're going to do spread rest props. And inside we're going to say is in
    
    view question mark then return children otherwise return nothing just return null. So I've been saying for a few minutes that I'm going to show you what the intersection observer is all about or how it works rather and that time is now. So there's a great guide over here at uh webdevlified uh that talks all about the intersection observer and they have some great little interactive demos. So for this one, we'll see that as soon as one little pixel passes through, it changes to blue. And now it's uh you know,
    
    essentially returning or or it's it's saying yes, is intersecting is now set to true. And so in our instance, that would be um triggered to true. And then we don't have any way of like um making it orange again in ours because we don't want it to ever disappear. Um but you could set it to is if entry is not intersecting and you know turn it on and off like they're doing here. Uh but there are a few different uh val or or yeah parts of the config that you can tweak to get different results. So threshold they might have a threshold of
    
    one here. Yeah. So this one now that the threshold is one 100% of the item has to be within the viewport for it to work. For us, we have the threshold to zero because we want this to trigger really early, but not too early because I don't think I said it, but the point of this lazy loading is that I don't want the video to load in and start playing if I'm still all the way up at the hero. I want it to load in and start playing maybe here, right, without me even knowing. And then by the time I scroll, that that might have even been
    
    too early, right? But I don't want this just be playing for everyone all the time cuz that's unnecessary. It's going to slow the page down. It's a waste. So, uh, we definitely want to have it trigger as soon as possible. And we even want to give it what's called the root margin. So, does this one have root margin? I don't think so. No, that's just a percentage. Root margin. Here we go. So, now we can trigger it before it even enters the viewport. There's a margin on this of 50 pixels. We're going
    
    to put a much bigger root margin on it so that it uh shows up a couple like almost a couple uh page sections ahead of time. But that's how this works is that it's not even in the viewport yet, but it's now loaded in. And as we slide into view, it's like it was always there. So that's the point of the root margin. And this is how the intersection observer works. Now that we have our lazy component, let's go ahead and use it. wrap your I frame in a lazy component just like that. Give our lazy a couple of extra
    
    things. Say root margin and it's going to be 1,500 pixels nice and big. And I'm going to say class name is going to be relative overflow hidden. Medium and above we'll say aspect video. And then medium and above. We'll say height is auto. So I want it to lock into that video aspect uh when it's on bigger screens, but when it's smaller, I don't care if it's just taking up um you know, like the the full size of the phone. I I don't want it to be a small teeny tiny video. I want it to be still pretty big.
    
    So if we head over, let's reload. And we can do a console log to test if the uh if it's loading early. Um but yeah, let's see how it looks on different sizes. That's looking good. Uh I'm going to make it pretty much a phone size. And it disappears. Yeah. So we need to add a height value for when it's on smaller screens. We're going to say height screen. It's like that. And it should, there we go. It should show up. It's fine that it's like, you know, clipping or whatever. I don't really mind. Uh
    
    we're not you, you know, if you were really doing this for a big brand, you might have two different videos. One that loads in on mobile, but uh this is good enough for me, that's for sure. Now, what we can do, I think we'll be able to see it in the network tab. So, I'm going to go ahead and open this. Go to the network tab. And we're going to reload the page. And I'm going to scroll. As we scroll, we should at a certain point see um it request. Yep. Video playback. There we go. So, right when we got to Aqua, it's
    
    like, "All right, boys. Get ready." And there we go. It's already playing. So, we can tell that it is working well. And yeah, that's our video component. That's lazy loading. That's the intersection. and in a intersection observer. Easier to do than it is to say. Okay, it is time for us to build our fragrance page. As you can see, we have uh the bottle image that we're using. We're actually using it twice for this cool little reflection trick. We'll show you how to do that. Uh we have all of our information that is uh you know,
    
    presented really nicely. We have our little add to bag button. That's just a a button that doesn't do anything, but that's fine. Uh we have our reviews and then we also have this you may also like uh thing down here and we click into that and it shifts us over to the other one. So for this we created our uh fragrance page type. If you go into page types click into fragrance um we have our page snippet here that is going to take care of a good amount of the scaffolding for us but not as much as normal because remember it just has this
    
    slice zone. it doesn't automatically add in um these fields that we've added to our page. Uh we're going to do that ourself. So before we dive into that, I just want to kind of touch on how the routing works within Nex.js now that we're going beyond the homepage. So right now we have our root layout uh at layout.tsx and then we have our page.tsx. So the layout as you might have noticed uh has the the very essentials. It it's it's what wraps around our page. It's our HTML, our body, our main. And then we put things
    
    like navbar and footer. Oh, uh, actually, make sure your footer and your navbar are outside of your main element. That's my mistake. It should look like this. Navbar, main footer. Let's make sure that that didn't break anything at the top. Looks good. Yeah. So, that is the semantically correct uh way to handle that. You don't want the header or the footer inside your main. The mains like your torso, right? Head, torso or body. Ah, you get what I mean? Yeah. Torso, footer. Sure. So, we create our homepage by just making a page uh a
    
    file called page uh within the app directory at that root level. And that creates our homepage. Uh the layout is the same thing once again that wraps around uh everything you put inside that page. And then you can create a nested route, which is what we're about to do with folders. So we see blog as a folder and page.js that is going to make a route at /blog. Then if you want to get your blog posts at a URL like blog/mycoolpost and all that uh for us it's going to be you know fragrance/gnis or terra. Uh you want to
    
    wrap that in square braces and that's going to create a dynamic route segment. So that allows us to generate a whole bunch of pages uh based on whatever comes in through that and that's going to be as I said uh fragrance terra and it'll fetch all that data from prismic go through and create a page for each uh fragrance that it gets back. Now there's a lot more that you can do. You can even nest layouts if you have like a a more and more complex layout as you go into a navigation which is more common for
    
    apps. Uh you could do something like this, but we're not going to get into that. We are stopping pretty much at nested routes. So let's get into that. And the cool thing is this even shows us uh how to do that, right? So if the route should be nested in a child directory, you can create the file in a directory like app/marketing/uid, which is what we're going to do, and page.tsx. So only thing we're going to do is change out marketing for fragrance. So, go ahead and copy this if you don't have it
    
    copied already. And we will go into our app directory, rightclick, and choose new file. And we're going to do a little shortcut to create two folders at once. Uh, we'll say fragrance slash square bracket uid close square brackets slashpage.tsx. Hit enter. And we have app fragrance UID page.tsx. Go ahead and paste that in. As you can see right off the bat, we're getting an error here because we deleted our metatitle and metad description. The uh page snippet, as I said, is um pretty boilerplate like it it's really really
    
    helpful, but if you start to deviate from what it expects as a page, it's not going to update itself. So, we are going to update it. So, we're going to say title because we do have that, but we want to say as text because our title is an H1, right? And so go ahead and change that and import this from Prisma client. And for this we're going to go ahead and wipe this out. And I'm going to say back ticks discover and dollar sign as text page.data.title. And we're going to outside of the curly braces, we're going to say the newest
    
    fragrance from coat and do the fancy O Royale Paris. Period. All right. So, we're making, you know, slightly uh new thing. We could pull in like the, you know, discover Ignis the bold and fiery, right? Like we could pull in some of our other things, but this is fine. But I I only see that just to give you ideas for how you can take this project further. And right here for the title, actually, we want to go ahead and um add coat royale onto the end of this. So, let's go ahead and just say plus sign. We'll do regular uh
    
    quotes space pipe space. I'm going to grab coat royale from here so I don't have to do the little fancy thing again. Cool. So, it should say Ignis coat royale. Now, if we go up here is our entire page function, right? Pretty pretty slim, but that's the beauty of slice zone. Right now, we're going to wipe out our slice zone because once again, we don't have any slices. And inside here, we're going to bring in our good buddy bounded like that. And we're going to wrap around a div. Just do that for now.
    
    And on this div we're going to say class name is going to be grid grid calls one items center gap 10 PB10 LG grid calls 2 and open open it up there where it opens. And all I want to do for right now is just get the image to display so that we can take a look at it. Uh, so there's there's something to see on the page when we load it in. Um, but we'll say relative as a div. Open that up. And in here we're going to say prismic next image. Close that. Open up inside. And field is going to be uh page.
    
    Data. There we go. Uh, bottle image. And we're going to say width is going to be 600. Same for height. So I'm going to copy it. And we want priority. Remember that's what we did for our hero so that it loads in uh first it doesn't lazy load. We'll say class name is going to be absolute top 90% as a custom value. Negative scale Y 100. And this because this is the shadow, sorry, the reflection, I should say. Uh we're going to get some uh craziness going in here. So create square brackets, go go go
    
    inside, and we're going to create a mask so that most of this image isn't actually visible. So we'll say mask uh- image colon linear-gradient parenthesis 2_bottom comma rgba parentheses 0 comma 0 comma 0 comma 0 four zeros parentheses uh underscore 70% comma rgba parenthesis 0 comma 0 comma 0 comma 0.15 stay with me we're almost there underscore 100%. Okay, so I know that's a lot. Uh basically this creates a linear gradient to the bottom uh but it it starts at uh sorry it it it goes from being just barely visible at 100% which
    
    is if we look at the final version which is here right so it's 15% visible there and then it goes to zero at 70% of the bottle. So, if you kind of look at this bottle, uh, from here, it's, uh, 15% visible, and then about here, 70% of it, that's when the gradient stops. So, you can see it's this nice little fadeoff effect and just adds a little like like as if it's on a shiny surface. And if we save that, we're going to keep going just because if we load it now, we're only going to see uh, shadow. Let's go
    
    ahead and just copy this because we need that same image, same almost everything. But instead of this absolute, we're just going to say relative for our class and the rest can stay. So now if we head I think this should work. If we head to um localhost 3000fragrance, let's see, does it work? Yes, we get this. And we get the little shadow. we get the reflection. Awesome. So, it automatically knew um if we we can cover some of this. Um so, it brings in params and it pulls UID off of params. And where's UID coming from?
    
    Well, we specified UID in this folder. So, it says, hey, uh whatever parameter is here, whatever that word is, uh assign that to a variable called UID. So, it goes, okay, cool. Here's your UID. And then we we create our client. We tell Prismake, hey, I want to get a document by UID. I know it's going to be a fragrance. Give and and here's the UID. It's ignous. And it returns it. And then we can query the data off. Well, not sorry, not query. Just pull the data off of that. We already queried for it
    
    here. And if we check up top uh Ignis coat royale, right? So, our metadata is working there. Now, let's add a couple more uh classes to this div with class name relative. We'll say margin bottom 14 flex justify center and padding bottom 10. Save that. Uh we don't have a big change. That's fine. We're going to be adding a lot of things and by the end of it, it'll all look good and make sense. Uh underneath that div. So split split these divs, right? And in here, let's just put a little comment and say
    
    product info section just so we know what this is going to be. And we can start a div by saying text white. Open this. And then inside we're going to create an H1 with font display uh MB4 and let's say border B. I don't like to do to chain too too many. Uh it can get a little overwhelming. Um but then let's come back and let's add a couple more classes. Uh border neutral uh 700 padding bottom two text 4 XL medium and above we'll say text 5 XL and inside here we're going to go Prismic text import that from Prismic uh
    
    React field is going to be pagedata.title title and the fallback is just going to be fragrance just in case we don't have something there for the title. Ignis looking great and we have this little border at the bottom. You see that's what this border B and border neutral is doing there. Give us a little line across. Now under our H1, let's create a div uh with space Y6. And the rest of the stuff is going to go inside here. Um everything here I think everything just about everything. Um it's going to go inside there. And
    
    then this will be its own section. Uh actually its own component that we we will create soon. Um so inside space Y6 create a paragraph tag a P tag and we'll say text MD and font semi bold. And inside that we're going to say my my favorite phrase u d parfum spray. Excellent. And beyond that we'll say prisnic rich text. So we're going to bring in our description. So we'll say field is page.data.escription. And let's just save that and see how this is looking. It's looking great. Wait, there we go.
    
    Still looking really good. Um, beyond that, we'll say fragrance attributes. Pull that component in that we made earlier. And it's yelling at us because it needs a couple of things. It needs a mood. And that mood is going to be page.data.mmood. And it needs a scent profile. Nope. There we go. send profile which is going to be page.data sendprofile. And last, let's give it a class name of MT4. Margin top 4 because we want to give it a little more space. Where did it go? Oh, it's right here. I don't know why I changed
    
    the page. So, there we go. Uh, does it even need margin top four? Let's see. No, it doesn't. Yeah, get rid of margin top four. It's unnecessary because of the space Y6 right here. It's already doing the job. Beyond fragrance attributes underneath that, let's go and we'll say pmpt10 uh text 3xl.font light. Only reason like I love emit for this, but it doesn't we don't get the autocomplete that tailwind provides us. So, I do this like only a little bit to get our class started and then I like to, you know, rely on
    
    Tailwind to help me finish uh with autocomplete. Inside here, we're going to use curly braces and say format price and uh import that from utils formatterers. And we're going to say page.data.pric. See what that looks like. And there we go. There's our price coming in. Looking really cool because of the font light and the bigger size. And here we're just going to use a regular button. We're not going to use our button link because this uh in practice wouldn't be a link. It would be an actual button that like fires some
    
    JavaScript doesn't route the user. So we want to make sure that we're using it correctly. So we're going to just create a button and inside that button, we're going to say add to bag. But let's style this button. It's going to say uh width full bg white padding Y3 font medium text black uppercase transition oh not transition shadow just transition and hover is BG uh neutral 200. I'm not sure we touched on the hover thing here. So this is what is going to apply uh when you are hovering over this element. Right? So that's what
    
    this hover modifier does in case you were curious. And then there we go. We have a little bit of a transition. Uh do we have a duration here? No, we don't. Uh duration, let's go 200 just so it doesn't instantly change. There we go. It's a little bit better. A little nicer. And last, we need an item or sorry, we we need like a flex row for this here. So, let's get our reviews handled. Uh, underneath your button, going to say flex and do items center. Open this up and continue to style. Say gap 4 border T border
    
    neutral uh 700. So now we're putting the border at the top and we'll say padding top six. And then inside we're going to create uh just an a tag where we don't we could use a link if this was actually uh going somewhere but we're just use regular a tag to href uh hash there. And we'll say 763 total reviews but you can you know change the number as you wish. Uh let's style this. We will say hover text neutral 300. And then underneath that anchor tag, we're going to say div class name. Give me flex. You can close this
    
    div. And in here, we want to map over uh four of these stars. These stars right here. And then a fifth one, right? So or or we we need to display four uh filledin stars, four white stars, and one gray star essentially, right? So do that easily. Uh normally we'd pull in real data for this, but I didn't want to go and like add a review thing to Prismic and pull that all in. This would normally come from Shopify or some uh third-party site or or just another database because Prismic is not um an e
    
    e-commerce platform by itself. It's more for maintaining your content. So here we're going to say dot dot dot array and then four inside there to to create an array with four items and we'll say uh map. Make sure that you are putting so it's it's close parenthesis square bracket close and then map on that array there. And then we're going to pass this an arrow function and with an implicit return. So, two parenthesis there. Uh, here we don't want the first item. We don't really care what it is. It's not
    
    doesn't exist. Um, but we do want the index. So, just grab we'll say index because we've been doing that throughout the project. So, let's keep it consistent. Now, we're going to say hi star and it's going to come from hi2 react icons hi2. Make sure you can delete this slice zone at the top just to make sure that we don't get nailed for it. Uh, by typescript components, get rid of that. Uh, but yeah, high star react icons 2. And I'll move this around in a little bit. I'm not going to do it right now. Um, cool. So, high star is
    
    going to get class name of H uh or a size five and text white. And close that up. And outside of that, we're going to say I'm just going to copy this over. We're going to create one more and say text white slash50. So if we save that, that looks good. Uh our issue is we aren't using a key. We don't we're not giving this a key. So we need to give um this a key of index. Here we go. Now it's happy. And now we have our four or a fourst star review. That many total reviews, 763. And we just have one thing that we
    
    need to do to match it against the final thing and that's to add some padding at the top of bounded. Um because we don't normally need this with how we're using bounded as a a slice container essentially. U but here we do. So class name is going to be py10. And that should shift it down. And we're looking great. That is pixel for pixel. Love it. So now we need that other part uh you may also like so that we can link to our different fragrances. So let's create this component. So to do that we're going to create a new
    
    component in our components directory and call this other fragrances.tsx. And we'll start by typing it. Type is gonna be other fragrances props equals curly braces. And we just need one prop here. It'll be current fragrance UID. That's going to be a string. And so the way this is going to work is we're going to pass it the current UID. Uh so like this received Ignis. And so then we just return every bottle that isn't Ignis. And if this was, you know, a real site with lots of different items, um,
    
    you would still essentially do it the same way most likely where you would say, hey, uh, I have this product. What are some similar products, right? So the props will probably be pretty similar. Um, but just we have a very simple mechanism of, okay, send back everything but Ignis. Uh, so now let's say export const other fragrances is equal to async because we're going to be making a call here. And we're going to make an arrow function. And inside here, let's go ahead and just break off our uh well,
    
    first we're going to type it so we get autocomplete. So other fragrances props. And then in here, we'll say current fragrance UID. There we go. That's always faster. And then here at the top, we're going to import our uh client. So we'll say const client equals create client from at prism.io. You're used to it by now. And const all fragrances equals await client dot get all by type right there. And we're going to just get all of the fragrances. fragrance. Now we get to filter out the current fragrance. So we'll say const
    
    other fragrances equals all fragrances and make sure you have it lowercase o otherwise you're going to get you're going to get yelled at. uh all fragrances. And we're going to pass this an arrow function where we get fragrance and then arrow and don't uh put any kind of brackets or parentheses. We're just going to return fragrance.uid ID is not equal to not equal to current fragrance UID. I did too many equal signs. So let me show this. So we are returning true if the fragrance that we're looking at right now as we filter
    
    through all the fragrances is not the same as the current uh fragrance UID. So we will only receive back true if it is something other than Ignis. Right? So Terra and Aqua both get put into the other fragrances array. Now let's return that uh the JSX return say container. It's the only place we're actually using the builtin uh container from Tailwind. And you can see once we create it the styles that it has, right? It's got just a few little helpers here. uh for like max width. That's about it.
    
    Um but we'll say MX auto and px4 for the other styles on this. Open this up a little more. And we'll have an H2 at the top with font display. And inside we're going to say you may also like and style it a little bit more. Say MB8 text 3XL and text white. And on medium screens and above, text 4XL. Save. And then underneath the H2, let's go ahead and map over our other fragrances. But first, I'm going to wrap it in a uh UL for an unordered list. And we'll give that uh UL a grid. So, open that up and add a couple more
    
    styles here. We'll say grid calls 1 gap is six. SM grid calls 2, LG grid calls three. Although we'll never need that, but it's still, you know, we're kind of building it for that. And XL be uh we we'll keep that off. We'll say grid calls four, but we don't need it. Now, inside our unordered list, let's use curly braces and say other fragrances dom and pass this an arrow function that implicitly returns. Oh, make sure it's an arrow. There we go. And we'll say fragrance. And then in here, open it up.
    
    And we're going to say li. And then let's give this a key. It's going to be fragrance ID and then right in there we're going to use a prismic next link and we'll pass it the document of fragrance and class name is going to be group. And you're going wait what group? Group Alex really what is that? Um I'll show you in just a second. So, let's create a div here that we is going to wrap around our image. We'll say relative. Open that. And then, uh, let's go ahead and continue styling it. I'll say aspect
    
    square. Width is full. Transition is transform. [Music] Um, there we go. Looking forward in the autocomplete. Duration is 500 and group hover. group hyphen hover colon scale 105. So if you've ever wondered how do you um make it so that if you hover over um something with the parent something happens to the child right like how does this child know that the whole parent is being hovered? Uh that's how the group class is used within Tailwind. So we put group here saying hey if if this gets hovered on or
    
    sorry like like pay attention to this and then within it we can say okay if group hover scale 105 and we can do it to other elements in here. We can do it to a child up a child of child doesn't really matter it's just the the most recent parent uh that has group on it. We're we're going to uh reference that. So now inside here let's do prismic next link. Oh, sorry. Uh, next image. There we go. And field is going to be fragrance data.bottle image. And width, it's going to be 600. And height, it's going to be
    
    600. And class name, it's going to be uh height auto and width full. Close that up. And now that we have something actually to show, let's go ahead and import this all the way at the bottom here just inside bounded. So we'll say other fragrances and current is going to be UID. Close that up. And I'm just noticing here uh we are missing. Let me go back to this. Uh so we have 4.4 out of five. We have no number there. So let's real quick. So we have the high star, right? Then we have a div. Right after that div, put a span. And inside
    
    put 4.4 slash5 or whatever number you want. But if you change it to like 2.4, this won't make sense anymore. So keep it at a four or change that. Your call. Uh, but now we have 4.4 out of five. And we have you may also like and check it out. It already works. It's already linking us off to those bottles. So, pretty cool. But we want to add a little bit more detail. We want to refine this a little more. I think the smaller bottles look better. These are pretty big. So, let's head back to our other
    
    fragrances. But it's funny. I think I just realized that the reason why these are uh bigger is because we didn't go with my gut in the beginning or didn't go with what I planned which is uh up here on the grid one go XL grid calls 4 and then it shrinks it down because it's expecting four items there. So I prefer that. If you want to keep it uh the way it was, that's fine. But I think that um the way that we have it now is a little bit better. Breaks it down a little bit nicer. And then, you know, we'll we'll
    
    handle this stacking issue. But overall, yeah, I I prefer the small bottles. Uh so underneath our div that wraps around our image, open that up in between prismic next link and that div. Sorry, I meant prismic next. Oh, yeah. No, I was right. ignore me. but also don't. So now we're doing the div for the content. So we'll say MT8 and open that. Continue to style it with space Y1. Just a little bit of space between each item. And then text white. Inside that div, we'll say H3.font display.ext2XL text to
    
    XL and we'll say Prismic text and make sure you import that. Yep. And field is going to be fragrance data.title. Save this. Let's see how that's looking. Looking great. uh underneath that H3 do a P tag with uh text SM and we'll say u d parfume. I think that might be our last u de parfum. Pour out a little uh cologne for me. I'm a little sad. I'm nostalgic. We'll say text neutral 400. And yeah, here we go. do parfum and last we'll say uh p dot text base and font light and in here we're going to uh
    
    do our format price import that and fragrance data.pric price save. And there we go. Very, very cool. And we're specifying the UDA parfum because um you know theoretically or or not theoretically, my my plan for this is that Coat Royale is you know like a Gucci or a Prada or just some kind of brand like that where they're not just selling three bottles of cologne. So this could be like a watch or you know, I don't know, a handbag or something. I guess for guys be like a wallet. I don't know. But that's the
    
    idea. But yeah, our very very simple recommendation engine is now working. And uh yeah, that looks great. All right, folks. We're in the home stretch now. We need to hit our navbar. We need to create a uh a settings custom type to handle certain things about uh well the the navbar for one. We need to uh set up our menu and everything. We need to add some uh view transitions so that when you go from page to page, it has this like smooth little ooh ah right and then we need to deploy our site to GitHub and
    
    set up some uh things like content previews and other things within Prismic. But there's not much more. So first thing is first, let's go into Slice Machine. Uh head to custom types and we're going to create our first custom type. It's going to be a single type. And right here it says global nav settings footer. Yeah, we're going to be creating essentially a global nav and settings custom type. It's going to handle kind of both those things. So, single type, we're just going to call it settings. Hit enter. And you can see
    
    that in custom types, slices are off by default. Uh it's because custom types aren't pages, right? And slices are really designed for pages. They are page sections. Uh you can bring slices into this, uh but it's it's, you know, it's not what it's made for. So, let's go ahead and add a new field. We'll add a text field. And we're going to call this site title like that. Add another text field. We'll call this uh meta description. And we'll add an image and call this fallback OG image. So, that if a page uh
    
    if we don't add an OG image to a page, then we will fall back to this one. Very handy. uh thing to have that every website should have. Honestly, don't make your editors add OG images every single page and if they don't, they get, you know, penalized and the link looks bad and everything. That's on you to make sure that there's always like fallback content there. And last, we're going to create our navigation. Um, so we're going to create a link, and we'll just say navigation link. And we're going to allow display text,
    
    allow target blank. Um, and make this link repeatable. That's the key right there. Allows editors to create lists of link lists of links. And that's what we need here, right? We we need this menu essentially. Boom. So, let's go ahead and create that. Um, done. Uh, don't add variants. We don't need any. You could and have like uh you know the CTA here of like sign up or whatever um be like a different color or just like a highlight. I like that pattern. We don't really have one of those here um because
    
    we kind of you know just products. But if this was like a SAS like sign up might be like in white just to make it stand out. Um okay, done. And now we want to we don't need to add this to any pages just to be clear. Uh custom types and page types are kind of on the same level hierarch hierarchically speaking. Um so you don't add a custom type to a page type. It's just its own thing. So review the changes. Push those up. And if we go into coat royale course, we should see settings as a singleton.
    
    There we go. Click that. And site title will say coat royale. You're used to that by now. And then metad description. I actually put it over here uh under the YouTube video ID meta content. You can grab it from that or I think I also have it somewhere in here. Yeah. So either way you want to grab it. I made it easy I hope. Uh and then fallback OG image. We're going to use this one with the the couple in the background all dark and moody and whatnot. There you go. And for our navigation link, we can add
    
    a few of these. Going to add three more. Uh if you if you come back uh to do the second part of this course where we build the quiz, you will have that fifth link and you will get to build this. And just as a little teaser, um you go through and you know, oh, ocean. That's totally me. That's the scent that I like. Um a late night swim under the stars. Yeah, that's that's also me. Um hm kind of timeless and effortlessly cool. I'm never trying too hard. And yeah, I adapt and flow. I'm never rigid,
    
    always ahead of the curve. So what's what cologne should I get? Ooh, aqua. And then it kind of blurs in comes from being like a little bit dark and yeah, nice little effect. So we learn how to build that whole quiz, learn how to do those animations, those transitions, um and get this personalized recommendation. You can retake the quiz. So this is a fun part of the course. Uh, make sure you step back or not step back, come back next week. Uh, but if it's already been a week, then just click around and find it. Yeah, it'll be
    
    on on the screen or at least in the description for sure. So, with that said, let's go ahead and start adding these links. We'll say home and then Ignis, Terra, and Aqua. And go ahead and choose link type. Each of these are going to be a link to Prismic page. And we're going to say uh homepage for the first one. Obviously, just match them up. Ignis to Ignis, Terra to Terra, and Aqua to Aqua. Once again, you can move these around. I don't really mind what order you put them in. You know, the the brand, if this is like a
    
    real brand thing, uh that might matter. Uh and change Coat Royale up here to settings. And there we go. That should be everything. But now we want want to publish. Make sure you hit publish. And now we can reference this information uh back in our project. The site title might seem kind of redundant, but this is good just in case. Um well, it's it's good for a lot of reasons. If you want to kind of template your site a little bit more so that you can uh pick up some of those components and reuse them
    
    elsewhere, that's really handy so that if you know you happen to land another cologne client and want to reuse that quiz, you get to kind of just use the variable and not have coke royale like hardcoded into a whole bunch of different things. So that's good practice in general. And then these other things kind of talked about and obviously the uh menu makes sense as to why we need that. Now let's put that information to use. So let's go ahead and open up our layout. And in here we see that we have
    
    this export const metadata and it's as a type metadata. Um and it's just hardcoded, right? Title create next app description created by create next app. Um and that is the static metadata. Um and that's how you go about that. But what if we want dynamic metadata? Well, good news. We can do that just like this. Pretty much the same thing. we need to return an object of metadata. But in this one, we are returning a promise that eventually resolves to metadata. So, let's go into our layout and let's just get rid of this whole
    
    thing. Um, and we will make a little space. We'll say export async function generate meta data. And we're going to type that as a promise. Sorry, not type it as a promise. Type that it will return a promise that resolves to metadata. And we're we should already have that metadata imported from next. So just double check on that. And then that function is going to have inside it uh us calling for the client. of const client equals create client uh from at prismic io sorry from at /prismic io just making
    
    sure and then we'll say const settings equals await client get single and we'll say settings. Awesome. And then we're going to return that object. So we'll say return object and we need to return the title and that's going to be settings data site title and then we'll return the description and that will be settings data meta description and here if if you'd like right um I think it's a good practice to kind of give backup but it does go against what I that earlier of like well you can you know make it portable but I
    
    do think that putting something here like um discover the exquisite uh collection of luxury fragrances by coat royale Paris and you can do the same thing here so that if it this doesn't show up we'll say pipe pipe or which means or uh we'll say coach royale Paris this, right? Oh, how did Oh, I never typed the coot. There we go. Coat royale. Um, just as a fallback, right? But you don't want to hardcode this mainly because then your editors can't change it in Prismic. And that's really what you want to um free them up to do.
    
    And we'll say open graph because now we want to return that OG image. So we'll say images and this takes an array. But first we'll check to see if uh this image is filled in because we have a fallback for our fallback uh OG image which we put in our public directory. It's just this coat royale og image.png. So worst comes to worse. We're still getting an OG image even if no one has touched Prisma can put anything in there. So we'll say is filled and image and we'll say settings.data fallback question mark. So if that's
    
    filled then we want to return it within an array. So array settings.data fallback URL because that's the the fallback OG image is still an object that has a few things on it. Uh otherwise we're going to return an array with a string that says slash ogen image.png like that. So if we save that now it's important to say this layout is like the absolute fallback right. So if we have metadata in the page that is going to supersede layout. If we have metadata or or in this page right any of these pages the metadata will take
    
    precedence. But if there's no title here, um, which there pretty much always will be to to some degree, uh, it falls back to the layout. But even here, let's go ahead and say, uh, const settings equals sorry, Adam, I'm in the fragrance UID page. Right now, settings equals uh, await client.get single and settings. And so with this we can now say instead of code royale here we'll just have the space pipe space plus uh settings data.title. Is it site title? Yeah. So now that will be our title up there. Now
    
    if we can go to one of our pages. Let's go find Ignis. How can we get there? Right here. Let's go discover. Cool. So, we have our code royale that's coming from that settings part. Awesome. So, this part isn't as like flashy. It doesn't do as much, but as your site grows, um key aspects like this are really necessary, and I didn't want to um you know, push you out into into the world building uh great websites without knowing these like fundamentals that really make or break a site. Okay, now let's get to our navbar. We did it early
    
    on, but then we kind of left it with this menu and these icons, placeholders. Uh, we want to take it to this so that it has the, you know, the buttons. These are going to be fake little buttons, but we're going to put those in anyway. And we're going to add our little menu on the side. So, have this here. And then, uh, in your code, open up the navbar.tsx. And instead of menu here, let's go ahead and bring in high bars three from hi2. If we just save that, we already get the little hamburger um icon. We're
    
    going to say size is 24. And we want to put a couple more styles on our button here. So we'll say cursor pointer uh text white transition colors duration 300 and hover is bg white/20. So if we go back we see it got bigger and we have this nice little hover effect and still doesn't do anything but it's already styled to. Now let's add our icons over here. Um, but instead of just dropping them right here, I'm going to actually make a separate component above just for clarity. Um, so I'll say const nav
    
    icons equals and we'll make a little arrow uh function but with an implicit return. So two parenthesis and inside here we'll say class name equals just empty quotes and tab index. You'll see why we need that. It's a little accessibility feature. Um, and we're going to type this as nav icons props. So, let's create that type. Type nav icons props. You might be able to guess. Uh, this is going to be class name. And that will be optional. This be a string. And then tab index also optional. And that's going to be a
    
    number. Now, let's open up this parenthesy here. And we'll put a div inside. And on that div, we'll say class name. And that's going to not be uh a string, but instead open up curly braces and say clsx import it. And we're going to say in quotes flex items center gap 8. And then of course we're going to pass it class name. Make sure you get the capitals right because I did not. There we go. And inside there we're just going to be using the next link. So I'll say link and yep from next slink. And this will be href
    
    equals if I can type. little hashtag and class name is going to be text white. Um, actually we can put text white. Uh, let's let's keep it here. I'm not sure if it'll work up above, but it should. Say area label is going to be search and tab index will be tab index like that. And in here we're going to say hi magnifying glass. That'll be size 24. And if we save that, let's grab nav icons and bring it to where we have icons here. Paste that in. Oh, sorry. You don't just put the word nav icons. That doesn't work. You have to actually
    
    uh call it as a component. So it's my first day in React. nav icons slash and close that up. There we go. We have our first little icon. Now we can copy. Where is it? This link two more times. And we're just going to change a couple of the things. We'll change search to account. And we'll change the high magnifying glass to high user. And let's change search in the third one to cart. And this will be high shopping bag. Save it. And check it out. We have our three icons looking great. So I promised you that I would uh explain the
    
    tab index thing and I will now. So tab index controls whether elements can be focused with the keyboard tab key. Uh a tab index of zero means yeah include this in the normal tab order. While a tab index of -1 means this cannot be focused with tab key navigation. So when the mobile menu is closed, we don't want keyboard users to be able to uh tab into links that they can't see. Uh but when the menu is open, we want those links to be accessible, right? So that is why we are doing this like dynamic tab index
    
    and why these can all share the same tab index because they're all going to be turned off or on at the same time. Yeah, just for good accessibility. Uh if an element isn't visible, it should also not be accessible via uh keyboard navigation. Okay. So now we want to make this thing open and close. We want to make it interactive. So we're going to use a little bit of state. So up at the top we need to first say use state. Sorry, use client. We're going to we're going to say use state, but at the top we want to make this a client
    
    component. And then down here in our navbar component, we're going to say uh const square brackets is drawer open and uh comma set is drawer open equals use state and we're going to say false as our default. Import use state from react. And to handle that, we're going to create a little uh toggle drawer uh function. So, const toggle drawer equals I'm going to make an arrow function that just says set is drawer open to the opposite of is drawer open. So, if it's true, we're going to set it to false, right? That's you get the
    
    concept of toggling. Now on our button, we're going to say on click, it's going to be toggle drawer. And we're also going to say Arya label. It's going to be menu. All right. It's not that's not going to do anything just yet because nothing else is listening to toggle drawer, but we can get our first piece of this going. So down at the bottom um between the header and that last closing div, let's go ahead and make a new div. This going to be for our little blur overlay. So in case you haven't seen or
    
    noticed it, uh when we click this, we get this nice little blur overlay to help you focus here and it goes away and unblur when you do that. So all we really need here is a div. Say div. And it's going to autoc close that or self close I should say. and we'll say class name is going to be uh curly braces. We'll say clsx parenthesis. Now we could open that that up a little bit because we'll have a few things in here. Um and we're going to say nav drawer blur. That's a uh a little custom class that we are not going to animate with.
    
    We're almost going to like anti-animate with. And it'll make more sense in a little bit, but we we have to give it a class uh for something with the view transitions in a little bit. Um but then we'll say fixed inset zero, Z40, BG black 40, opacity zero, transition all, and duration 500. And then hit a comma after that string. We'll say is drawer open question mark. If so, we want to give it pointer events auto and opacity 100%. And backdrop blur uh extra small. And that's what creates that little
    
    effect. And so because we have transition all, we're going to be um for half of a second animating between uh not having any blur and going from opacity zero to opacity of 100. But notice that even when we're at opacity 100, uh our background is still going to have an opacity of 40. So it's never going to be a solid like black uh div. And if that isn't the case, if drawer is not open, then we want to return pointer events none. pointer events none and backdrop blur none. Just like that. And after our
    
    class name, make sure we say onclick toggle drawer because we want, you know, if if you click off of it, if you click here, we want to close that drawer. So that's why we're doing that. and Ara hidden is true. In other words, we don't want this to be at all visible uh to screen readers. Like they don't have to worry about this, right? So, we can save that. And now, I think if we click there, yep, we got our little blur. And if we click on it, it'll close our blur thing. So, looking pretty nifty. That's fun.
    
    And now between header and that div, create some more space. And this is where we're going to put our uh slide out drawer. So we'll say div class name is going to be another uh open curly braces. We need to do a little clsx magic in here. So clsx parentheses nav drawer fixed top zero left zero uh z 50 because we want it to be above that blur layer. Uh, H full width is going to be 72. BG neutral 900. There we go. I got to it eventually. P is going to be six for padding and transition transform. And last duration 500. Now
    
    add a comma after that quote. And we will Oh, I broke it somehow on my end. How did I do that? Oh, we we just never closed it. That's why. Um, so we're going to need to open this up so I don't self-close this div. But, uh, after duration 500, we want is drawer open, right? Question mark. If so, translate x0 so that it moves into place. Otherwise, translate x full. Ah, and I actually messed up. Negative translate x full. All right. Now, if we just kind of put something in here saying, "Hey, will
    
    that work?" Let's find out. There we go. Hey. Awesome. Click off. Click in. Hey. More websites should say hi to their users. Why don't we do that anymore? Um, all right. So inside here, actually no, so we're not done with this outer div. Um, we're going to say roll is dialogue. That's an accessibility uh feature. So we'll say Arya modal is is drawer open, right? So is this a modal is going to be true or false? Um, and then ARA label oops area label is going to be mobile navigation. or I guess not mobile navigation, just
    
    uh let's say main navigation because that's really more of what it is. And then no, because we have that in a little bit. I'm just going to I might just comment that out. Yeah, let's just get get rid of that for now. Um because we have our nav in a little bit and we will be using an array label on that. So inside here we're going to first say uh flex.m MB6 and then justify end open that div up and we'll put a button in here uh with class of P2 padding 2 and or Paddington 2 because it's a fantastic
    
    movie but not it's not what we're actually doing here but I I should focus. Um so uh inside this button we'll say hi x mark from hi2 and size is going to be 24 again. Close that. And let's just see that coming through. Yep, there's our x doesn't do anything yet because we didn't give it an on click. So in that button, let's uh finish styling it. So we'll say text white transition colors duration 300 hover bg bg white uh and dash 10 or sorry uh slash10 and on that we want to say on click is uh toggle
    
    drawer and open up a little bit have a little bit more to go we'll say ara label It's going to be close menu and tab index. We talked about this before. Is is drawer open? Question mark. If so, then zero, which means you can tab to this. Otherwise, no. This cannot be tabbed to. Save this. And let's test it. Open it up. Close it down. Open it up. close it down. And I was wondering about the position. Uh I have a typo here. You hopefully don't, but uh margin bottom six, justify, end, and flex are three
    
    different classes. And once we fix that, there we go. It goes to where we want it over on that side. Now, to get to our nav, um right in here we have header and then div, and then right here, open this up. All right. Open that up right there. nav and create one of those and we'll say class name is space y4 and then ara label it's going to be main navigation and then here is where we want to call for our settings um or sorry where we want to put our links from our settings but guess what we haven't imported our settings just yet
    
    and we can't call for them like we normally do because this is a client component. So, we want to call for them in our layout and then pass them through. To do that, let's go ahead and type this first. Type navbar props like that. And just need one thing in here, one prop. Say settings. And that's going to be a content. Import that from prism.ioclient settings document. And then in here we're going to use curly braces and then type this as navbar props and settings like that. There we go. So now
    
    in our layout we see that navbar is not happy. It expects some settings as a prop and that's what we're going to give it. So above the return, we're going to say const client equals create client. Actually, you could I think we call for it right here. So grab this conclient con settings. Grab it right there. And yep, we need to change this layout into an export default async function. Perfect. And then in here navbar, we'll say settings equals settings. Save that. And navbar is now happy. And settings is not yet being used. But if
    
    we come down to this nav, open up our nav here, we'll say settings.data.navigation link map. Remember the navigation link is uh repeatable. And we're going to pass this an arrow function that implicitly returns and we'll say link inside for what we get and then open it to uh return a prismic next link. Here we go. And field is going to be link on click. We're going to pass this an arrow function. And we're going to just say set is drawer open false. Now, why are we doing it this way rather than using the toggle?
    
    Because we never want to toggle this to be true. We we assume that it's always going to be because the drawer is currently the only way that you can get at this. But just to be explicit within um within this link, I think was was a little bit safer. So, I'll say key because we are mapping. Remember key is going to be linkkey. It's something that Prisma gives us to utilize because they know that with a repeatable link we are mapping over it. Just going to close this link so it stops yelling at me. And
    
    after key we'll say class name is block border bottom and then border white slash10. So very very faint white line. Padding Y is two. Text XL font semibold tracking wide text white uppercase uppercase and hover is going to be text gray 300. And last we're going to say tab index is equal to is drawer open question mark zero otherwise -1. Save this and open this up. We see home, we see Ignis, we see Aqua and we see Terra. And you should at the bottom also see the uh proper links or if you click on
    
    it, it should take you to the right place. And then while we're still inside our nav, just outside of our map here, we want to say uh pt4 and md hidden. Open that. And then in here, we're going to say nav icons. from above. Class name is going to be just justify around and tab index once again will be is drawer open question mark zero otherwise negative one. So these are the nav icons that are going to be inside the drawer if uh our screen is small enough. So I'll show you how this looks. Um, so if we open that and then going to
    
    slide and shrink this to there. And we need to get it so that these disappear at that point and that they only show up in here. So let's do that now. Find that first nav icons. Where are they? Here we go. Nav icons right there. Class name is going to be hidden. So on small screens it's hidden. And then medium and up is display flex. Now if we test it, we should see no icons and they should pretty much like swap places. There it is. Perfect. All right. Okay. We need to uh fix our logo image. So around line 68, come up to
    
    this. First off, I mixed these up. Um so MD There we go. Medium and above width 44. That's why my thing was so small. Now it's much better. I was wondering for a while, why is it so tiny compared to the other one? Right now we're talking. And uh within this div around the image, we need to put a a link. So we'll say link. Uh we think we already imported that. And it's going to be href. It's going to be just forward slash. And we're going to bring that down to wrap around our image. And now that
    
    should bring us back home. And it does. Fantastic. And just like that, we have a working navbar. But I really don't like the that that felt that felt rough when we jumped from page to page. I don't like that. I want to use uh view transitions to kind of smooth that out. I like the way this feels a lot better. That's nice, right? That just feels so much nicer. Let's work on that now. So, while we're not using this, there is a uh an upcoming native way to use the view transition API within Nex.js by
    
    just passing uh a little config for view transition true. Uh but as it says right here, it is experimental and it's subject to change. So, it's not recommended for production. And I'm not putting it in this tutorial because this could change tomorrow. and all of a sudden rather than you know doing something you are uh having to type something else the API changes and unfortunately this course is now broken right so to future proof it uh a little bit better I just want to make you aware of this say hey this is coming down the
    
    pipe maybe in the next course we will be using this who knows um but for now we can use this excellent uh package by shooting it's right here under animation nextjs view transitions Open this. And this is a great little library that is handling our transitions for us. You can see the demo. Go to slashdemo. Watch the word demo. And it shifts over to here. And you saw like a nice little fade. So we can keep uh elements and move them around from page to page and also have uh you know custom animations. So we go back and then
    
    here's the custom transition. Watch like things slide out to the left. Shoo. Really nice. Right. So, we we can do a lot with this. This is a very simple demo. Um, and we're not going to do some anything crazy, but the little bit that we do is going to really pay off. Now, it shows here uh npm install next view transitions. Now, the only thing we need to keep in mind here is that this package uh is only built to officially support React 18. It's not updated for React 19 yet, but it works just fine
    
    with React 19. So, what we're going to have to do just so that our install both locally and when we go to build is uh not breaking on us, we're going to go and go to the root of our project. I'm going to close all these folders. And at the root, I'm going to create a new file called npmrc. And inside here, we're going to say legacy hyphen pure depths true. Just like that. Go ahead and save that. And if you've ever uh had to install something with legacy pure depths uh or just to force that install so that it
    
    doesn't say, "Hey, the dependencies are are all messed up." Um this just makes it so that we don't have to, you know, add that flag. It's just going to fall back to this if it hits uh a dependencies issue. When we push this with our code, it's going to do the same thing on Netlefi and build and it's going to work out just fine. So make sure this is added to the root of your project. And now let's go ahead and install uh in your terminal go npm install next view transitions like that and it should
    
    be good. You should see it in your package json next view. Yep. So I'm on uh 0.3.4 and you can see it's it's going to work alongside React 19. Uh, and I'm on Nex.js five, sorry, 15.3.1. So, if we look at the instructions, it says wrap your content with the view transitions component inside the layout file. So, let's go ahead and do that. Let's open our layout file and around the HTML, we're going to say view transition with an s and import that from next view transitions. Close that and pull it down so that it wraps your
    
    entire thing. That should now be uh the parent element there. And then back in the directions, it says, "Then use the link component for links that need to trigger a view transition." And that's what we're going to do. We're going to import a link from next view transitions. But in order to handle this, we're going to do something kind of special because we need to handle not only um like regular links like what it's expecting, right? Because it's expecting to be a substitute for uh next link component, but we also need it to
    
    be a substitute for uh prismic next link. So we are going to be expecting uh a you know a a link field to come in or a Prismic document to come in or just a string like this to come in. So we've got to uh handle like three options. So we're going to create a new component and we're going to swap everything out uh that we use for this um transition link component. So in components go ahead and create new file and we'll call this transition link.tsx. Hit enter. And we'll start by typing. Say export
    
    type. And we'll say transition link props equals open the curly braces. And we'll say children are optional because you know sometimes the um the link itself like the field has it baked in. So we won't always have a child to uh be the link label. But children will be a react. React node. And we have class name. That's also optional. That's going to be a string as always. On click, that's optional. And that's going to be a like an arrow function like this. And we'll say void because that's what it's going to return. Just nothing.
    
    Um, and tab index. We've talked about this before. Also optional. And it's a number. But we are not done because this is just stuff that uh is only uh only applies to this specific link. But we also need to combine it with. So we're going to use a little amperand and then parenthesis and open these parentheses here. And we're going to have a pipe because this is going to be a union. We're going to have this or this or this but not this and this and this. Right? So inside here we're going to say uh curly braces we'll
    
    say field and that one is not optional. So we'll say link field import that from Prisma client and or null right because even if we are passing a field to this uh prism could give us back just null it so that's the option there um and then we'll say document make sure you put a semicolon document optional and this is never and then href also optional And this is also never. And what this means is that if we get a field then these two cannot be there. So it'll throw an error if we try to pass a field
    
    and a document or a field and an href. We need one or the other or the other. Okay. Now copy that two more times. And basically what we need to do now is create the instance where we have a document and never an href and never a field. And then where we have an href and never a document never a field. So uh for field on the second line we're going to make that optional and say never and get rid of the null the or null part. And then for document that is no longer optional and it's a little bit tricky. Um, but this is now a Prismic
    
    document. Uh, like that imported from Prismic client or null. Like we said before, it could come back as nothing. Um, and then the href can stay the way it is. It's optional. And a type never. And now, uh, actually, you know what? Let's copy. No. Oh, yeah. Let's just keep going. So, same thing. You can copy the field part over here and paste it there. So field is optional and never. Uh document is also optional and never. Then href is not optional. So remove the question mark. And this is just going to be a string. Okay. Double
    
    check that yours uh looks like mine. We should have uh just going down the fields. Field is not optional. Link field optional never. Optional never. Uh sorry, link field and null. Sorry. Or null. Yeah, I would just kind of look it over. It's tough to read it back or like I don't think that's going to be as productive. So, make sure that this is looking good. And uh you'll find out throughout um as we swap this out for our regular links or our pris links. Um if it's a little bit funky because it'll yell at you,
    
    trust me. Uh we're going to say export const transition link and that's going to equal an arrow function. And inside here we are going to type this as transition link props. And in here let's pull off field document. I'm going to just shortand that as doc uh href children class name on click and tab index. And going to open up our function there. And inside at the top we're going to say const url equals href. And if href is either null or undefined then we're going to return as link import that from prism client
    
    uh field and if that is either null or undefined we will we will uh give the aslink doc. So let's talk about this URL is going to be a string. is what we are going to pass to our link component that we're going to get from uh the next link uh sorry next view transitions right we're going to pass it a URL and if href is here href is a string so cool let's just give that to it we know that that is um what what we're working with if not if that's either null or undefined cool let's return as link and what do we
    
    pass to as link which is a prismic uh function that goes and figures out what the uh path is, we're going to pass it the field. Unless the field is null or undefined, then we're going to pass it the doc. It has to be the dock at that point because we've made sure of it here that it has to be one of those three, but only one of those three. So that's how that little bit of logic works. But if we don't get that, we're going to say if no URL console.warn warn and we'll say transition link no URL found. That would just be
    
    for like our purposes if we're building and refining that. So return null but otherwise return. And we're going to say link. Be careful where you import from. Not next link for this one. Next view transitions. So do that and go ahead and close that. Make sure you open it up and have something inside. Uh we're going to have field question mark.ext. So if that is there, if that's available, great. We're going to return the fields text. Uh we're going to use that same trick, the the nullish coalesing operator. So if that is null
    
    or undefined, we will return children because both href and document uh will need children inside. But the field can carry its own text. Now for our link here, we're going to say href equals URL like that. And class name is going to be class name. Passing a lot of this just through on click is going to be on click and tab index is going to be tab index. All right. All right. So, if we save that, we can actually swap this out for any uh prismic link or next link that we are using. So, let's go into our
    
    button link component. We have this prismic next link here. Let's just see if we can swap it out one for one. So, we'll say transition link. Uh, yep. We can do it like that, but we want to actually import it from at slashcomponents. There we go. The transition link is not happy and that's because we still have the prismic next link props as the props that it is expecting. But we are exporting transition link props from this uh transition link component. So go ahead and do the same thing here and paste
    
    that in. And now transition links like okay we're good. We're good. And get rid of your Prismic IO next import there and save that. And now I think let's test it out. I think we can get uh let's go find a button on the homepage. So that that won't transition yet. Um does shop now link us anywhere? Not yet. Let's go to our Yeah, these I think these should link us uh and kind of have some kind of transition to them. That did it wasn't that thrilling, but it did actually have a little bit of like a fade rather than a hard snap. So
    
    it is working. Let's add some styles so that it uh actually has a a cool transition. One of the ways we can do that is by going to our components and files here in our resources and you see uh CSS globals.css for view transitions. So grab this and we'll talk about it once it's in our code. Go to globals CSS and underneath your globe background, paste that in and let's take a look at what we have here. So we have a couple of key frames uh both fade in and fade out. Pretty standard uh from opacity zero to
    
    opacity 1. Transform going to go from translate, you know, uh the item is is down on the on the y- axis. So it goes from down to up above. Scales a little bit. Um fade out kind of does the reverse. And then we assign it to view transition old. That's the old page that we're we're kind of getting rid of. And view transition new, which is obviously the new page that is coming in. So, that's going to fade in and that's going to fade out. And then we have these here, navbar, footer, and we're going to have
    
    to add a couple more things in here um so that they persist, so that as we're transitioning things, they don't um transition to like a second navbar. It's going to look weird if we aren't holding on to these um between transitions. You'll see what I mean. So, save that and we should be able to go back and click through and we should see Yeah, there we go. I saw a transition. I I hope uh my screen recording is picking it up, but there was a nice little uh transition there. We can also go ahead and swap it out on this page. So let's
    
    open up our uh what's the name of that component? Let's see in our components. Um it is other fragrances. So we should have a Prisma connect link here. Get rid of it. Do transition link like that. And make sure when you do that, come up and get rid of this import because uh TypeScript will break on its build if you're importing things and not using them. It's very strict to try to make you write the best code possible. So, make sure that when you take it out, uh, you also remove it from your imports. Now, if we click
    
    here, oh, we broke it. Or at least mine broke because I have transition link like that. Uh, mine didn't like autocomplete at the bottom. So, that was my issue. Hopefully, you didn't have that same issue. Um, Terra, there we go. So, we see a little bit of that. That's looking pretty good. Nice. Um, we're not seeing it here yet because we still have um the same kind of link. So, we'll go ahead to our nav navbar and we have a regular link. We want to swap that out for a transition link. Um, from Nope, we don't want it
    
    from dot sltransition link. I I recommend always changing it even though it's a little bit uh a little bit silly, but uh this way you can move this this component anywhere else and it'll still have that as the way that you're importing it. And that like when your imports break because they are relative, it's just a pain in the butt. Um so let's see. Do we have any more Prismic next links in here? We do. Uh search through and find any Prismic Next links. I'm just going to kind of do um full find or replace sort of thing. That's
    
    transition transition link. Um, that get rid of that. And my navbar should be set. Let's see. Yeah, there we go. But but see, we had some jank here where that like kind of fades into the back. I don't love that. That's not the way I want it to be, especially because it like this ducks behind the bar real quick, right? I don't love that. Um, but our uh logo here should be working. And it does. That's great. While we're here, let's uh change this button at the homepage so that it actually goes somewhere, right?
    
    So, if you have a any of these homepage buttons, just change it to like Ignis or something. I'll go Aqua. Actually, I've done a lot of Ignis stuff. Um, let's just scroll through. Fragrance is Ignis. Cool. That should work. And we've got those. Take the quiz homepage. That's fine, right? We don't have the quiz just yet. Um, but that's good. Go ahead and hit save and publish. And now we we reload this twice. We should have a shop now button that takes us. Let me reload it one more time. Maybe it didn't publish in time.
    
    So there we go. Aqua. Nice. And take it back. Awesome. The animations are really, really working for me here. So we need to do a couple of things to make it so that these don't transition all funky. So, in our navbar component, we already have navbar. That's good. And I think that's what's in our global CSS. Cool. Navbar and footer are taken care of. But we also want to have um our little blur thing. Where is it? Um here's our blur. So, let's add nav draw navar nav draw blur to our globals.css. All right. So, what we're
    
    going to do here is I'm going to put it underneath navbar. So, I'm going to say nav drawer drawer blur. I can't talk anymore. It's the end of the course. We're almost there. Uh I'm going to say view transition name. And I'm just going to use the same thing again. Nav drawer blur. And what view transition name does is it just keeps it it tells the view transition API that this is consistent. Don't delete this. Um, and don't bring a a new one in of this this from one view to the next, keep an eye out if you see
    
    this. Uh, so yeah. Yeah. If you see this name in the next layout, also transition this to that spot. So, what I actually did in the original draft of this was I had these bottles shift up into their spot and like shift down on transition, but it got really kind of like trippy. like it was like, "Oh, it's just doing too much for what this website should be." But it's a cool effect. So, like, if I click Aqua, it it wouldn't do this. It would have actually shifted and grown up while the other bottle uh shrinks
    
    down and and goes to that spot. Once again, cool, but just over the top for kind of like an e-commerce page. But I'm just kind of explaining what this can do. Similar to the demo word that we saw over here, right? Go to demo. Same thing. So, um yeah, this should keep the nav drawer blur um from being replaced with with another one of itself essentially. Um but we also want the nav drawer itself. So, just going to copy this nav drawer blur and get rid of the word blur. And now we are set. So, now we
    
    should see the nav drawer uh transition a little bit more smoothly. Let's see. Okay, I'm going to reload just in case. And Ignis. Yeah. See how it it didn't like fade to the back. It stayed around and it just transitioned out like it like it should. So that's a much better result. This feels a lot more consistent. It keeps with the rest of the page. Uh it feels more like a single page app than a regular website now. Right. So let's look through our um project for Prismic. next link just to see are there any
    
    other spots. Nope, we can get rid of that. I must have commented that out a while ago and get rid of that import. Have a couple empty imports inside the hero that I never cleaned out. If you do too, make sure you grab those. And I have an import here as well. So no, we have no more Prismic next links around. So that's good. But do we have any regular next links? Next slink. Search your repository for it. And in the footer, we have one. Let's see. In navl link. Uh, yeah, here we go. So, coat royale home transition
    
    link. Go ahead and import that. And we don't need to swap it out here. We can even just use like an anchor tag, just an a. Um, that works just fine. I'm actually going to go ahead and do that because it's not linking to anything. And if that is gray, it's not yet. Where else are we using it? Now, I don't know why it wants to import from that wrong spot. Components. Hopefully, it's working for you because it's not for me. Uh, let's see. Oh, here we go. Down here. And we want the actual transition
    
    link for this one. All right. Save that. And then this can go away. And we have one more in the navbar. Where is it? I'm going to search this page for link. Right. Okay. So, it's another href to hash. Let's just nix it. And there we go. Is that all of them? That's all of them. So now get rid of your next link. Import. If we can get rid of imports, that's always going to be better, right? We don't want extra JavaScript imports. So now let's Oh, I want to save changes. Yeah, I do. Sure. I made some good changes there. Uh, now
    
    with just a little bit of code here, uh, oh, oh, and I almost forgot. Um, with the if, if we see that they prefer reduced motion, then we have it happens to that the animation duration is super fast and it happens um, just instantly. So now our website is wired up with view transitions inside Nex.js s and it's looking real slick. This is going to impress a lot of people. Okay, so now what I want to do is get our site live. I want to deploy our code to GitHub so they can version control and store our code and then I
    
    want to uh point Netify to our GitHub repository and say, "Hey, take that code and push it live, deploy it, and you know, we've got our site then." So, if you don't have a GitHub account or a Netify account, go ahead and uh make one. They're both free. We're going to be using um everything free with them. They're free plans, all that stuff. So, just sign up for both of those. So, back in our repository, we can go ahead and open up our terminal or you can use the built-in features. You can initialize
    
    repository this way or, you know, from the terminal go get init and that will initialize an empty git repository. We see here that we have 67 items that we want to uh commit to our repository. We'll say get add period or you can just uh go ahead and push the plus sign there. Either way will work. Kind of walk you through both. I prefer the little gooey here but want to make sure that you know how to do both. Now they are added. See how they are sorry they are staged and we could remove them like this or add
    
    them back. So they they do the same thing. And then we'll say get commit m and then I'll say initial commit just like that. Uh make sure it's in quotes or you can just type initial commit here and hit commit your call. But once we do that this should pick up on it and say yep it's it's committed. Now head over to GitHub and log in. And you'll see a little plus sign up here. Create new. Go ahead and click that and say new repository. And we don't need a template or anything. And call this repository name
    
    coach royale uh tutorial or course. You can call yours just coat royale, whatever you need to. Um and description I'm going to leave alone. I'm going to keep this public so y'all can see it. You can make yours private if you'd like, but I recommend public. Get feedback that way. You can show potential employers or friends or whatever the code that you wrote. Um and the rest we can just leave as is. create repository and we are going to push an existing repository from the command line. Essentially, we we did a few of
    
    these steps, but we don't we don't need a read me or anything like that. So, uh go ahead and copy this and we're going to go back to our terminal. We're going to paste that in. Hit enter. And mine was pushed. Yours should be pushed as well. If you need to log in, then GitHub should walk you through that. Um, but we can reload the page and we see we have our code Royale course and everything has been committed uh 5 minutes ago and we are up and running on GitHub. So this is all we need to do here for GitHub. This is set. Next we're
    
    going to head to netlifi.com. Go ahead and click log in once you've signed up. And we're going to say here add new site and import an existing project. You might have to connect GitHub to your Netifi if it's a new account for you. Um, so go ahead and click that and connect it if it's asking for it. And then I'm going to search our repos for coat royale course. And I might need to add the dashes. So if that happens for you, interesting. Yep, there we go. Quote rail course needs the dashes. Very specific search. Uh, so I'm going to put
    
    it on my own team. Tro codes site name, coat royale. Come on, keep typing. Uh, coat royale course. There we go. It just needed to be all one word except spaces, but then it breaks. Um, and then build settings. We're just going to keep everything standard. This should all work just fine. And yeah, go ahead and deploy coat royale course, but yours will be named something different because once again, um, this is going to tie to a unique name. So site name is available. You can be like coat royale
    
    like Andy or something like that. Awesome. So deploy coat rail of course. And this should take about a minute. I'm going to pause the recording and I'll see you on the other side. But there's a good chance this might fail and we'll see why. Okay. Well, I lied. um that went off without a hitch. And the reason why I said it's probably going to fail is because I said earlier that TypeScript will really ding you if you forget to remove an import or uh if you say like, you know, const my name equals this and
    
    you never use that variable. Like there are a lot of reasons why our build would fail. And I was going to use it as a way to kind of show you how to just go fix it and then push it back up again. So if you have any um failing if if if your build failed uh you can go ahead in and open this building part. It should say like oh nope no good. Um, and look in here and see if it says a specific file and where you are importing something that you didn't use like you you might have missed one of those uh next links
    
    or the Prisc next links and just look in there remove it uh commit that and push it back up uh to GitHub and will automatically know that that was pushed to GitHub and it will rebuild and try again. So we did too good of a job tracking down all those little things. So, that's pretty funny. But now, uh, it worked. So, let's go to codealcourse.netifi.app. And here we go. This is our live site. We go shop now. And it loads real quick. We are live. And this is working so so well. Congratulations. You got the course uh
    
    you got the course website up. We have all these neat uh animations and transitions and everything. This is really really slick. I hope you are loving it. All right, one of the very very very last things I want to do is make sure we have live previews set up for our Prismic content. So I went to the documentation Prismic docs came right back here to using Next.js with Prismic and over here we have live previews in the page builder setup live previewing. So content writers can preview content live while editing in the page builder.
    
    Each slice in a page is shown in a live updating thumbnail. We're going to make sure that that is working with the new URL that we have so that it's uh not just living off of our local host, but also I want to set up uh previewing draft content. So this is what we're going to set up first right now. Um slice machine init performs most of the setup for you during project setup. However, there are a few steps to complete manually. Setup previews in Nex.js. So what we need to do pretty much all we need to do right
    
    now is wrap sorry not not wrap just include prismic preview in our layout file. So, uh, make sure you are here like come to, uh, Prismic Docs and then click preview draft content setup previews in X.js and grab these two lines of code and we're going to go to our layout and we're going to import those at the top. I'm going to shift some stuff around here. Let's say Prismic stuff, CSS stuff, uh, components. Those are going to go down. Thought I grabbed them both. And yeah, that's looking better. Like I
    
    said, uh, framework stuff, Prismic, or just, you know, other library stuff. And then our stuff. Then we're going to scroll down and just inside the HTML, we're going to say Prismic preview. And it's expecting a repository name. And we're going to pass it repository name because we are importing that from where is it? Repository name from at Prismac.io. So if we open that we see that one of the things we are exporting is an import from uh our local slice machine config file. So export con repository name it's pulling
    
    off of an env or the repository name and that's what we are importing there. That's really all we have to do. The next step says to uh enable auto previews with your Prisma client. That's one of the things that we touched on already that uh the create client that comes with the boilerplate already calls that function. Um and then create an API preview endpoint. Yep. Guess what? In our app/ API, we already have a preview endpoint. It's pretty simple. All it does is uh redirects to preview URL. It's all handled for us and it's using
    
    our local create client. And then we have to add an API exit preview endpoint which we also already have. And that just uses exit preview which is handled for us already. Like it's five lines of code and it's handling previews. It's just really cool. But while we're in here, I want to show you how we're going to be updating the content from Prismic. So, this revalidate route here is also very small, but uh this is what we're going to be hitting. We're going to be hitting um our URL.com or whatever
    
    slashrevalidate uh no sorry, our url.comrevalidate. And that is going to tell Nex.js, hey, anything tagged Prismic, go revalidate that, check on it, uh request it again, and update that content. And so because we call everything with the tag of Prismic, it's going to know exactly or sorry we're going to call everything everything from Prismic. We tag with Prismic. So it's going to know, okay, I'm going to go update that stuff spec specifically. But next we're going to set up previews in Prismic. So this one
    
    we have to do. Navigate to your Prismic repository. Go to settings preview. So we're going to do that. Code rail course. Going to go back down here in settings. And then we're going to go to previews. You can ignore this uh whole part because we are using the Nex.js version of this basically. And here we're going to insert in input some values. So say production. Oh, didn't mean to shout. And then for your domain, I don't know yours. Uh but mine mine is codealcourse.net.app. Okay. So, uh, go grab your Netlefi URL. And I think we
    
    should remove that front slash, I believe. And then here we're going to say slash API/preview like we talked about. And going to say create my preview. Great. Now, let's head to our documents. Let's go to our homepage and let's say effortless elegance. I think we're really excited about it. And I'll save that. And then instead of publish, we're going to preview the page. And I'm going to select production. It's going to open a new tab. And it should show us just how excited we are about effortless
    
    elegance. Nice. And then if I go H, yeah, I don't really like that, honestly. I want to go back. Um, actually, I made a bit of a mistake here. We need to get the little uh prismic preview here that helps us exit this. Otherwise, we are stuck with this cookie until we like clear it manually. So, let's go ahead and I think we just need to push our work from layout. Indeed, we do. So, I'm just going to say add prismic preview. Going to say yes. Going to commit that and sync those changes up. And then we can see that in
    
    GitHub we there we go. Just updated source. And then over here in Netlefi, I should see uh let's see deploys. Yep, starting up. So that should all happen automatically once you push up to GitHub. So I'll see you in a minute. Let's see if that works. Okay, it was just published. So now hopefully we should be able to reload our page. And there we go. Shows us what page we're on. And we can even ask for a sharable link. But right now, I just want to get out of here so that we uh don't have the effortless elegance
    
    exclamation marks. Um, but if we want to change it to question mark, question mark effortless elegance, right? We go ahead preview the page production and that should cook us back into it. There you go. What? Effortless elegance. Yeah, we're having a lot of fun. Uh, hit the X and then it's funny because it's in a fade component. It was like, all right, whoops, I'm out. But yeah, so your uh your your users would never see that. But that's just, you know, part of the preview aspect. But you might have noticed one thing. Uh, we
    
    have this error here. That's because if we go up here to the three dots and click live preview settings, we can see that we're still looking at local host and I shut down my local host. Um, and so I'm going to copy my Netifi URL and going to paste that in there. And it should automatically add the Slice Simulator at the end. If it doesn't, you type that out and hit save. And then these should reload. And there we go. We've got that looking better. Awesome. So, we can hit publish once I get rid of
    
    those. And we are set. So, now the last thing we have to do to actually have this update for real, not just a preview, but update for realies, is to go into settings, and we want to go to web hooks. And back here in the docs, I'm going to show you how to find this later so you don't have to remember. Uh at deploy, right, we already did our netifi deploy and then handle content changes. We need to create a web hook and we can name it something like display publish content. That works. And what we're
    
    going to do is uh put in the URL as uh plus API revalidate and then we'll set up our triggers. So let's go ahead and do that. I'm going to first copy my API URL, sorry, my uh website URL again. Um name of the web hook is update update displayed content URL see how it says my domain/myhook going to say uh code railcourse.nalifi.appi app slash API slashre valalidate and then secret just leave that blank that's not important for this um and uncheck everything but a document is published and we're going to
    
    say add this web hook now uh every time we publish a document it is going to ping that revalidate and it'll say okay let's go revalidate everything that comes from prismic so let's do this ourselves uh I'm going to go to the homepage and I'm going to say uh especially quiet luxury and at the end I'm going to say it's so cool and I'll hit save and I will hit publish and I'm not going to pause the video or anything like that. Let's see how quickly we can actually get this uh live on the site as an actual rebuild so
    
    to speak. So hit publish. It's published. Go to code royale reload and there it is literally like a second. So, that's how fast your website can update with the Nex.js app router, with using Prismic, with all this tech together. It's so cool. All right, so I'll get rid of that. Return it to its natural beauty. Uh, and we'll publish again, reload this page, and there it is. That once again, this is not as a preview feature. I know there's a token up here, but that is not what's happening. It is just updating
    
    that fast. Now that your site is live, another thing we want to do is I want to be able to see this site. I want you to be able to share it with the community. And a great way to do that is to use GitHub's topics. Now, what you're going to do is you're going to grab your URL right here. Um not not this one, but yours, right? And go to your GitHub repository. Uh I'm recording this a little bit in the future, but go ahead and click this gear icon right here. And description, you can put whatever you
    
    want there. You can describe the course um or sorry describe the project that you've created. Uh for the website, go ahead and paste what we just grabbed. And for topics, go ahead and say coat hyphen royale hyphen prismic. And it should come up just like that as something that you um you know can select. And now what will happen once you save those changes um we will be querying for that topic and showing off your website right here on the course resources page as well as eventually I'm hoping uh back on the
    
    actual courses page uh somewhere around here to show off you know um all the people that have created courses and that's succeeded uh we see a lot of them on on GitHub but they don't have a way of uh you know announcing ing themselves. So we are going to be starting using this topic. So make sure you add code Royale Prismic as well as your URL so I can check it out. I would love to see it. So that's it. Like you are set up with a website that has previews, that has slice previews, that updates dang near instantly. Uh that has
    
    these awesome animations, has these sweet view transitions. Um I don't I don't know what what more you can ask for at this point. uh except maybe a quiz. You might want a quiz. And so check out that other video, that next video where we are going to add a slick little quiz onto this already awesome animated website. And uh yeah, I think we're going to have a lot of fun in the quiz course. I hope to see you there. It's been a blast working with you on this. Thank you so much for your time and for putting all that effort in. Uh I
    
    hope you're really proud of what you've done. Thank you so much for taking the course. I hope you had a great time building this with me. If you want to keep going, the next course creates an interactive quiz that fits right into the site we just built and makes the entire thing feel a lot more real. Honestly, the quiz is one of my favorite parts and I really hope you check it out. And if you publish your version of the site, be sure to add the GitHub topic, Coat Royale Prismic, so that it shows up on the course resources page
    
    and that's so I can check it out. And as always, like, subscribe, share this video with friends. It really helps out the channel and allows me to keep creating these website courses for you. So, thank you so much.
    