---
description: 
globs: 
alwaysApply: true
---

    if the websites you build look like generic templates your work is getting lost in the crowd in a job market where standing out is everything your work needs to make people stop and ask how do they do that if you're ready to step up your game make something awesome and have fun in the process this course is exactly what you need so welcome to this new course where you'll create a showstopping 3D e-commerce landing page for fizzy a fictional soda brand that is anything but ordinary we're talking
    
    about a website that not only looks awesome but showcases the kinds of skills that will help you land that dream job or impress clients we'll start by building the foundation with nextjs and prismic making sure your website is fast scalable and easy to manage from there we'll layer on Tailwind to give it a fun and vibrant design once the essentials are in place we'll dive into Gap to add some buttery smooth animations that will bring your site to life and finally we'll bring in the power of 3js to create eye-catching 3D
    
    effects we've got soda cans flying around as you scroll with carbonation bubbles coming up from the bottom we make our can Skydive as it flies past some staggered text and users choose their flavor in style as this Carousel spins the can into a new color and don't worry if you're thinking that this might be too advanced I've got you covered we'll break everything down step by step so even if you're new to these tools you'll come away with a deep understanding of how to use them you're not just copy pasting some apple or Nike
    
    Site into your portfolio it's a unique and fully customizable brand that looks polished professional and ready to impress I can't wait to get into this course with you so let's get started and uh go check out this website let's take a closer look at the final site and each component we'll create with this course when the site first loads the text appears with that slam effect and two realistic soda cans fly in from opposite directions hovering as bubbles rise up it creates this sensation like we're
    
    immersed in the soda every part of this hero animates in and the cans are floating and reflecting and really visually engag enging way and as we start to scroll you see that something Fun's going to happen uh if we hover over the fizzy logo we see this little wave effect and it's a nice little Easter egg for any curious users so as you scroll down the cans move and spin and more fizzy flavors join in accompanied by some animated text that says try all five flavors The Heading little letters animate in and the body
    
    text Will Follow and so you see each letter is animating on its own uh and even the background color is changing from that yellow into that green this is our hero component and it's a one Big Slice we're going to create together even the bubbles it's really subtle but even the bubbles change color so that they don't uh stand out in in kind of a bad way so if we continue to scroll we leave these Bubbles and the cans behind and we transition into the Skydive slice so here a FY can is torpedoing down
    
    through the sky with clouds rising up and words appear from the bottom right as we scroll as if passing Us by and this these these words are editable in prismic CMS so you can put anything you want in there it's it's not going to be hardcoded but it says dive into better health and so you're going to learn how to do text in 3js in this course uh as we reach the end of this slice this can shoots ahead and the clouds f leading us to the next component so here we have the carousel component has these wavy
    
    circles in the background and a floating fizzy can in the center and kind of invites users to choose their flavor so each Arrow triggers a spin animation and that's one will take us back to black cherry and it changes the background color to match the selected flavor you can also see that the flavor name at the bottom will change and it'll you know animate out and animate back in and it's a really fun interactive component designed to you know help users pick their favorite flavor and you can also like tack on a a buy button to
    
    this if if you wanted to expand this website but it's just a really nice little effect next we have a Content slice with text on the left and a fizzy can on the right and then as we scroll the can Will shift to the left because there's some text on the right and we keep scrolling and we get text back on the left and the phizzy can on the right right so as we go to each section we get a different color and it's just a fun component it's it's a it's a more engaging way to show your content this final slice is a responsive text
    
    component that fills the screen and when we scale it down to mobile it still makes sense it's still pretty cool and I'm going to talk more about this in the course this is kind of a playground component that we we can do a lot with and the very bottom our footer includes the fizzy logo and this little circle from the can that says love your gut love your life and you can see it here on the can now the cool thing about this website is that fizzy is a madeup brand that I created and I modeled the can and
    
    now you can use it to have a realistic portfolio piece that has a brand that you know if if I say so myself is is not half bad looking and it seems like this could be an an actual brand and it's just this this thing that you can then customize I'm giving you the actual figma file so you can change this out from being fizzy to whatever brand you want it to be you can make new flavors because it's all editable so this course is something that you can really put in your portfolio because it is fully
    
    customizable you're going to learn some really fantastic things I'm going to show you how to export this uh this model from blender for each of these five flavors we have a different figma file or we have a different thing in figma and yeah it's just going to be a really robust course that shows you a lot just to go through it this is using 3js and react 3 fiber which is the best way to use 3js in react we are animating with both 3js and Gap and it's we we are using Gap timelines we're using gsap
    
    scroll trigger and I'm going to show you how to use Gap in react uh using their new use Gap react hook so this is our fizzy landing page and I am so excited to dive into building it with you let's go so we're getting started we are in the fizzy course and first things first you should head and get this resource stock the link should be in the YouTube video description but also you can just go to dub. h/ fizzy and you will get this doc it it just be a a nice little link to it just to just to show you what
    
    I mean uh that's why yeah it's a short URL so this is going to be a very very essential dock for you uh we have all the resources here that that you could need we have assets documentation components that we are going to be pasting in a bit uh we have troubleshooting if you are running into problems I can't update this YouTube video but I can update this notion doc so if people are like hey I'm I'm hitting an error here uh I can update this so that uh you know I can I can help you out later uh I'm going to drop
    
    the final code in live site here once we are done recording this video uh and then I have some extras here a lot of people ask what fonts and themes I use so it's right there uh if you want to learn like really really really indepth uh 3 3js Bruno Simone course is wonderful and I'm even like inspired by him with this slide down here it's just a nice little way to keep things organized and then if you want more prismic courses if you want to get even deeper into prismic we have a lot of stuff on the YouTube channel but uh go
    
    ahead and download the assets now and you can unzip that we'll be getting to that soon but it's just good to get that out of the way and these documentation bits are are going to be really handy as as we go through so uh keep this open now let's get started by signing up for prismic so head to prism.png on verell to GitHub to prismic all of this stuff is not going to cost you anything to do this course so once you are signed up for prism go ahead to your dashboard and we are going to choose a new repository and this is a
    
    nextjs course so go ahead and choose nextjs now we have three choices we're going to choose the minimal starter you can preview it but we're just going to go ahead and select it lets us start quickly it's already wired up to a CMS and you can also add prismic to existing nextjs projects if if you need to but uh right now we're going to go and select that go ahead and create your prismic repository I'm going to call it fizzy uh so that will be taken now so go ahead and name it you know fizzy Steve
    
    or whatever your name is or what whatever you want to call it um or you can call it something else entirely so fizzy I'm going to save for the display name and we are doing the minimal starter nextjs and the free plan we you have a ton if you do over four million API calls in a month uh I I have questions so we're going to create repository and our repo is drum roll there we go welcome to your page builder so we can get started with slice machine I want to see first yeah let's come in and customize our icon so
    
    uh if you unzipped that folder you should have these assets so we have all cans bunched OG image prismic repo icon that's what I want to drop in here so go ahead I don't think we can drop it can we yeah we can awesome so now we have uh a nice little icon click apply settings and I think you need to reload this page for it to pop up there but yeah it's just a nice little if we head back to the prismic repositories it just looks so nice so I love customizing as soon as we get into our project so now that
    
    we're back in here uh go ahead and grab this terminal code we're going to launch our starter so you can click the little copy button there and in your uh in in a terminal I like to use the terminal that is built into VSS code that's my preference you can open your computer uh built-in terminal up to you uh I have a a repost folder where I put all my projects and I'm going to go ahead and run this command so we're just going to in initialize slice machine which is the prismic developer tool with
    
    our repository fizzy and we're using the starter nextjs starter prismic minimal typescript so go ahead and hit enter and that's going to take a little bit of time it might ask you if you want to uh run this I have run this recently so I didn't have to press y for yes uh but it might it it will definitely ask you to do that so go ahead hit Y and it's going to run through some of this installation and it's doing a bunch of stuff for us and I'll show you that once we get into our repository all right we're finished up
    
    and it says run slice machine we're going to say no uh it's trying to do us a bit of a favor but I don't like running it from outside of that folder so instead I want to say CD fizzy and move inside the folder and then I'm going to say code period so if you don't have this code shortcut on your computer like if if this doesn't work and open a new um instance of vs code for you just go ahead and navigate to it by saying like open folder so not a big deal but if if you do have that shortcut it's handy so we're going to
    
    close this one and slide this over so now we have our fizzy project let's just take a quick look around we can see that we are using the app router and that means we're going to be shipping a lot less JavaScript to the client but throughout this well I mean typically but this is a very JavaScript heavy site because of all the animations so we're going to be using both client and server react components in this course you'll also notice that we are using typescript for a more reliable code base hit over
    
    and uh slice machine is automatically going to generate the types for us so one of the uh more annoying parts of typescript is having to declare all of the types as we go but slice machine is going to be such a buddy and make all of these types for us it's going to be great so let's get moving and let's uh pop open my terminal again I'm hitting command and the Tilda uh that that little icon at the top or you can go to view terminal see command and Tilda how however you want to open your terminal
    
    uh or if want to use a different terminal you know it's the last time I'm going to say it you can do whatever you want with that npm run Dev and if we check out our package Json we see that running Dev is actually firing off concurrently which fires npm next Dev and npm slice machine so we are running two servers two two development servers at the same time and uh it's going to be pretty nice so we have Local Host 3000 command click on that and that'll open there for some reason uh and it says welcome to your new website not the most
    
    incredible thing in the world but it's minimal so we don't have to like go through and gut a whole bunch of stuff and then we have our slice machine server so command click on that and that will open as well move homepage to the number one spot and slice machine to the number two that's how I like it at least so like I said this is just one page with some rich text in here and some resources if you need them you won't because I'll be walking you through everything so don't worry and then uh let's take a look at slice machine
    
    because you're probably wondering what is slice machine right so prismic slice machine is like our workbench for building data models we have a few different types of data models here so first we have page types and uh I'm using slice machine in um like you know a smaller window so I'm getting a a responsive view yours probably looks more like this uh but I'm going to be zoomed in so there's our page types custom types and slices so page types are for like homepages landing pages blog posts and so on if we hit create it
    
    actually shows us the two types of page types that that we can have a reusable type means you can make a million of them like a blog post right a single type is only used a single time and yeah so we we can either make a reusable or a single type of page um if your content that you're making is going to be its own page it's probably a page type if it's not going to be its own page if it's something else like a navigation menu or any other kind of reusable data you can use what's called a custom type
    
    it's pretty similar to a page type but page types give us some nice built-in benefits like SEO uh fields that we we don't have to make on our own and they're also designed for holding slices and we'll get into slices in a moment um but if you we look at the options here we have reusable and single also for custom type but the um the suggestions are different side menu testimonial author right so those are things that might not have its own page but you might want to reuse it uh in a couple different places so referencing it would
    
    be handy and then um if if you take any of my other courses here on the Pres mic channnel you will uh definitely use a custom type as a settings um object so it's great for like hey I want to set the site name for every page across this site and I want to have a Universal Navigation all that kind of stuff so custom types are great we're not going to be using one in this course because we just have this one page to do we're going to make one really awesome page so last but definitely not least we have
    
    slices now this Rich Text slice is pretty bland uh it doesn't even have a screenshot but um the slices that we're building is going to be like this this hero slice these are sections that we can move around on our page and uh your content editors can shift them around and it's it's the best way to build websites and they can be really simple or they can be super complex whatever you need but here is our page type and we see we have the one rich text field available sorry sorry sorry the the one
    
    rich text slice available on it and then we we have a title that will uh is is that right there it's that homepage bit we have SEO and metadata so we can move these fields around we we can edit these slice machine is where we edit our models we can add fields we can do all kinds of stuff here so if we hit this little arrow we head over to our repository we we already had it open there but I did just want to show you that um we can always get to it from slice machine with that Arrow it's it's pretty handy so as you can see uh we
    
    have some dummy content that was up uploaded uh some of it's this we can actually go ahead and delete this another page or or we can archive it uh and then if we go into the homepage we can see what we have there okay so this is one of the best features of prismic they have a live editor so if we zoom in a little bit you see that as you type as you change anything in your Fields you get a live preview so I'm going to zoom out and say get live editing and what we're going to do right now is swap out
    
    or not swap out but but use our uh Local Host 3000 I just copied that and pasted that there and slice simulator gets added automatically to the end um that is correct you know don't let that weird you out that is a file that was uh s that was added during the init process and this uh shows your slices for you so like it's it's automated you get this preview built in so if we hit save we will get this Rich Text uh field over there get a whole bunch of stuff in our terminal we can close our we can
    
    minimize our terminal um but yeah yeah we can see that we we are getting that live preview so that's already up and running and yes later we will change this to our deployed app so that um right now if if you were to have anyone else in this repository because we're using the local URL it it would not work for them so let's install tailwind and our font and let's get started building so first step install Tailwind CSS you can uh find that link in the in in the notion doc that I provided for you here so uh we have prismic docs
    
    and we have nextjs docs just in case you need them uh but right now we want to go for the Tailwind docs and this should take you right to the nextjs uh part of those docks so you can skip part one and I say start at step two because part one is create a new nextjs project we don't need that uh install Tailwind CSS we're going to copy this and I'm going to go back and I'm going to bring that terminal back and I'm going to stop it with contrl c and let's say clear and I'm going to paste that in and there we go we installed Tailwind
    
    post CSS and auto prefixer now we need to configure our template pads but actually what we're going to do is we're going to copy Tailwind config Js from this resource Doc it's going to be the one of the first what's going be the first component that we copy out it's not really a component but it but it is uh a it's a file that we're putting in our code we're not doing this a ton I promise it's not going to be just like a copy paste and you don't know what's going on kind of course uh I will talk
    
    through this in just a sec but this is just some kind of boilerplate or not boiler plate but just stuff that's not fun to type out and you're not going to get a a whole lot from if you want to compare this is the before that's the after uh this was going to show you how to um how to write this out uh so that's what we we wanted to put here this content part if you're not familiar with Tailwind this is telling Tailwinds just in time compiler where to look for our classes so we we basically say hey look
    
    in these folders and in these files for any Tailwind classes then include those classes in your bundle Tailwind doesn't put every single class that it has in the bundle because it has like I think literally thousands of classes so once we do that we now need to add the Tailwind directives to our CSS uh yeah let's do that well okay we'll do the Tailwind preer plugin first just since I I have it in this order um so we're going to go ahead and say npm install D prettier prettier plugin till when CSS
    
    or you can where is it you can click till and pret your plugin and it's a little bit out of order but uh come down here to npm install prettier prettier plugin Tailwind CSS uh bring up your terminal hit enter and then we have this prettier RC file and it walks you through this oh it walks you through this right here so you want to create a prettier RC file in your root of your project and if you're not familiar with prettier it is the um tool that all that that basically makes your code prettier so it's it's going to
    
    like like all this nice indentation and all that kind of stuff uh it is responsible for that so prettier RC and what this is going to do is this is going to move our classes into a specific preset order so uh yeah so before it just has like you know random order whatever but afterwards it's going to move things so that like uh text white is is now here and it's going to be a lot easier to spot errors because anything that Tailwind doesn't recognize it moves to the front of the line so if if we type something wrong it'll shift
    
    it all the way to the front we can go okay hold on that's that shouldn't be in the front so just trust me that that's going to be really really handy um I I don't think we actually need this in plugins here but I we can we'll remove that and and we'll see if I'm right now we want to create a new file inside the app directory so right inside app we're going to say app.css and inside there if we come back to our Tailwind uh in installation file we're going to copy this we should have these three at Tailwind lines save that don't
    
    worry about the squiggle totally fine and we need to now import that into our layout and if you're not too familiar with uh VSS code if you hit command P it brings up this really handy search for files by name thing I'm I'm going to be using this a lot especially because I have this limited screen real estate because I'm doing this half screen um so we're going to say layout and it brings it up and we want to import at the top here so import doapp docss and once we do that we should see oh hold on we got to run our Dev server
    
    happens every time uh I'm I'm hitting up on my keyboard to go up to pre uh commands that we've run and I'm doing npm run Dev I am a lazy Dev so I'm going to be using uh as many little shortcuts as I can so I will be also saying them out loud to you as we go so now we have lost all of the unique styling and that is intentional that that's not it's not an error what uh if you go to app CSS this base basically removes all styles so that we don't have to overwrite Styles we don't have to fight against
    
    the the Cs SS that the browser provides by default we can start from scratch and that's actually kind of a gift with with our Tailwind design um now be before we move on completely uh let's install clsx this will come in handy throughout the project so npm I CSX uh there are docs in the uh fizzy resource doc but just just know that it's a tiny utility for conditionally joining class names together um you are going to you you'll get it a bit later so we can run our Dev server again oh or should we yeah yeah yeah yeah go ahead
    
    and run that again that's totally fine uh now we want to add our font so alpino variable is the font that we are using for this project it's actually this font right here uh go ahead into the resources and you'll see fonts font alpino uh if if you're not with font share they have a bunch of great fonts feel free to well okay I was going to say feel feel free to change the font that that we're using I would hold off because we have a couple of uh components that are sized specifically for alpino um and you'll see what I mean
    
    like yeah so just go with alpino uh the the the reason I was saying like do whatever you want is because I really want you to take this website and make it your own um go ahead and click download font family or or just download family I already have it downloaded um let's see going back to soda brand course I have uh all right assets I have it somewhere here maybe here ah it's in my downloads of course so uh alpino complete we open fonts we open web and then don't worry about CSS just grab fonts and then we don't need
    
    to worry about any of these except for the two at the bottom and it says alpino variable W and w two we're going to make a new folder uh a couple of new folders actually uh not in Source outside of source so make sure you're not selecting Source click down here maybe and choose new folder and say public and then we're going to hit slash and then say fonts this is a nice way to create multiple folders and E even files at once uh so I don't have to do that twice I created a public folder and a fonts folder going
    
    to go ahead and drag these two move Mo over and we put them right into fonts make sure you land it right on the word fonts and there we go this is stacked because there's nothing else in public but there will be uh so now we have our fonts there so what we want to do is we want to add uh a local font to our nextjs project um and I kind of ran by alpino but if you're not familiar with variable fonts uh that's what we're using and the reason we're using it is because you get all of these weights baked in um for one much smaller file so
    
    it's really handy that you don't have to install like 10 different fonts you just need the one variable font and it can do anything so we can close out of the AL alpino uh page close out of Tailwind for now and we can click the adding fonts to nextjs link and it should bring you right to the local fonts bit so we can see that we need to import local font from next font local and we want to do this in our layout. TSX so close app CSS and I'm going to close the other parts of this and we going to put this at the
    
    very top uh we'll talk about organization of of imports later it's not a mus have kind of thing but it is nice to stay organized so import local font at the very top and then you see I have uh I I I I have it written out for us down here and if you want these exact slides this is hosted uh you can come down here and course course slides will open up this exact slideshow that I'm going through I going to provide everything I can to you there's uh no secrets around here all right uh but we can go ahead and copy this from the
    
    documentation and we want to put this just below app.css and instead of my font we're going to say alpino p i n o and for Source we want to go with DOT do sl. do slash because we're going up two folders to our rout and we are going to say public SL fontalpino variable. WF 2 now you could co-locate uh see it says font files can be collocated inside of app you can do that but we are going to need these to be uh public font files for some of the 3js stuff that we're doing so the way we're doing it here is just fine and we we
    
    want it to be available for 3js and if if we did it this way uh I don't think it it would be so now that we have that here we can keep the display swap but you see we need to add weight so we we need to tell it hey these are the weights that we want from this variable font so the way we do that the um the syntax is kind of weird because this feels like 100 and 900 but nothing in between but this is actually 100 to 900 or or through 900 so we're getting everything in between so 100 space 900 is the way we do that uh and last but
    
    not least we want to use a CSS variable so say variable by the way I say last but not least a lot so hope that doesn't get annoying font alpino and we uh like like do keep this name because we already have that in our Tailwind config oh Tailwind config um just saved you a little bit of time by uh specifying the font family Sans and then we have this CSS variable VAR parenthesis font alpino and a fallback of Sans sarif so we need to save that but you see that alpino is not being used anywhere so what we need to do is
    
    we need to actually put it on our HTML element but we don't want to use class name let me show you why so if I zoom out enough we will show this sidebar with Tailwind CSS so if I zoom back in uh there we go so um the way that you do it with tail1 CSS is you want to set this CSS variable and then on your HTML element we want to say class name enter variable now now they're doing two fonts for this one we don't need to do that so all we need to do is just say on our HTML class name is I'm going to remove the quotes we're
    
    going to say alpino do variable and then that should be good so we can hit save on that layout now we're not going to see a change to this text and that is because uh these styles are getting overridden by the Styles inside our Rich Text slice this Rich Text slice uh you just comes with this default go ahead and like remove the stuff from in inside it keep keep the class so that you don't have um I don't know an issue or whatever but now we can see that the font has definitely changed and the way that you
    
    can check to see hey is my font working especially if you have it installed on your computer that can be a problem I faced that a bunch where it's like is is the hosting of my local font uh working or is my computer saying oh yeah I have that installed so if you inspect it let me drag this over if you inspect it and scroll all the way down in the Styles part uh oh no sorry in in computed that's what it is in computed down here you have rendered fonts let me make this a little bit bigger for you uh rendered
    
    fonts family name alpino variable and font origin Network resource that would say something else like local resource or or whatever uh but Network resource means that it is being served up uh from some kind of a server right so that means it is working um not sure where I think meno is is like the um the code bit there don't worry about that um and yeah okay so and it's a local file so it would say local file if it was local that means our font is working great all right so let's get started started by
    
    creating the fizzy logo and by create for this one I kind of mean um copying in and the the reason we're doing that is because uh things like svgs I'll I'll I'll actually walk you through super quick how to handle svgs here here's a quick crash course on how to optimize svgs for react ready so go into the opt optional customization assets fig page and you can just watch and follow along if you don't want to right now uh um yeah I'll open it with those are the same uh so you can just watch don't worry
    
    about it but we have this SVG over here man this is hard to see when there's the bars there there we go uh we have all these can labels and I'll I'll touch on this in in a little bit you see that these are all editable so you can shift this around you can delete the fizzy logo you can do whatever you want and this file is yours to mess with but if I have this F favicon fave icon who knows no one knows uh I go to right click and I copy where'd it go oh sorry copy paste as that's what I was looking for copy as
    
    SVG so as long as you can get it as an SVG in some kind of a way uh grab that SVG and then I go to uh you can go to Google and just search for SVG OMG but I have it SVG OMG and you should get the Jake archal one uh if it's something else don't don't use it uh Jake arch. github.io SVG OMG uh this is the one if we click on the paste markup it'll give us this little cursor and I hit paste and it pulls it in now we can see down here that we are shaving off a whole bunch but we still have a really gorgeous little SVG I can't even tell
    
    what's changed what it does is it removes points that it doesn't really need it removes information that it it just didn't need it simplifies it uh and you can come over here and you can see that like you can really simplify it and it starts to get ugly although it's not the worst but it's kind of a simple shape um but one is usually pretty good and then you can copy it hit copy and then I go to uh svg2 G2 jsx.com and then I paste my SVG there and over here we get a react component ready to go and so the reason
    
    why we need to use this kind of a um a converter is because sometimes when when you have like uh stroke I can't type there uh when you have something like let me see stroke width that uh will break let me try to nope that will break in react because you you can't have that hyphen so it'll autoc convert it to stroke width like that so anyway that's how we pull in our svgs that's the crash course done moving back um let's see what we've got okay so we want to come down to our components and files we already got the tail and
    
    config that's checked off now we want this fizzy logo and I'm telling us here right where we want to put it so we want to create a new folder called components in our source directory and we're going to put our fizzy logo in there so I'm going to copy it first copied code to clipboard great and in the source folder we're going to say new folder components and new file fizzy logo. TSX hit enter and we can paste that in let me make it big and we can see that it has a couple things going on here one
    
    uh I've I've added more to it than what we just get from that converter but overall that is the um that's my process every time and then I I add stuff to it I add props like if I want to spread props on this um on this component I want to put that there class name I want to uh have a a a a a class that I have baked in but I also want to allow it to take uh a a class name in in case I need to change the size of it or do anything to it um and then I also made it accessible so I added this title and I
    
    put fizzy in here and then I did an ARA labeled by and I pointed to the ID of this title so we do that on one other SVG component if you're trying to make your SVG uh accessible that's how you want to do it basically if it contains words you should be doing that next let's see what else we got uh ah yes so vs code react shortcuts we're going to use these a lot during this course I'll be saying just a few letters at you uh throughout the course so if you don't already let me see es7 um yeah uh here they are es7 Plus
    
    close that on the side uh react native Snippets this one by DS nagger thank you for your service uh install these all right just just bottom line install these it's going to save you a bunch of time um and it allows us to do some pretty cool stuff so we are going to do that right now we need a header for our website so we're going to come into components say header. TSX and we are going to use those Snippets so we're going to say tsrf C and you can see as I'm typing like I'll I'll back up a little bit that
    
    that um like those Snippets that plugin is giving us all kinds of different op options best part is it it handles typescript or just regular JavaScript so these are all these different react or react native if you are a mobile app developer if it's got It's got everything um if you if you if you're not using typescript you can still use this so RFC is a react functional component but luckily we have TS RFC and that's what we're going to be typing and the cool thing is it creates header for us it sees that the file name is header
    
    it puts it in there and it gives us a nice little return so like already this component works and we can pop it in somewhere so let's go ahead and do that let's pop it in our layout we're going to put it inside body but above children and we're going to also add a main component so header and as I start to type it we see that we get this suggestion from VSS code and I'm just going to hit enter and we get that Auto Import that'll work that'll work most of the time not all the time and we always want if if it's in the components folder
    
    we always want to uh use this at/ components and then our component name just because that makes it so that if we ever need to move things around uh that's always going to work in terms of a path to that file so we' got our header we don't need to pass it any kind of props or anything I'm going to say main close that and then I'm going to hit enter move this around a little bit hit enter and uh if you hit option or Alt you can move things up and down with the arrow key so I'm gonna be doing that
    
    a ton during this course if you're wondering how am I how am I doing that uh that's how so now we have our header and we have main children all that stuff and our header is just the word header but it's about to be oh so much more no it's just going to be the fizzy logo but still fun right so uh we are going to oh we don't actually have that yet let me go back a little bit all right so the slides are aren't perfect but you know they're going to help us out so we need to turn this div into a header like that
    
    we can get rid of the word header and I'm going to style the header I'm going to say class name if you're not familiar with react uh we don't use class you have to use class name it gets converted into class in the HTML so don't worry about it's just a a weird react thing long story um so we're going to style it now with Tailwind so with Tailwind we just use these utility classes that then add styles to the component so I'm going to uh run you through a few of these we're going to say flex and as we hover
    
    over it and and don't worry if you know Tailwind I'm not going to be uh slow walking it the entire time and uh I am going to point you to a Tailwind um plugin that you should definitely get Tailwind this is another one of those must have things so Tailwind CSS intellisense uh the one by Tailwind Labs nice little gold check uh remember when those check marks meant something um so Tailwind install that because it is going to make your life a million times better uh when you hover over Tailwind classes it's
    
    going to show you exactly what it's it it's going to Output so now we have a header with display Flex that's great we going to say justify Center and we're going to see py4 and so you can see right here as we're we're typing it padding top one REM and it's going to be padding bottom one REM so that is so the the Y AIS is up and down let me come back here uh the y- axis is up and down and the x-axis is left and right and that's actually going to be the same when we're doing 3js stuff too so that's that's pretty handy
    
    so uh py4 puts padding both above and below our component last but not least we actually want to uh have negative margin on on the bottom of this element so that our hero kind of gets sucked up into it um you can space it out more if if if you like but that's just kind kind of the way that I uh I designed it so that like you know it should be maybe more like that but on this small screen it gets a little bit cramped so to do a negative number with Tailwind we want to say minus before the class so minus MB
    
    hyphen 28 see because we we can't put the minus here because it it it's it's already there right so we have to put the negative sign before the whole class and now that is minus 7 Rem uh if you're not familiar with Tailwind uh you you might have expected like you know py4 would be uh four pixels or four something like like where's where's the four right so it is a it's it's it has a design system built into it and so uh four is one Ram uh one is a quarter of of a ram so 0.25 RAM and that's four
    
    pixels so if you uh start to think in the sense of okay uh you know anything for so P py4 or uh Gap 4 anything like that is going to be one REM 16 pixels if you're familiar with REM uh just remember that four is equal to one REM and then you kind of go from there and uh it all multiplies so inside this header we want to get our fizzy logo fizzy and we're going to import it see how it's importing in that weird way we're going to go at SL components and that will fix it um it's not that big of a deal but if we ever
    
    wanted to move header I know I saved and I shouldn't have uh because it's open uh there we go uh if we ever wanted to move header out of the components folder uh this would have it break and so in in this case it's versatile and it it can move around and it's just great we want to style our fzy logo because uh we don't want it to be that color so we're going to say class name equals uh we're going to give it a height or H20 you can see that that's five REM I'll stop like pointing that out but just want to kind of familiarize you
    
    with it now we want to have this above some other elements we're going to say Z for Z index 10 say cursor pointer r s o r p o i n t e r there we go and text Sky 800 now normally a logo would like take you home so that's why I'm putting cursor pointer on it and plus it has like a fun little interactive bit that I want to you know in encourage some interaction on uh but really cursor pointer might not be the the best thing to put on it uh but now we get because it it's come above the rest of the text and everything we get
    
    this cool little effect I'm going to show you real quick how that's working so uh we put group on our main SVG right that has the group uh class on it and this is a special Tailwind class that let see if it explains it no it doesn't um that basically says Okay I want want to keep an eye on this element and then if something happens to it like if if the group is hovered over I want to do something down here so it's tailwins way essentially of saying if the parent is hovered or whatever or focused stuff
    
    like that uh do something to the child down here so what's happening through like at at all times is this wave SVG which is uh this right here I believe uh is always always moving or or wait is it some is it somewhere else it um it it it it might be I don't know no I I think that's it um and so it's it's always moving and we just bring it down so that you can see uh the top of the wave but as as it goes up there it's still moving um but this little Translate Y 80% is what pulls it down when the parent is hovered pretty cool
    
    little effect all right I figured it out so it's this path that is sliding left and then we have a group that wraps around it kind of like if if you wrap an element in a div right this group doesn't give it any style or anything but we can animate that differently and so the inner thing is animating slide left and if we hover that we see that this is a custom animation that we've set up in our uh Tailwind config file and it just going to just slide to the left uh over the course of 3 seconds forever and that's how that little
    
    effect is done now you might be wondering close that in our header uh we set text to Sky 800 how did that change that uh because s svgs you know don't use text they use like a fill but we can use this current color property that's really handy to say hey whatever the current like text color is that it is in inheriting use that and so it it allows us to set a text color and it it will pick that up so if we set this to anything else red we would change that color so you can change it whatever you
    
    like but uh I recommend at least for the the the duration of the course follow along for the most part and then and then go while just so that uh you're not hitting any errors or anything um as you go so let us change the style of the body because we want a couple things here uh we want class name so we're going to say overflow x hidden uh that way we don't get any horizontal scroll bars because when we're doing lots of animations and things all over the place and full screen stuff uh that can happen and we
    
    also want a BG yellow and we're going to make that 300 so if you hit save we get our yellow background don't we're going to get rid of this um Rich Text slice in just a moment yep there we go we're going to delete the rich text slice and create our own so uh we're going to create a hero slice in just a moment we're going to come into slices click right there and we're going to say delete Rich Text we barely knew you but uh I appreciate it so it lets us know here hey this is going to delete the rich text directory and if you can
    
    see we have this slices of directory and we have a few files in here it's going to it's going to wipe that out it's also going to remove the slice from the slice zone so in our page we have it added to that page but it's going to be removed from that um but we will need to manually remove the slice from the page that is live so this page is live we're going to have to delete that ourselves no big deal click delete and we've deleted it do we need to H we need to log in prismic so go ahead and click
    
    that and uh if you're not logged in already it should log you in all right once you're logged in you should see that it's able to communicate with your prismic repository and see okay I see that the model for page has changed because we've removed that slice from it and we're also deleting Rich Tex so this changes page shows us well the changes so we're going to hit push I'm going go back on this hero slice um and we can go ahead and oh it's it's gone but we're we're going to need to uh make a little bit of change so let
    
    hit homepage or I can say fizzy change that title hit save save and hit publish and now if we reload should let's let's kill our server and reload that if if you had that problem that might go away when we restart our server there we go so now we don't have anything because we don't have any slices that we are running there but we did change the title so that's fizzy just like that um now let's create our own slice this is this is our turn we're going to make a hero slice that is the main Big Slice here that has all these
    
    cool effects so come on into slices and and it'll explain what are slices but you don't need that you got me so we're going to create one and we're going to call it hero and it says no screenshot available but guess what we came prepared not with fonts but with the asset zip so in here you have thumbnails and you can go ahead and open that up and you'll see we have our hero.png right there click update screenshot and we can drop hero onto that and so this is going to come in handy when we are picking our slices
    
    it just makes it look a little bit better inside the prismic page builder now we created the new slice we named hero and and now let's see our slices folder so remember we had Rich Text here before now we have hero so if we look in here let me scooch this a little bit uh we see we have an index TSX a MOX Json and a model. Json as well as the screenshot that we uh popped in there so index TSX we just have a placeholder component but this is really handy because it uh puts a couple data attributes on here so that if we're
    
    inspecting our code we can see this we we we could always remove this but I think it's handy to keep there's no reason to remove it uh we can see the slice type for this section because sometimes all the all the HTML and everything especially if you're using Tailwind it can all start to look the same and you're not really sure what component is this so that's a handy little default other thing is uh it handles all of our types for us right now we don't have any Fields yet but as we add Fields it will automatically get
    
    imported and applied to this slice we don't have to handle it uh at all and already you can see like what slice has on it it's already typed for us so let's not waste much more time on that uh let's check out the mocks as we fill out Fields this will get updated and we will have these like like built-in mocks if we want to use them we're not going to use them that much in this course but they they definitely come in handy um when you want to uh build more locally uh with model Jason I'm going to
    
    keep this open as we uh add our fields here and you'll see what is happening so slice machine is saving us a lot of time uh some cms's have you like write your own Jason and it's a little bit wild because uh I wouldn't want to write this all all by hand so I appreciate that prismic uh does it for us so if we go um we can add fields for text images links drop downs dates booleans we have all these different fields that we can add to our slice we can add these fields to page types and other things too but
    
    we're really just building slices in this course so we have image text Rich Text link select we're going to be using pretty much all of these so image text Rich Text link and select we're not going to be using many of the others or I I don't think any uh except for the repeatable group this is a must have uh a set of fields that the editors can repeat we're we're getting into that later but yeah we have a lot of great Fields here for us to use we're going to model the hero now so I have a little list that will help us
    
    out and the the the where I got that list isn't from you know some sacred place it's just from looking at uh if like let's say you you had a figma file from a designer you develop an eye for uh picking out like what Fields you need so okay like here's here's our heading here's our uh H1 here's a subheading that can be a paragraph here's like maybe body we can call that or like description that's another paragraph We have button text oh I'm scrolling already we have button text that doesn't need to be um like an actual like P tag
    
    that can just be a a string I just need a string back from that uh down here that is an H2 okay and then we have a an another body and then we're also going to have an image for when we're on mobile so this isn't 3js we just want to default to like the a a quick loading thing for mobile so we instead show an image and we have the rest of our content there and we have our second heading I think there's one more thing here I don't know if that's going to work here we go and second body this is the only slide that like
    
    overruns I think but those are all our fields that we're going to be adding here so like I said this a very uh this is a big component my my heroes are always like some of the biggest things uh of the course it gets easier after the hero maybe I should do uh it from bottom up but nah heroes are fun so let's start uh we click add field and we're going to hit Rich text first call it heading and hit enter and I don't know if you noticed but it automatically created a an ID for us uh where like we have this label that's you
    
    know capitalized and we have an API ID and if we have a space it'll do an underscore for us all that kind of stuff so you might also see over here look it updated our Json I'm so glad I don't have to type that we get to choose uh which text types or or uh formatting types our content editors can use in the page builder uh by clicking these buttons or just unselecting all so this is going to be locked into to an H1 so click unselect all and just hit the H1 we're not going to allow multiple paragraphs we we we need this to be a
    
    pretty simple uh string right so now it it removes everything except for heading one perfect and don't worry you don't have to watch the model I just kind of want to show you what's happening behind the scenes sces next add another field another Rich text we're going to say subheading and open that unselect and that's going to be a p for paragraph don't allow allow multiple paragraphs next add field we're going to say Rich text and we're going to say body once again unselect all p and unallow multiple paragraphs now we are
    
    actually working on a a new flow where once you add a field it automatically opens up the um this edit menu so you don't have to click into it you might have that already if uh if it's come out by the time this video comes out uh next we want button text now we have two types of text at prismic we have a text string without formatting this will just literally return like a JavaScript type string and then Rich Text actually returns from the API a Json object that we then use the prismic rich text uh
    
    react component to render out with paragraphs and headings and all this kind of stuff so this is a really really handy uh field type but if you just really need something simple like a button label uh text is the way to go it's it's e easier to work with in in your code so we'll say button text and see it creates that ID with an underscore for us that doesn't have any settings because once again it's just a string so we don't have to edit it at all going to say button link and would you believe it it's a link field so I'm
    
    going to say button link now for the the the purpose of this course there is no where to buy anything so uh like the shop now button doesn't really go anywhere I think it's like it's it it links to yeah the same thing um but I I want to show you how links work in prismic and so that's pretty handy next we're going to add an image going to say can's image not the best name but you know it's an image of cans don't be mad at me for my lack of naming ability uh second heading we want another H2 sorry we we want an H2 we
    
    don't have any H2S yet second heading and we're going to lock that into as I said an H2 don't allow multiple paragraphs and I think we have one last one it's going to be second body yes so add a field Rich Text second body enter and that's going to be just paragraph you can throw in Boulder italics for fun go wild and allow multiple paragraphs sure give those editors what they want give them an early Christmas uh now we if we go to push our slies we'll see okay we have a slice to push but we don't see any Pages
    
    here that's because we didn't add this slice to the page we need to tell prismic hey this page is allowed to use that slice so we need to go into our page types and choose select existing and we going to click on hero and click add so now slices have been added to the slice zone so now this page type will be able to use our hero go ahead and push that and then if we go over to our FY I'll wait for that to push might take a second there we go and if you come over here we can add slice and we see our
    
    nice thumbnail going to click on that we have our heading one our subheading it's exactly what we filled out in slice machine now they are real fields that content teams can put text into and you know what we are our own best content team today so I'm going to pull this over and we're going to put some content in here who who doesn't love content so Liv gutsy put that right there subheading soda perfected I'm going to copy this from the site go ahead and do the same button text shop now um you don't
    
    need to capitalize this stuff we're going to be capitalizing it with CSS so don't worry about that uh and button link I'm going to choose a web page and I'm just going to send it to prismic uh so if if you have a personal site or anything go ahead and link to that right like or link to whatever up to you uh and then we have we have not selected an image go ahead select image we only have this repo icon in here let's come back and we can dump in the OG image and all cans bunched these are two more images
    
    that we'll be using throughout the course and all cans bunched I want to I need to zoom out a little bit I guess um I want to give it alt text so all of the fizzy flavors and using the prismic next image component this alt text will automatically be added to that image so we can add to page oh and and I do just want to say that there is a lot to love about the prismic media library there's a tagging feature if you have a ton of images there's a great search there's there there's a whole lot here and you
    
    can't even use uh unsplash images pretty quickly but for us we have these awesome cans that we're going to be using so gets added and that alt text gets put put in there uh our second heading let's grab that that is what is it trial five flavors cool let's paste that in trial five flavors and second body go ahead and copy that don't write that yourself and if we hit save and publish we see no change except we get this placeholder component oh and so so throughout this course when we need to uh see any updates from our
    
    publishing nextjs in Dev mode we're going to have to reload it twice so if you re if you reload once and it doesn't work it's always going to be twice because there's a little cache that we we have to bust so it's always a double reload just so you know moving this back in here and so now we have this placeholder component for hero variation slices so let's start off by showing you one of my favorite features of slice machine we're going to open up our hero slice when to slices and hero and show
    
    code Snippets we're going to toggle that and look at this we get the component and the field slice primary heading we don't need to guess at what the shape of our slice is we don't need to console log anything we get all the components and the paths right there I'm going to reload just that good it went away um that toast was in my face and we're just going to copy these one at a time and paste them in here there we go so clear that out and you can go ahead and just copy those in and we will fix that little squiggle in just
    
    a sec all right I fast forwarded and I have all my imports here go ahead and do yours and what we're going to do is we're going to put our cursor on the prismic rich text part we're going to hit command period and you see this quick fix dialogue pops up and we can just click uh or or hit enter on update import from prismic iio react and you'll see that we now have prismic Rich text as one of our Imports do that to the remaining Imports that need to be imported or the remaining components and there we have it we have no more
    
    squiggles we just have a few Imports some from react and some from prismic next looking good now move this slice primary button text into the next link delete the word link and if we save that we should get uh ex exactly this so this is is what we're expecting we have our heading we have the subheading we have the body we have the button which yep that's a link to prismic iio we have our image which has no constraint so which is getting big and we have the uh second heading the H2 and the body so all of
    
    our data is coming through we didn't have to console log anything uh we just have it all right there none of it's styled but that's more Tailwind than anything else now it's time to style and we're going to start by creating a really handy utility component that we call bounded so in your components go ahead and create a new file bounded ttsx and we're not going to build this out ourselves we're going to grab this from the components and files so come on over here bounded ttsx I'll walk you through the actual code we're just doing
    
    this for any component where it doesn't it's it's I want you to spend your time learning and some of these components just need to be made but it's not going to teach you a lot right so bounded is just a uh a a couple of elements that have some padding on the sides uh a Max width of what is it like, yeah 12 1280 pixels um just has some good default so that it it centers things it's it's not that wild of a component but we can change what it is it's going to default to a section we can make it a div or a
    
    header or a footer or anything like that and um yeah that's about it we're using clsx to combine um the default classes that we want here with anything that we pass in so C CA SX is great for making one string from a whole bunch of stuff and we'll be using that throughout the course so we have this bounded component now we can use it swap out section for bounded and as you're typing hit enter so that it imports from components bring anything that we have in our project below so like these are from libraries
    
    put those up above and anything that's from us we we like to separate just so that it's clear and uh my auto complete didn't fill in there but now we have this bounded component and you see that everything is centered now so that that that's what we're going for but not that look exactly it's it's more for the padding that we got on the side here next so I'm going to make one big grid component that wraps everything ins side bounded uh we're going to say period grid and if you're not familiar with EMT
    
    it says emit abbreviation we're going to hit Tab and it does it creates a div with class name Grid it's going to save us a lot of time uh I didn't have to type div or class name equals or anything like that just that quick shortcut we're going to be using a good amount of emit in this course now we're going to separate out the top half and the bottom half with their own grid divs so I'm going to move this down just under the prismic link and then grid again and wrap around that bottom part so they each kind of have their own
    
    sections going to add a couple more styles to this top half grid uh it's it's the second one here and say h screen so for uh 100 view height on on the uh yeah the height is the height of your screen Place items Center and it's going to put everything right in the middle there that's what we are expecting we will fix the way it looks now let's add some styles to the bottom half of the Grid or or or the the the bottom grid we say text side and this actually isn't a uh Tailwind class we can do custom classes also but this is
    
    going to be for animating later so be doing that a a good amount relative uh Z we're going to create our own of 80 so to u to make anything that tnd doesn't have built in you want to use these square brackets uh we're going to be using those throughout the course I'll stop saying that um but Tailwind will understand what it is and it will create a new class for you and add that property in so it's very customizable uh we already have grid we height of screen items Center Gap four Gap four and MD so this is a responsive
    
    style so on medium screens and above grid calls 2 and if we hover over that we'll see that on uh 768 pixels or above we are going to have our grid template columns as two so if we hit save there we should see yep here's here's uh our two Colum columns if we inspect we select that grid there we go so first items going into the First Column second column third column sorry sorry back to the First Column uh so we see that our grid is working all right we need one more grid div inside this top half so you should have
    
    grid grid grid going right down but for yeah now that's good um so we're going do auto rows Min and we're going to say Place items Center and text Center so you might be noticing that I am not trying to type really well when I'm writing these CSS or these Tailwind classes I'll go back and do text Center again um I recommend kind of getting good at this like fuzzy search kind of thing so I I hit I did like TX t c n t o CN T I screwed it up you're try again txt CN I I I'm just trying to get enough letters
    
    that it narrows it down and then I hit enter like I I try not to use the hyphens or anything I just use that fuzzy search and it makes you go a lot faster all right so now with prismic Rich Text we can't actually pass a class because prismic Rich Text could return one element or it could return turn 20 it depends on how many like paragraphs and how many other things are in what's coming back so we can't pass a class so the way we style it or one way that we can style It Is by wrapping it in something so we're going to say H1 class
    
    name and I'm just going to close it and inside this H1 class name we're going to style this we going to say hero header and that will be for animating later we can say LG text let's go 13 REM so on really large screens it's going or not really large but on large screens we're going to have pretty big text after that we're going to say uh text 7 XL of course I I said that I don't do dashes now I'm doing it uh font black and uppercase letting bracket 8 and then we are going to say text orange 500 MD for medium uh text brackets n REM
    
    can't really do an autocomplete with the custom ones but you know for everything else it really helps just typing quickly so let's see there we go Liv gutsy now there it's all on one line we will take care of that later but uh that's looking good only thing is we now have an H1 inside of an H1 if you were to inspect it uh that is not good uh semantic HTML so what we're going to do just for right now I'm going to delete this prismic Rich Text uh element and it's still going to yell at us it's going to say whoa whoa whoa I can't
    
    render that that is an object don't let me or like like I I can't render objects so wrap it in parenthesis and we're going to say as text and you see that we get this inut from prismic client go ahead and call that and now this function will take this and return a string so we hit save we should now have just an H1 with Liv gutsy inside we're going to do more fun stuff with this in a little bit but for now that suffices now for subheading we're just going to wrap that in a div and styl it so I want
    
    to say hero. subheading hit tab bring it down and keep styling margin top is 12 so mt2 text 5 XL font keep forgetting hit space font semibold text Sky 950 and large and large and above uh LG text 6 XL if we hit save there we get our nice soda perfected text just that easy next let's go period hero body tab bring it down keep styling so text to XL font normal and text Sky 950 we might not need that font normal but it's not going to hurt just to make sure that it's uh the weight that we want it here
    
    and then for the prismic next link we're actually going to pull that out and create a button component so I'm just going to copy it for now and we're going to go here to our components and say button. TSX now we're going to use our shortcuts again so tsrf C hit enter and beautiful I'm going to paste in what we copied out PR next link we're going to hit period on it and it's saying I don't know what slice is we're going to fix that the best well not the best part but one great thing about nextjs is that we
    
    don't need this import react from react thing anywhere in our project it's automatically going to import it so we can remove that whenever we see it those snipp it's just automatically create them I don't blame them uh so in this type props we're going to uh State some types for our prop so we're going to say button link is a link field and you see that is from prismic IO client so now it knows to expect a link field and you don't have to worry about any of these types it's all handled for us there next we're going to
    
    say button text can either be a string or null we could also just uh do a key text here but that's a bit more obvious like yeah anyway class name this is going to be optional we don't have to pass a class that'll be a string and now down here we actually don't want this whole slice because we're we're not getting that we're just getting uh button link and we need to uh destructure it here so button link button text and class name see how the autocomplete helps us so much once we've defined props I just love it so do it here too
    
    button button text and if we hit save we don't see any change because we uh actually don't have this importing yet so let's go ahead wipe this out let's say button and we're going to add let's see what does it want button link we're going to say that slice. primary and you see how it's it's autocom completing we can see exactly what is on this uh on this object it's really really handy uh button link there we go and we also have button text and that's going to be slice. primary. buttontext and we will pass a class we're going to
    
    say class name I'm going to say hero button and margin top 12 so give us 48 pixels on top and we are not doing anything with that just yet so we don't see any effect because this class name is not being used so let's put it to use let's put some styles on prismic next link prismic next link is a component that we can do styles on so uh or we can like pass a class name on so we're going to use an object for class name and we're going to import clsx and CLS clsx from clsx and this is a function that we're going to call and
    
    we're going to start passing it uh our our like baked in Styles and as as well as class name so we can go ahead and start with uh class name there and it'll pass that along and let's go rounded XEL that's going to give us uh a a border radius nice rounded edges uh BG orange uh try that again o r n G 600 there we go PX five so padding on the left and the right py 4 pading up and down text Center text XL font bold uppercase tracking wide and that's letter spacing so I going to space outut of letters
    
    just a little bit uh text white transition colors I'll explain that in a sec duration 150 hover BG orange 700 BG there we go I keep doing the six 700 there we go and MD text 2XL so if you hit save there we get our button now this is the part that I want to explain transition colors uh let our component know hey uh we're looking for transition property color or background color or border it gives us a a few just kind of baked in it's just a nice short hand from tailwind and then we have our timing function oh see
    
    here's where the prettier plug-in comes so in handy it moved it all the way up here I was scanning here I'm like where did the duration go and it moves it up here because it's like I don't know what the heck this is I I assume this is yours and it is not so as soon as I put that hyphen in there it should shift it uh right put it back there so it's a really handy thing so that you can spot anytime you have a well a mistake so that 150 keeps it into a nice short uh an animation and on Hover we going to
    
    change the background color and once it's uh once it is not medium devices and above we go down to text Excel and now we have our class name here if we comment that out we're going to see that our margin top goes away because that is that is working that that stuff that we're passing in it is being applied on top of the built-in style so is there anything else we need in here I don't think so I think our button is done we're actually not going to use this anywhere else but you can you absolutely can so I I I wanted to
    
    make it um its own component so that you can pop it out and put it in any of the other spots that we're going to be uh you know any of the other slices so the top half is mostly set let's shift down to this bottom half now here's the thing about the prismic next image uh or or these cans like this image in particular uh let's put a class name on there we only want it to show on mobile devices so we need to say on medium and above want it to be hidden so it should just disappear cool and we want the width to be full uh when it
    
    is visible right so that'll work just fine and you can test it out yourself and there they are next we want to do the same thing that we did above so we're going to say H2 period we can start to put some classes on here this way so I'll say text side heading and hit Tab and we've created an H2 with that class on it very handy but this prismic Rich text once again is going to give us an H2 inside of an H2 so we are going to have to work on that in just a second but uh to do the the letter animation we're going to do something
    
    pretty fun I'll show it to you in just a sec let's worry about the styling for now text side heading let's keep going text balance uh that that is going to be a a nice little CSS property if if you're not familiar with it uh we text 6 XL font black uppercase text Sky 950 I guess we could have put this uh text 950 a little bit higher up and not said it so many times but up to you if you want to uh reformat this or forget what the term is sorry my brain only no one thing at once LG text 8xl there we go so once you do
    
    that that's looking really good and we need to wrap this all in a div see how it's it's jumping over to the next column we want this on this side not in the other column so just wrap it in a div wrap the H2 and the prismic text in a div and that's looking a lot better wrap the precin text in another div and we're going to say period text side body uh the default for EMT is a div so if you don't specify what element you want like I did with the H2 it'll just create a div for you so we're going to say
    
    margin top four uh Max width XL text balance text XL I'm trying to there we go font normal and text Sky 950 yeah might might have been better if I did that but oh well not the biggest deal so now like I said in order to uh animate each letter like we do in the final site we need them to be individual elements right now they definitely aren't it is one string inside of an H2 so we need to make uh each letter wrapped by like a span so if we come to the course resource here you can close bounded we already have that next is the
    
    texts splitter. TSX so we're going to copy that and we are going to make that new component uh text splitter. TSX I actually took this from one of my own sites I uh have a site called frontend horse where it's it was a newsletter and all kinds of stuff but anyway um I had this for a fun animation I just kind of uh polished it up for our course and so now I'll I'll walk you through what it does uh once again we have our clsx so that we can pass in a class and combine it with something that we already have uh but
    
    basically it's going to take in some words and those were wait so it takes in text here we go so text if there's no text we return null we're going to split it on spaces so that we get our words we have an array of words now we're going to map over that array of words and we're going to split that at every character so now we have uh an array of every single letter and now we are going to return a span that has the like a a span that that wraps around the word and then inside that span is a span for each
    
    individual character so we now have a a span with split word on it and a a spin inside with split Char or car or however you want to say that on that so we have a lot of um stuff that we can Target with our Gap animations later so if we go ahead and use this text splitter I'm going to swap it out for this so text split L I'm putting that uh on the second heading element we don't do field we do text um yep and so it it's saying whoa whoa whoa I'm expecting a string so we need to use that as text function that we
    
    imported earlier and now it's happy so let's hit save and let's see what happens it moved a little bit right it shifted a little uh we see that each letter now has a span and each word bird well it has a span too right so these are all broken up and we can animate each thing individually it's a nice handy little uh component there we can actually use that same text splitter up here and I'll say text splitter and we'll say text equals and then we will close it and we'll see that Liv gutsy now has that
    
    same split aspect to it we really just want that for the word part we we we don't need um the letters but it's it's not really going to hurt we just make sure that each word is split up and we want to pass it a property that uh text splitter takes where it says word display style uh it could be either inline block or block so this wants to be inline block for each word we want like those sentences but we want these to stack so we're going to say uh display where display style is going to be block
    
    hit save and boom they are stacked now that looks good and we also want to pass it a custom class I will say class name is hero header oh hero header word and we'll use that when we are animating a little bit later also come up to bounded up here and add a class on there that's just hero we'll need that for animating once again all right I have some wonderful news we are about to be doing some Gap Gap is one of my absolute favorite things to play with I've been working with it for years and years now
    
    uh it's just a lot of fun and I'm excited to show it to you walk you through it and if you already know a little bit of it uh hopefully we can get into some deeper stuff with you and so here we have uh our GP docs so let's click the get started and also open up the Gap simple demo because I want to walk you through a a good amount of this just to get your feet wet and then we'll be doing it in our code we're not going to be doing just examples the whole day but let's look at the uh the API here so
    
    we call Gap and then we call a method on Gap like2 or from we send it a Target likebox that's a class of box as it says here and then we pass it a vars object and we say that we want to move on the x-axis by 200 pixels and that's what it's explaining here so so if we run that it moves it over by 200 pixels very nice so once again we have the method the targets and the vars object we can p we can give a whole bunch of stuff in here and there's a whole like you can pretty much edit anything um method
    
    Target vars object there are four types of methods or or tween so we have two from from Two and set two is the most common and a two TW will start at the element's current state that's a that's a very important thing to understand the current state is what we're looking at so like uh this right here is its current state it's just sitting there if we go to it's going to start there and go somewhere else so if we look at two down here I'm going to chle it so it starts at its current state and it goes
    
    to what we pass it right so it's say hey wherever you are move over 40 and change your color to Blue and and it does that from is kind of the opposite it animates from the values that we're defining and ends at the element's current state when we're when we're animating things in that's usually what we're going to do we want this to be you know start invisible so it's from invisible to its current state which is visible so as you can see with from it's going to start blue and then it's going to go to its default or
    
    or its current state so from this to to what whatever you are from 2 is both sides of that equation we can pass two objects with a from Two and we can say hey go from blue to green and you know move on the x-axis and then set is really handy it is essentially an instant two so it just says Hey I want you set as blue and 40 uh I I I think for this example it's a it's delayed but that kind of like represents um JavaScript loading in so Ju Just know that like on page load it's not really going to be instantaneous right there's going
    
    to be that little half beat so we can plan around that um and then we have our targets so we can say a class or an ID like box we can use complex CSS selectors let me zoom in a little bit more uh like section and then child of section as box we can pass a variable we're going to be doing lots of variables when we're doing our 3 JS stuff because we're going to be using refs and just yeah you'll see lots lots of variables will come up and you can even do an array of elements so we want to move all square or sorry square and
    
    circle uh by 200 so it's really really powerful and you can do rotations Etc so that's good for the getting started docs let's check out this example uh code pen that I've made for us so it just has a square and a circle just basic CSS to position them here now you can go ahead and uncomment the code to play with it yourself but we're just going to run through it so this will move it 100 over you've seen that in the previous example super now if we do this one GP 2 square we have a couple more properties here in
    
    the vars object rotate and duration two so these are both going to happen at the same time and it's going to be twice as slow because the default duration for all tween is 1 second so both things happened and it was slower next we are adding an ease and this is going to give it uh the the name is a hint this ease gives it a cool little rubber band effect and it can add a lot of personality to your animations so the the rest stay the same we just add it an ease here we are removing the ease but we are doing a from two so it's
    
    going to from opacity Zer and y50 and just note we're animating the circle now uh that means it's going to be invisible and y50 is actually going down so uh this is the x-axis going left to right so as we move to the right it we're increasing in value and the y- axis is up and down and like up here is zero and so as we increase in value we're actually traveling down the page I know it sounds counterintuitive but just think of it like uh percentage of scrolling down the page right so you start at the top that's zero and you go
    
    down so it's going to start from down and move up to where it is and become opacity one we don't actually need a from 2 here uh because this is its current state so it's kind of the default doesn't really need to be here but just showing you because so that you can kind of see the the the gist of we can Define both sides of an animation there you go last but definitely not least we have run timeline uh timelines are defined like this you say gsap timeline we call that function and we set it to a
    
    variable and we can pass it an object with things like number of times we wanted to repeat negative 1 is infinite uh repeat delays uh defaults for each of these a whole bunch of stuff and you can see we have a few tween that we are um stacking I guess or or that's happening one after another the benefit of a timeline over a regular gap. two you might be wondering like why am why would I do this is that with these if I have this uncommented and this uncommented it's really hard for me to have this run
    
    immediately after this and like coordinate especially as you add more and more and more and more animations it's really hard to coordinate things but a timeline takes care of that for you this will run and then when it's finished this will run and then when it's finished this will run Etc so if we run timeline you'll see uh let me just move it over so you can see the VAR objects a little bit clearer you'll see it's going to run it'll repeat uh infinitely but each repeat will delay by 3 seconds so that's just going to kind
    
    of happen in the background and we have a nice little bounce out ease there so that is the beauty of a timeline is that it handles all that sequencing for us so that's the quick crash course on Gap let's start start using it and to start using it we need to well install it that's the first step right so uh kill your Dev server and we're going to say npmi Gap and then at Gap react we're installing two packages uh installing Gap and GAP react Gap react is this wonderful newer it's yeah it's pretty
    
    new uh replacement for use effect and use layout effect using gap before in react could could be a little bit tricky you could find some foot guns that would really uh mess you up but now it is really really easy um yeah just can't say say enough about that um all of our animations will run inside used gsap unless they run inside like an onclick function so we're be using this a bunch and now we're going to animate the top half of our uh hero section so let's go ahead and import our gsap up here we
    
    need to import Gap from gsap and import uh use Gap from at Gap react then underneath our Imports we need to say gap. register plugin and we're going to pass it use gsap anytime anytime we are using a plugin like use Gap or like scroll trigger we want to let Gap know about it and now we want to use that use Gap down here so come on in your hero open it up at the top here and say use Gap and we call that as a function but we pass it an arrow function and inside that Arrow function we're going to create our first
    
    timeline so we're going to say const intro timeline or TL equals gap. timeline call that as a function now intro timeline because we're going to have two timelines I call anything that just like when when you load page and it animates in it's like the introduction that's our intro timeline so uh now that we've defined our intro timeline we can go ahead and say intro TL Dot and here's here's what we want to do um because the JavaScript is going to take like you know a second or whatever to load in if we do a from we're going to
    
    get some ugliness but let's do it first to start with and then hopefully we'll be able to see like uh that's not what we want so let's go from parenthesis period hero header word and then pass it a vars object just like that and we're going to say scale is three and it's going to be going from opacity zero so remember this is from and it's going to go to what you see right now so we're starting real big and invisible so if we save that and we reload I got I killed my my Dev server I didn't bring it back to
    
    life though there we go let's bring it back rise there we go so you did you see that it loaded in and then it got big and disappeared and came back in so you see that that flicker we don't want that so what we want to do is on hero on our bounded component right next to Hero we're going to say opacity zero and we're just going to hide everything and what we're going to do as soon as this intro timeline is ready to run we're going to call set and we're going to bring hero back and we're going to pass it
    
    avars object of opacity one and that just the reason we're doing that is like okay this CSS gets put on there before it gets it gets affected first and then our JavaScript loads in and then it brings hero back and the from is already starting to run so we we won't see that flicker anymore now that we have this set up so see how there's no flicker it always comes in I I would rather have the the blank yellow than have it there and then not and then there again it's just so much better so once again we have intro. set and you
    
    might be wondering how am I doing this do from I'm chaining it onto the back of the dot set as long as you don't have a semicolon there see how that throws an error have a semicolon we can chain these so we have our hero header word animating in but I don't really love the way it's looking um it's just kind of coming in it's kind of like easing in that's not what I want I want to come in with like a bit of a slam all right so let's see over here in our uh notion dock find this Gap ease visualizer this is one of the key tools
    
    for all gep developers if you're going to be doing lots of animations with gap and I hope you are you're going to be using this page all the time to really like fine-tune what you're looking for so we want it to like Slam in at the end so we are looking for maybe like a power four but see how it like it's just like gently setting it down like it comes in fast I'll do it again comes in Fast and then the last bit it just takes forever I want the opposite of that so right now it's out let's make it in really slow at
    
    first and then Wham it's going to like slam down to the ground um duration 2.5 let's bring it down to one watch how it just goes so that's what we want we want a power four in and going to copy that and paste that right in here and if I save that and go back there we go just slams down a little bit more next uh it came in a little bit fast so delay I'm GNA say 0 three and and by fast I mean it came in too soon I feel like so I'm delaying it by. 3 seconds there we go I want I want to make sure the user sees that like
    
    something isn't there and then it is right like if if they blink it happens too soon it's not going to be great and last but not least this is such a powerful feature and it couldn't be easier uh why does it keep moving things around I don't like the way it's moving things but oh well all right um sorry this is such a powerful feature this is called St stagger and we just going to say stagger one and I'll let you see what it does live gsy it staggered each element that it was animating by one second you
    
    can change this to any uh value you want that's going to be in seconds stagger also can be an object it can be really complex you can give it lots of of little details but for this we just want to stagger each hero header word cuz remember this uh me hit enter so we can see it at least there are two elements that match this description so Gap is receiving an array of elements and that that array contains Liv and then gutsy so it's going to animate the first wait a second then animate the second so
    
    stagger makes really fancy animations dead simple um do we have any more yeah let's animate the other elements here so I'm going to remove that semicolon I'm going to say period and we want to do a from and then uh do hero. subheading and pass of ours object opacity zero Y is 30 remember it's going to be down going to start from underneath and delay it's going to be8 um and actually we could do that you know what let's do that delay in a different way we're going to do it with the position parameter we're going to uh
    
    pass that right here I'm going to say plus equals 8 so whatever value or like at whatever time you were going to um start at instead wait a little bit longer wait Wait Almost a second longer so plus equals point8 let's see how that looks let me reload live gutsy wait a little bit there you go that's really really nice so this position parameter is going to be so handy we we don't just pass strings we can tell uh our timelines exactly where we want them to be running so or or or or yeah when when we we want
    
    each step here to run so we have the hero subheading now we need from hero the do hero body and I will basically copy this opacity 0 y30 but change the y30 to a 10 and we don't need to position parameters just going to go right after and then we're going to do another Dot from for the button actually let me just copy just copy this whole thing because I think that's pretty much what we want want hero button opacity zero y10 and duration is6 this one's one's going to be a little bit faster to get that
    
    button in there make it stand out a little bit a little bit so Liv gutsy affected that that shop now there you go that is our timeline folks you just made your first potentially uh gsap timeline first of the course at least that's that's what I meant so uh congratulations either way this is super cool and now we have a nice little intro and next we're going to be doing a scroll trigger animation and that's just gonna knock your socks off I think so the best place to start is always in the dock so we're going to head to where is
    
    it scroll trigger right at the bottom and let's make these a little bit bigger scroll trigger we have a simple example and an advanced example so for the simple example we can see that you can add scroll trigger to just a regular gsap to Tween so we can say uh dobox when we have dobox enter the viewport we want X to move over so this is how you can do things like uh um you know those those animations like as you're scrolling down things you know fade in or whatever uh you can just do it by passing scroll trigger right on a simple
    
    tween not not much here but it's it's easy now here's an advanced example where you have lots of different properties that you can be adding to your scroll trigger and you can add it on a timeline that's what we're going to be doing here so we pass scroll trigger uh and trigger. container so for us our trigger is going to be the entirety of this hero right so we we want our animation to start as soon as we're here and then this will like scrub through our animation and it'll end when we get to the bottom of our hero and that's
    
    exactly what we are going to set here with start so top top so this top corresponds to the top of the trigger it's going to be uh the the hero section itself hits the top of the viewport if you don't know the viewport is essentially your window it's that whole thing so that will be the start that we use but we can use other things like we can use uh values so end we could set to uh plus equals 500 and that just basically means uh that the animation will end after scrolling 500 pixels past where it began um we can have some
    
    smooth scrubbing so we can like kind of like slow down and or or it can be IM immediate totally up to you a scrub of at least one usually feels kind of nice um and then there's some other things uh we're going to use pin a little bit later and this essentially just makes it sticky to your window while you're like scrolling through that element and then once you're at the bottom it it lets go automatically Gap uh scroll trigger is just like so stink and smart so now that we see kind of an example of the
    
    settings let's make our uh scroll trigger timeline so oh first we need to import scroll trigger right so we're going to say import bracket scroll trigger from GP scroll trigger not from all or trial Gap scroll trigger just like that copy scroll trigger and paste it in your register plugin and then down here we're going to make a little bit of space and I'm going to say const scroll TL equals gap. timeline and inside here we're not just going to leave it blank we're going to open it up with an object and inside that object I
    
    want to say scroll trigger and pass that an object as well we are going to specify the trigger just like they do here and we're going to say trigger it's going to be period hero remember that is the entirety of this component right now oh well yeah it's it's it's our our entire slice but right now it's also the entire website because that's all we have but it won't always be the start of this animation is going to be top top when the top of the trigger hits the top of the viewport and the end is going to be kind of the same
    
    but it's be the bottom bottom when the bottom of the trigger hits the bottom of the viewport uh we're going to say scrub so that we uh have a nice little delay so that it it takes time to catch up to to to where the scroll bar is we're going to set it at 1.5 a little bit slower a little bit more like momentum me and then we're going to use the this great feature that makes it so much easier to understand called markers and we're not going to ship with these because they look kind of you know they're it's kind of like having console
    
    logs um but we'll see that we have these markers over here so the start that part is the start of the trigger right you see how we have start and then end that's our triggers start and end and scroller start scroller and is our viewport our viewport is our scroller our trigger is our hero that's what we set it to you can have a different scroller but typically it's going to be your your viewport I've I've never had to set a different scroller for horizontal scrolling you do it sometimes but you want to worry about it for this
    
    course so the first thing we want to do is change the background color on scroll that's what we're going to be adding first to our scroll timeline so we're going to say scroll uh TL and then we're actually going to use a from two uh we're going to rarely use these but I'll explain why we want to do that uh well I'll say it right now uh it's because how often we're going to be changing the body color in this project so we we want to make sure that it knows where it's coming from and where it's going not just like relying on existing
    
    state so we're going to say from to and inside there we're going to say body No period or anything cuz just the the body just is body and we need to pass it two objects so we're going to say background color of quotes hash fde 047 and is a that's essentially this yellow color or not essentially it is that yellow color and then for this second object open that up we're going to say background color of hash uh D9 f99d it's going to be that light green that you saw in the uh live example and now we want to use a property that we're
    
    not going to use I think in the in the rest of the project but it's going to be overwrite uh Auto that's actually the only property that you can choose for overwrite uh but basically it says like hey if there's other animations and they try to like finish after this one and override it no no no this one's going to win tell everyone else to to back off basically you don't have to worry about too much but it's just going to it's going to help with this animation and then uh we don't want it to happen right away I'll
    
    I I'll show you what it looks like if we just run it right now so didn't mean to save that save that and reloading there now watch what happens if I start scrolling I'm not even off this yet it's already pretty green and I don't like the green and the the orange like mixing so strongly like that I I don't want it to animate the entire time so afterwards I'm going to add a a position parameter of one so this will start in the duration of the timeline at 1 second so it's going to start about halfway
    
    down live gutsy so about halfway down that's when it triggers see because this now pushes this animation uh 1 second forward and remember our default duration is 1 second so we now have a total of two seconds on this scroll timeline seconds with scroll trigger is a little bit weird because this isn't really seconds anymore um it's it's you like like the scroll bar is what's playing the animation it's not time so think of seconds in in scroll uh scroll animations as like fractions more like so if you have a
    
    whole timeline that adds up to four seconds a 1 second animation will play at 25% of the way down the scroll you'll you'll eventually wrap your head around it when you work with it more I know it's a little bit confusing um but yeah we're basically saying hey wait a second before you play and then play this one animation and that's the only animation we have so far so our whole thing is two seconds and we're saying wait halfway essentially all right I'll stop explaining that and uh we we'll we'll
    
    continue to move and and kind of get the hang of it so now now that we have the background going we we want a from a from and we want to pass this uh one of the more you know not not complex CSS selectors but uh the most complex yet so going to say text uh side side heading and then just space.it Char so just like with CSS where this would mean that we are uh targeting split chars that are children so Somewhere In The Descendant tree uh of text side heading so anything that matches that description we're we we
    
    want to make an array out of it and we want to do this stuff to it so we're going to say scale is 1.3 Y is 40 rotate is -25 opacity is zero stagger we're going to stagger each letter yeah sorry I I don't think I clarified split Char once again is each letter so we're targeting one letter at a time so we're getting an array of all the letters we're going to stagger the animations between each letter by 0.1 seconds we want uh an ease of back you can see that it's typed so we get this nice little helper back out and we can
    
    add a function of that or or or or pass out a value we can say three and we'll say ation is 0.5 you want this to be pretty Snappy um but if you want to check out the back out you can check out the ease and see let's do it real quick back out going to go a little bit past it's not going to be that fast but a little bit past and then come back so that's what we're looking for and before we we save and do that let's just add the uh the next one from we'll do do text side body and then we're going to pass that
    
    the object or the vars object we say Y is 20 and opacity is zero we're using that same kind of uh effect of fading in from the bottom so now let's scroll up reload live gutsy but we can go ahead and start scrolling and there we go try all you have this cool little jumbly effect see how it's like you see how the the the L like o overshoots a little bit and then then it comes back whoop it's nice a back ease is really fancy well it's not fancy but it's fun it's really fun uh yeah you get some good eases out
    
    there it's it can be a good time and just like that we've created two timelines one that happens as soon as we load in and then a second one that we control with our scroll well done uh this is huge and next let's see what we got next for us uh yeah we are good there we're going to be doing 3js now get pumped yes yes it is indeed 3js time and when I say 3js in a react project I'm really talking about react 3 fiber which is 3js it is just a react renderer for 3js this is a phenomenal Library you can build your
    
    scene declaratively with reusable self-contained components that react to state are readily aail readily interactive and can participate in reacts ecosystem it is so so so so good there's no downside it's not slower um it's just wonderful and and the team behind it is incredible you you're going to see that we uh are going to lean on not just 3js or sorry not just react 3 fiber itself but some of the many many many tools that they've built for this ecosystem this is so so good and they've created things that are going to make
    
    our project look amazing with such little effort so we've got a few things to install so uh come to these docs uh once again that is react 3 fiber also open up uh dry and r3f perf we're going to be installing both of those as well and we're going to open our terminal end it and uh here you have dry while while uh the first one installs you can come and do npm install react 3 dry just like that and then the last one uh they use yarn in their install thing so just type npm i h d r3f p RF and that's just going to be a
    
    little uh performance component that lets us oh no I didn't want to do that okay an image it's not an image uh but it's just going to give us a little like 60 frames per second thing at the top just so we can make sure that our animation is performant and that we're not you know it's it's not choppy so let's start our Dev server back up again make sure that you have uh all three of these things installed well not all three but like all three commands run right and now let's set up a basic scene to really get the hang of
    
    this so we're going to add it right in well our our project you'll see uh so we are going to start by creating a view canvas component we're going to render a box to this canvas so in components make a new file called view canvas. TSX and we're going to use our keyboard shortcut trying to close the sidebar there we go uh our our uh snippet of T srfc hit Tab and we get this view canvas uh at the very beginning we want to make this a use client uh oh oh first I just want to say uh I'm not sure if I said it
    
    already but you can delete import react from nextjs projects uh it does it automatically uh so we're going to say use client and now this will only run on the client it it it will know that it has to run on the client um then we want to replace this div with canvas and this is something that we're getting from react 3 fiber so canvas in 3js is um one of the many things that you have to set up you you have a canvas that you then can like paint to and you also need a camera and you need just a whole bunch of like boiler plate setup
    
    in regular JavaScript 3js and I'm telling you you are going to write so much less code by using react 3 fiber it's it he's uh the the person who's created it um has created or has added so many easy things to to help us get started so I'll stop gushing you'll see what I mean um now here's the thing once we have this canvas we actually uh can use some really special elements inside that that we can't use outside of the canvas so uh if we delete view canvas uh the text canvas is going to yell us and
    
    say yo I I want some children like give me something to render it's it's mandatory so we're actually going to use one of those elements so say mesh just like that and see now it's happy it's like okay I've I've got children thank you uh and a mesh is basically any kind of geometry I thought I had a note on it there uh yeah a mesh is is sorry is an like a 3D object forget that I said any kind of geometry because that's actually uh one of the two things that it needs a mesh is like a 3D object and it needs two things
    
    geometry and material so geometry is essentially like the HTML of a mesh so box geometry so this is the structure so we're telling it hey I want your structure to be a box like a cube or you know something like that uh make yourself into a box and then we need to give it a material to tell it how it's going to look so we're going to say mesh standard material just like that and if you try to do use these elements anywhere else uh it's it's not going to make any sense or or or like it it will not work uh but the fact that we're
    
    inside canvas it like gives it context that these can be added just like this we're not importing them right they're just available so now that we have that um we want to put this view canvas into our layout so it shows up on our page so layout we're going to write after children inside main we're going to put view canvas import that make sure that's it's importing yep with the at components perfect and go ahead and hit save and is our yeah it's running let's see see how it goes so at the very bottom we
    
    have this little black Square now uh just real quick we can turn off the markers in this can be a little bit annoying seeing these like end and whatever all the time so uh it's helpful we'll we'll turn it back on for more scroll animations that we do but we don't need it on all the time so back to the view canvas why do we have like what looks like a 10 pixel div well a couple reasons one uh scenes need light so if we go ahead and we say ambient light and we're going to give it an intensity of two
    
    we see that square already start to lighten up let's actually give it a color so in mesh standard material say color and we're just going to say hot pink like that and we see that we are seeing some hot pink now right now the canvas is just kind of occupying some space down here uh but we want it to really exist over everything we do so let's add some Styles directly to our canvas so we're going to say style and we're going to pass it in object so double double curly brackets and I'm going to say position we're going to say
    
    fixed so it stays over top everything say top is zero left is NE is 50% n and quotes 50% transform is going to be translate x parentheses NE 50% end parenthesis or close parenthesis uh overflow is going to be hidden we've got pointer events none cuz we want to be able to click through if this is covering everything and we we and it's catching our pointer events then we can't click buttons or links or anything like that uh and last but not least we want Z index is 30 so it's going to be kind of in the middle
    
    of things where this is a the index of 80 so it's going to be above uh our canvas but we can put things underneath it so sort of in the middle all right so if we save that now we see that it's working exactly how we expected it's going behind this text but on top of that text and yes it is fixed right in the center and because it takes up the full screen it got bigger so it seems like the cube got larger but in actuality it's kind of like we we went from watching something on an iPhone to a big screen TV right it's just this the
    
    screen got bigger but it still looks like it's just a div like like I'm I'm not doing 3D or at least it doesn't feel like it so on the mesh let's add a rotation and this is going to take an array so curly braces and then an array so we're going to say uh we need to say the X Y and Z coordinate or attributes I guess cuz coordinates and and rotation don't make sense uh we're going to say 0. five comma five comma zero now here's the thing with rotation in 3js we are talking about radians you might not be
    
    familiar with radians I wasn't before I did 3js and blender and stuff um it is a little bit different so you are used to sorry you you you may be used to degrees if if you're like me uh 3 360° makes one full rotation uh with radians it's uh math. Pi * 2 or 2 pi if you know 2 pi if you are you know just mathematically inclined so that is what adds up to 360° if we just do 0. five it's not really like playing with uh math.pi it's not going to be uh exact or anything but I don't care right now it's it's it's
    
    completely fine it's it's it's it's a valid rotation but it's easier to go like 90° or 180° if you're using math.pi and we will in the future but for right now I just want to see that this thing is actually 3D and look we're seeing it like at an angle now that's a lot better but because we're only using an ambient light ambient lights just uh light everything the same amount from all sides so we're not getting any kind of like highlight up top and Shadow on the side and right like we're not seeing any
    
    depth here it's just a solid color so under the ambient light let's create a spotlight and we're going to say intensity is going to be three and let's give it a position and this is coordinates uh the array will be one comma one comma one just throw it in there doesn't really matter and there we go we're seeing some actual uh definition in our shape like we had the Highlight there little bit of Shadow little bit of mid right that's what we're talking about that's what we're talking about uh so now that's
    
    definitely a 3D object I can confirm but now what if we want this over here right uh let's change the position of mesh so position let's add an array where we go uh 1 comma 0 comma 0 because remember we want to move on the x axis right now it's actually at its origin unlike with our CSS where the uh like that's 0 this is 0 0 for 3js so it's right at the start we want to move it on the x- axis to the right so we give it a positive number and it moved a little bit all right that's that's one and for what
    
    we're doing right now uh that is fine because when we are using react 3 fiber it does something for us that we would have to do uh manually in 3js we would we we would have to create a camera every single time 3GS has this concept where like you can't actually render anything thing if there's no camera taking you know a picture or or you know like like recording what's coming through with 3js or sorry with with react 3 fiber here they'd give you a default perspective camera and perspective cameras allow you to see
    
    perspective you can change to an orthogonal camera but we're not doing that for this course so I'm not going to get into it um but we can still edit the camera and pass it some properties that just change the defaults so if you're familiar with like uh cell phones that have like wideangle lenses and telephoto lenses and like if if your iPhone or whatever or your you know Android has multiple lenses you are familiar with um like a field of vision or field of view I think forget which it is but basically
    
    we want to change that to 30 so pass fv30 and we will see if we refresh that that's a big difference we got a lot closer because of changing this if we want to have like a telephoto kind of feel we can you know start to back it up and yeah so we don't want that though let's go 30 and can see that that is honestly kind of cool if if we were selling pink cubes I would ship this site I would but we are not sadly uh we want to add a couple more things to the canvas while we're setting it up though we want to say Shadows and now it will
    
    just uh play nicely with shadows if if you want to use any of those and then we want to hit DPR and that is the device pixel sorry device pixel ratio and that is um going to be between 1 and 1.5 um that's basically like when you have a retina a retina display uh we we want it to have be a bit nicer a bit more dense in terms of the pixels that it's rendering uh but if you're always rendering like really high pixel amounts and you don't provide like a lower fallback it could be really taxing on um some devices so this is a
    
    pretty good standard right there and we want to have GL I think that just stands for like webgl uh I'm going to pass anti-alias is true that just prevents any jagged lines from uh forming on things especially that are at an angle so uh there's a lot more boilerplate in a typical 3js project uh this is this is way way way way nicer in in my opinion uh but we don't want to render boxes right so let's get into our soda cans all right it's soda can time so let's walk through uh the process that we go through to
    
    create 3D models and kind of like bring them in you can go to places like sketch Fab or there's there's tons of 3D model places on the internet this can I modeled and uh designed the labels for and everything because I wanted to give you kind of like a uh a a unique thing right like like like this is something that this course that only this course has and so let's open the figma file I should still have access to this right I have to do that again all right whatever so we have that there so we have the
    
    figma file I'll open that but also in your assets folder if you see blender uh you don't have to do this but you can uh if you already have blender installed you can go ahead and open it you don't have to download blender for this course uh we're I'm I'm not going to do a a blender tutorial but I'm just going to touch on briefly so that you're like not completely lost in like how the heck are we are we doing this and everything right opening this blender file and here is our can in blender um like I said not going to
    
    teach on on modeling but if you get a blender file or if you've modeled something from a tutorial there's lots of great stuff on YouTube you can come into blender uh and select it and you can go to file export gltf 2.0 so hit that and then you want to go and make sure it's a gltf and then go through and include things like the the selected objects you want to make sure that uh we are compressing it and I think that's pretty much all we need um transform no we don't need that there's one more thing I want to
    
    apply transforms um yeah sorry apply modifiers make sure that's checked and then yeah you can go ahead and Export it I've already done that so I'm not going to do it but yeah that's that's like step one of of getting something from blender into your react 3 fiber thing also make sure it's not super poly heavy because uh the the more vertices it has the heavier it's going to be we're not going to save that um but then we get this soda can bin and sodac can. gltf yours should actually be in models um they're the same if if I
    
    included the other one too uh and what you do then is you want to to where is it you want to uh go to this gltf to react 3 fiber converter this is a wonderful tool remember how I said the the people who make um react 3 fiber have all these great tools this is one of them uh so we can drop the sodacan dobin and the sodac can. gtf right into this page and look it makes this so easy it pops it right in there and it creates this react component for us and it turns uh the different parts of that can like
    
    I I had this part is the like actual label this part is I think the the bottom and and also the like metallic top and then right here that's the tab and I can tell because it says tab this a cylinder one and so on um yeah this being created for you is really really handy uh I went through this process and then I took this and I made some modifications to it and we're going to be using that one but I just wanted to show you the the process that you go through and finally uh just want to encourage you to
    
    use this as a resource or or or like like please make this yours if you rip off the fizzy logo on all of these and put a Drizzy logo or whatever and and make it your soda go for it this is like you have full permission to just have have fun with this add your own uh flavors I don't care right have fun or put Coke labels on this if you want it to look like a Coke site I don't know but um I wanted to give you access to all of these these are just renders so you can make images like this for the the beginning but yeah have fun and then
    
    that's the favicon for uh as an SVG but we already have that so you shouldn't need this too much but to make it available so oh yeah that's one thing I I did want to say about the blender file if you wanted to like scale it in and uh make it into like a Red Bull can or something obviously you have to tweak some stuff but like if you want to make this a very different kind of brand right like a an energy drink or something that's one reason why I gave you the can so you could uh I don't know make with it what you will normally we
    
    would copy this out but we're going to close that actually and instead we are going going to copy this soda can. TSX it's pretty much the same thing but we have a lot of uh additional lines of code so go into components new file sodac can. TSX hit enter and paste this in let's take a look at it um first we see that it is a use client file and we have these flavor textures that we are mapping to paths so we have lemon lime and we're saying that lemon lime is in this location right now it's not though we
    
    don't have anything in public SL labels because we only have the fonts folder so go ahead right click on public and choose new folder and say labels and you know what we're going to do we're going to give it some labels so go ahead back and go to your labels folder grab all of these and drag these into the label spot right there or I guess I just grab Cherry what is happening okay there we go finally did it all right cool now we have uh those images those textures at the spot that we wanted them that's much more help
    
    helpful and so yeah we we are preloading the gltf which is ATU sodin gtf but no it's not right because we haven't brought that in either so we want to add that gltf file so come back and we go to models and just like we dragged the bin and the gltf into that loader you want to drag both let's see if I can do it I got them both into public just like that and we should see sodacan bin sodacan gtf and so now when this when the soda can.t f is referenced it's it's going to work um and then that actually is what
    
    references the bin so you don't have to worry about that um yeah what else here so if we come down here remember I said that um this part is the label you can see that indeed it is the label so we we've got several um materials going on here and the metal one where's that the metal one's up here because we're we're using it twice so I didn't want to set it twice uh has a little bit of roughness because aluminum if we look at the final version aluminum let's bring this into view a little bit more isn't like a a mirror surface so if
    
    you put zero for for roughness that would be like a perfect Mirror Has a little bit of of of roughness to it um but the metalness is 100% so we put one and then this color is just something that I kind of eyeballed this is like close s of white than it is a black but if you want to lighten it up or darken it you can go in either of those directions uh what else yeah so we we've added that metal material to the tab as well as the metal Parts there and then here we have our uh label and has less roughness it's it's kind of smooth and
    
    not fully metal but a little bit metal right so you can tweak these numbers and you know make yours if if if you want it to be paper turn the metalness to zero and the roughness all the way up so you can make it feel however you want is there anything else you want to look at uh label is labels. Flavor we are taking in flavor so this is a prop that uh I think we type yeah so key of type of flavor texture so this is a nice little way to type something that already has some value so key of type of textures
    
    we're pulling the keys and adding that to flavor so Flavor now knows that it can only be lemon lime grape black cherry Etc and we are going to take that as a prop for soda can gets a flavor it gets a scale and let's see what else there's just a a small thing there that you you don't have to worry about and yeah that's kind of it so let's move off a soda can but let's pull it into our view canvas we can where is so underneath our mesh let's go ahead let's go back to to our website let's go ahead and say soda
    
    can and doesn't need props so we should be able just import it and there it is it's kind of like uh poking through the cube so we can get rid of the cube and you're probably wondering uh what the heck's going on like those look kind of cool this does not it's because this lighting kind of sucks right um one thing with if you ever done photography you know that uh a lot of it is just having a really darn good light and right now uh having an ambient light and a spotlight like this just ain't it so
    
    we could either sit here and tweak a bunch of lights and try to get it just right or we're going to use a lazy hack because that's what I really want to do uh in public let's go ahead and create a new folder I'm going to say HDR hit enter and then in our assets back here you'll see hdrs and if you open one of these up or just hit space if you're on a Mac you'll see that they are super super tiny uh these typically are like really massive files I think these started out as like four megabytes each you can shrink these
    
    down so much for the web uh and you really don't notice the difference I I could not tell the difference between the 5 megabyte one and this like postage stamp one so grab both of these if you can there we go I got them both and pull it into the HDR folder and now we have field and Lobby and these are going to load so quickly it's not going to hurt our performance um for loading our site so these hdrs basically what we're going to do is we're going to tell 3js or react 3 fiber or however you want to put
    
    it uh that we want to pretend like our object is in that environment that it's in that field that it's in that Lobby so we're going to get rid of this ambient light in the spotlight and we're going to use something from dry so if we uh come over here to the pomanders drive and we search for environment en EnV i r o n and tap that so we have some defaults we we have uh yeah so these are the presets don't use these these each come in at like three megabytes it's kind of wild how big those are so instead uh we are going to pass it files
    
    so underneath the soda can uh we're going to say environment and we're going to say files equals I keep hitting backspace equals man fingers are missing uh HDR lobby. HDR and then close that and we'll check that out in a sec I just realized I didn't really introduce you to what dry is let me pop it out for a second uh a growing collection of useful helpers and fully functional readymade abstractions I can't stress enough that you should really like scroll through this it will give you ideas there is so
    
    much cool stuff in here um that just makes our lives a lot easier you don't have to do so much stuff from scratch they uh they just give you some really cool things and uh a couple of the the things that that that we get from this is going to be absolute game changers from us we're going to be using a lot of uh things from dry just yeah we we we'll get into it but the these are are wonderful helpers that go along with react 3 fiber so this environment is one of them so we pointed it to the files
    
    now let's see how our soda can looks pretty darn good much better than it did a second ago right now uh I want to juice it up a little bit I want it to be a little bit brighter so I'm going to say environment intensity it's actually going to be 1.5 so increase that a little bit that's looking a lot better and that was just like I I didn't need to get a degree in lighting right so while our can looks uh cool looks great um it still looks like a PNG like it's still indistinguishable from just a picture right we might as well use a
    
    picture if we're going to keep it like that so let's make it move around with Dr float component I love this thing I overuse it for sure but it's it's cool I'm sorry it's cool it's one of those things where I'm just going to keep spamming it until uh the day I die basically so we can come in right here and we're going to uh say float and we want to import it from react 3 dry just like that and I'm going to wrap it around soda can let's just see what it does as a default so it's a slow kind of float you see how it's just moving a
    
    little bit pretty cool already an improvement if we check the docks for dry uh we look at float we see that we have a few properties here I'm just going to go ahead and copy these and paste these inside float and just see how that changes it I'm going to come here and see it changes it pretty substantially and that it's gone whoa It's coming back so this floating range is our first culprit and that we need to scale that back a little bit because that's that's a pretty big range for how zoomed in we are so let's
    
    say uh between negative .1 and uh 0.1 so now it's just going to it's going to float up a little bit down a little bit um float intensity that is a multiplier for floating range so if we add you know make that five that'll be just more dramatic uh rotation intensity is pretty cool if you want to make it really just go all kinds of wobbly you can do that but we don't want it to be super W because you know we want the brand to be visible for the most part it doesn't really help if we're just seeing
    
    like the bottom of the can for most of it and then animation speed kind of speaks for itself right where it's like how Wild and fast is this thing going right so if you wanted to just be off the rails like if you want to shake your can go for it um but then don't open it around me please um great so we have a few fun things that we can kind of play with here but we're going to be using soda cans left and right folks uh I don't want to be you know playing with these uh I I I I want to abstract this
    
    out I I don't want to have to put these properties all over the place this is a perfect use for a component so I'm going to copy this and we're going to create a new component called floating can. TSX and then in here we are going to use our uh Snippets but wait wait wait we're going to use it for an arrow function so stay with me this one's long TS r a f c e typescript react Arrow function export component yes that is a thing um the reason why we want an arrow function is because we're going to need to accept a
    
    ref for this so we're going to use the forward ref uh hook or function I'm I think it's a function I don't know um so that that's why we specifically went for that here so before we paste in uh I guess we can paste it in but it's not going to be happy uh uh we paste that float in we will import it from dry and we will import this soda can from hey what does the do soda can why do you do the do soda can at SL components so much better uh so we don't want divs around these objects because we're going to be rendering this inside
    
    canvas and canvas doesn't know what the heck a div is don't give it a div that's not what it eats so we're going to say group instead and you might be like what's a group honestly kind of like a div like the way that we use div sometimes for moving several things around you can kind of do that with a group like you can move its children uh just by wrapping around it it's it's a similar concept to groups in svgs um so it's going to be really handy it like it it's not a visible thing it's just more for like collecting uh a bunch
    
    of items right so you need to uh get rid of this well we don't have to but get rid of this uh react component and make this a use client because this is definitely going to need some JavaScript on the client side uh and we need to I guess I could have kept the uh react import but we're going to come down here and say forward ref and just hit enter to import that from react we can move that up and here we need to type this so uh actually yeah yeah let's type it first um and we're in here we're going to say
    
    group and we have a few options import the one from three just three should come in like that I'm going to say comma floating can props which we haven't defined yet oh we're going to change this here we go change props to floating can props just it's just more specific it's a little bit better um then wrap this in another set of parentheses and probably get a little bit hairy for you um and then if your whole thing turned red like that believe it or not that's a good sign um so forward ref angle
    
    brackets group floating can props we changed floating can props here um and we have these two parentheses props are props H oh wait what's yeah we need to change that too change that um and then we close the parenthesis out here this isn't yelling about anything in there it's yelling because it doesn't have a name doesn't know what to call itself when you use a forward ref you essentially are like covering over the component so it loses its display name and it makes debugging and everything a lot harder so um they
    
    throw a warning or an error like I'm not sure um when that happens so now we just need to come down here and say floating can dot nope I didn't want it as a there we go floating can Dot display name equals floating can just like that might seem a little silly or redundant or whatever but that's that's just what happens when you have to forward a ref so uh yeah now we'll be able to pass a ref in and like move these things around from a parent component it's going to be a a real game Cher for our animations in
    
    some of these slices so because this component is such a uh well a well-used part of the site there it is there it is there it is there it is right these are all floating cans um we are going to have a bunch of props so that it's it's nice and versatile so go ahead into floating can props and open that up we're going to say flavor and that's going to be optional because we can have a fallback and for this we're going to say soda can props and we're going to import that from our com our sodan component and
    
    inside there though we want to say brackets quote flavor so now flavor knows it can only be one of these flavors wonderful next we want to say float speed and that's also optional and that's a number going to say I'm going to copy this a couple more times and instead of float speed it's rotation intensity and Float intensity and then down here we'll say floating range it's also optional and that is a number number in and sorry it's in in an array it's an array of two numbers and children as always our optional uh and
    
    we want that to be a react node which it pretty much always is going to be and let's see ah and then we want to destructure the these props and we can remove this floating can props I should have done that earlier rather than swapping it because we're already uh defining it there and yeah let's wipe out props get an object in there open that up and we need to pretty much uh repeat everything we just did so what I'm going to do is I'm going to double click flavor I'm going to hold option you can
    
    hold alt if you're on a PC and going double click float speed rotation intensity float intensity floating range and children and I'm going to hit copy and going to paste those in and just kind of go through and smack some uh actually I don't want commas just yet so we're going to say flavor equals black cherry nice comma float speed equals 1.5 comma rotation intensity equals 1 remember these are defaults don't forget the comma uh float intensity oh sorry equals one and floating range equals an array of
    
    negative 0.1 comma 0.1 so just that same value that we were in between comma children and at the end we want to say we want to spread any props that we might not be uh expecting right that just might be coming through and just after this uh object that we are we we are uh destructuring our props object you want that ref and we're going to put that ref if I can on this group so if we need to maneuver this group around or anything we can use that ref we're also going to spread the props on the group
    
    and we have all these uh different settings down here but they're all hardcoded right now so you know what to do swap it out for these uh values that we have so float speed assign to speed rotation intensity is rotation intensity uh float intensity is float intensity and floating range is you're not going to believe it floating range we're going to put children in here because later on we're going to pass an object in to like live alongside the soda can and soda can's going to get flavor and that's going to be
    
    flavor all right now it's a very versatile component I'm deleting these comments and yeah this is really really flexible we're going to be able to do a lot with this it's not going to hold us back at all and it's going to like give us this default nice little float effect that I hope you love cuz I I certainly love it all right so let's come back to our view canvas and let's wipe out this uh float and the can there we have let's use our floating can just like that and it doesn't need any props it has some defaults but I I'm
    
    going to remove this soda can remove float and I'm going to fix this to be at components if you know how to make that happen more consistently uh drop a comment because I genuinely don't know why it happened why why it works sometimes and why it doesn't so uh we swapped it out and yeah there it is it's still hanging in there still looking pretty good now uh we have a potential problem I guess we should we should say like we used to have a problem right so if we look at the finished site we want each slice to have
    
    their own scene so like this is a scene and we come down here and then this is a scene right uh but having a bunch of canvases across your website is a really bad for performance if you have like eight canvases they can't share resources with each other it's just it's it's just it's just a bad idea right you don't want to use multiple canvases but how do we like have this big gap between the the stuff that's going on up there skydiving and then like there's just too many different ones to to make this work
    
    so what do we do well the people at dry have uh have come to save the day again so search for view this portals view thing all right go here and this is one of the coolest things I've seen in a while uh basically let's see the preview code sandbox is loading um basically they allow you to like fake a bunch of canvases I I guess that's not really it but um there's one canvas and it covers everything and then you use tracking divs so what they call them right uh yeah a tracking div and the canvas goes okay so you want me to
    
    render like this view on top of where that div is and the size of that div and everything like that so uh yeah it is a huge update to fiber it's it's incredible that these all feel like they're different canvases or whatever but it's just one canvas rendering all of these so huge huge performance Boon um and gives us a lot of flexibility because we want our slices to be able to be moved around and not like stay static in one spot so now we can shift these things around and not worry about a big performance hit
    
    this is just it's it's the coolest freaking thing you are going to love it so we're going get the flexibility of many canvases while having the performance of just this one so let's make a scene that we will then uh use a view to render uh in inside this canvas so go to your slices open your hero and you see this index TSX if we add our 3js scene to this it's going to get real long real messy so let's create a new file and just call it scene. TSX and in here we can go ahead and say t srfc we can just do a uh functional
    
    component we have that scene and we want to put use client at the top and we're going to move uh the floating can and the environment from The View canvas into here so yoink that out pop that right there uh we might need a group around there that's looking good all right that looks better import floating can from at components floating can import environment from dry move that up and that's looking good now if if you look at the view docs um we can come down to that's a different one yeah so here
    
    uh we see we have this like mini app right and here's our canvas right that's that one canvas and inside it all it has is view. port and then we have these different views that are um declared elsewhere right and we can put it right next the HTML it is wild we what what we're we're able to do with this so uh we need to add view. port to our canvas and then we'll handle the view part of this um in in a second so in your view canvas instead of having anything else in there say View and import that from
    
    dry. port capital P and that's it we're not going to see our can anymore because we are not um putting it into a view just yet but we are ready for it so let's do it uh let's close out of these and we're going to open our hero the index and where do we want to put this let's put it right under uh bounded like right at the very top so we're going to first make our view import from react 3 dry and in that view we're going to put our floating can oh wait uh yeah no no sorry our scene I apologize our scene the scene has the
    
    floating can and the environment when to import scene from uh period slash so scene period slash looks good now if we hit save we get nothing why or remember uh this view is actually a tracking div that the canvas is now looking for so you got to go ahead and give it some Styles so if we just just as an example if we go uh size 20 we should see something there we go see it's real tiny but uh it's there and it stays up there so it's not really like like it's not what we want but yes this does work and
    
    it does show up but without it it doesn't have any intrinsic size because this canvas just doesn't doesn't have a concept of like oh I I have this thing that's 300 pixels inside of me nope it just disappears it just becomes a z00 kind of thing so let's let's uh give us some self confidence let's let's make it a little bit bigger so we're going to give this a class name of hero scene and that's just for us uh pointer events oh let me try that again pointer events none sticky so position sticky is going
    
    to help us uh keep this within the bounds of um I don't know just the project I guess yeah sticky uh top is going to be zero Z is going to be 50 and negative margin top of 100 view height now this is so that it doesn't take up any vertical space because we don't want it to push everything else down so luckily we're at the top here and we can just push it off the top of our uh website we're going to say hidden because that'll be on mobile we don't want to show it on mobile and we're going to say height screen that'll give
    
    us a height of 100 view height and width of screen be 100 view width and on medium and above we want to have display block so it will be visible now look at that that's looking good we're not animating yet but uh this is now built again but with nothing actually in our canvas all of the um logic and everything is inside a slice this view canvas just gets to be like the place where it all gets put right there's nothing there's nothing really here just this so far so that is a really really great way to
    
    build out these components and now we can move that around and yeah it's just great so I want to get into animating our cans but to do that first we're going to need some refs so if you're not familiar with reacts uh refs is just a way for us to uh reference an element and be able to do things to it because with um 3js we're not going to be able to put like a class on this can and animate it with gsap the way that we can if it's a div or anything else so we're going to be using these refs so inside
    
    our scene function we're going to say const can one ref equals use ref and we're going to import that from react like that scoot that up and use ref we're going to have angle brackets and say group import this from three like we've done before and parentheses null this is the um default value as we start out and so we are going to have five cans in this scene if you see um the finished website we have these five flavors 1 2 3 four five and so we're going to need five cans so let's copy this four more times one four and just
    
    go ahead and change the numbers that's why I'm using numbers instead of words it's just a little bit easier so we have refs for each can now and we're also going to need an extra ref for can one and can 2 because they kind of have some extra stuff to do here they have some extra animations because they're involved a little bit earlier so might seem confusing but yeah trust me uh const we're going to say can one group ref and we can still use the same uh use ref equals group null oh I didn't mean
    
    to copy the whole thing here we go and copy that and make that can too and last but not least yes see I say last but not least all the time uh group ref so we're going to have one big group ref and that's going to get added right here at the top so you can say group ref equals group group ref awesome now we want to pull in some more floating cans so we're going to keep our environment all the way at the bottom there and what I'm going to do with this floating can is I'm going to give it uh a couple more properties I'm
    
    going to say ref equals uh can one ref and I'm going to say flavor specify a flavor and going to say black cherry and let say float speed I'm actually going to uh set this to a constant so say uh float speed like that and then we're going to set this above so that all of our floating cans have the same float speed so const float speed equals 1.5 great so now that we have this floating can uh I'm going to copy it like I did before four more times all right so I go through and just do can 2 can three can four and can five
    
    and if you want to uh match mine I think you probably should but you can maybe uh change it later uh the first one is going to be lemon sorry uh can 2 is lemon lime can three is grape can 4 is watermelon no uh is that right no can four is strawberry and can five is watermelon all right and anything else we need to change here no that looks pretty good let's tab back to our uh our Dev version and let's see here we go we have all the flavors I think we are good we can call this a day this is perfect
    
    ship to the client see what they think uh no we are going to uh add those groups around around can1 and can 2 CU we have a little more work to do there so group wrap that around can one and a separate group for can 2 all right and on this group we're going to put ref equals can uh can one group yeah there we go and just going to copy this and paste it in there and just swap it to a two all right I know this feels like a a lot of boiler plate setup kind of thing but now we've got something for gsap to
    
    grab onto essentially so now uh you know can can get its hooks in there so speaking of gsap let's go ahead and import Gap let's go say import Gap from Gap and import use Gap from Gap react what do we do when we're using a plugin we got a register it all right we're going to call it underneath all of this but before the return use Gap and pass it an arrow function inside the arrow function we need to do something first the I I'll admit it's a little Annoying um but we need to make sure that these
    
    refs exist and they don't we can't really uh we can't really do this animation so we need to say if not can one ref. current uh because current is the current value of this ref so anytime anytime we actually reference uh that thing we're going to say can1 ref. current or whatever ref. current uh so if no can1 ref. current we're going to return so so if K one ref doesn't exist we're we're getting out of here we're not going to do what whatever we're doing here animation right we're not going to keep going but we have to check
    
    for every single um ref that we have so uh make this line and then command C and command v v v v v v v v v I might have done too many V's but I do can two can three can four and can five then do uh can one group group ref can two group ref and group ref all right it wasn't that annoying but it's a little silly looking right so we check to make sure that those all exist if not get out of there if they do you know continue all right actually the first thing we're not we're going to do is not the animation we're going to set can
    
    starting location so here we're going to say gap. set can one ref current. position so when I said it's a little bit of uh it's it it's a little more work than um working with regular like HTML elements CU I can't change the position and the rotation with one tween we have to do it with two different tween I spoke to Cassie and Jack at gsap and they might be working on a new way of handling this so uh if it's been a few months or whatever since this video came out and you're doing this tutorial
    
    maybe check their docs and see if if they have a new thing specifically for 3js around this uh maybe not though we'll see but it seemed promising so uh we're going to move can one ra uh currents position to x1.5 and if we hit save there we already see that it's working so we're trying to set that like initial State we're trying to get the can to here so already doing pretty decent job I'm doing great uh let we hit rotation we're still uh affecting can one but here I'm going to do Z is .5 and there we go we're already rocking
    
    along let me make a little Gap and copy these sets and can two curent position uh because it needs to be on the opposite side and rotated the other way you're not going to believe this but uh 1.5 and 0.5 works just great look at this look at this you thought it was gonna be tough it's not it's so good so uh actually going to erase that so can one ref current position going to do the uh three four and five so uh we don't need to worry about their rotations because we're just trying to get them up and out
    
    of here cuz remember here they don't start on the screen they start up and away or down and below and we'll bring them in later so we need to get them out of here so for can 3 I put that and I'm saying I put that because you can put yours where you want and make make it come in a different way the only thing I would be careful of is that um I took a lot of care to make sure they didn't clip into each other see how I mean you might spot it but I couldn't find any spot where they collide um cuz they
    
    would just kind of like eat into each other but it's like they're close but they don't bump so if you start playing with um numbers you you might start to clip into each other okay so position we're going to go for uh at the beginning is going to be y5 and Z2 so can 3 I think is grape we're going to see that just get out of here what happened ah I set all of yeah so I set four and five to X all right so grape is gone and now we need to do the other ones uh X is two for can 4 Y is four and Z is two when we set a z we're putting
    
    it uh either away from us or towards us so if I just if I get rid of the X and the Y here I'll just show you you you keep them but so a positive Z number if I do like uh three should get even closer it might actually eat into the camera though yeah so so positive Z comes towards us negative Z goes away from us so X is left to right Y is up and down Z is forward and backward I guess so um what was this value this was two all right pting the X and the Y back in and now it's gone last is can five uh it's
    
    y5 it's pretty much just straight up all right now it's it's kind of tough to be like all right where where do they go are they in the right spot how do I see them what's going on uh there's a nice little tool from dry I mean where else uh for just this kind of thing where like I I can't really see what's going on but I'm going to import orbit controls from dry save that and we can't use it just yet because um we have uh cursor pointer Events off I I forget what uh what's it called pointer events none
    
    there we go so I think if we comment this out it should work uh we have at least one more let's find it pointer events none on the hero what's uh so if you want to like not delete a Tailwind class but just kind of like comment it out for for a second I just put like a a letter on it because that's going to break it entirely so that should there we go now if you click and drag around you can see where everything is and better yet if you zoom out on your scroll wheel or on your trackpad or whatever you can zoom in and
    
    out so it's a nice way to kind of get a lay of land where here we're kind of locked with the camera but now we are zooming it out so you see where they went to that's down there these two are up and and yeah so we don't need the uh orbit controls anymore I'm going to comment these back in but we we we will use them throughout the course a bit more uh okay back to our scene let's remove the orbit controls save that and now let's get into a timeline we have all these sets but that's just a static thing let's get a
    
    intro timeline going so we say const intro TL equals g ap. timeline and the brackets we're going to uh do a property of defaults and there going to be another uh object we're going to say duration three ease is going to be back.out parentheses 1.4 and so those properties will be applied by default to any tween on the intro timeline we can override these on uh the the uh tween itself but it's nice to have these defaults it saves you some typing a lot of times all right so we're going to say intro timeline.
    
    from and I'm going to put this from on a new line because it's going to be another one where we have can one can two can three can you know so we're going to do that kind of thing uh so we going to say can one group ref. current. position and we're going to pass it a VAR object of y5 X1 and then we're going to give it a position parameter of zero so we want this to happen right away and it is first in the timeline so it it will but uh as we copy it three more times um they're all going to happen at the same time right at the
    
    beginning of this intro timeline so uh for this second line we want to just change this to rotation and for this third line we want to change this to can 2 same with the fourth line and then this is rotation so it should say position rotation position rotation can one can one can 2 can 2 canot can too um okay so for the rotation here we want Z3 for this value okay so we just want five and one all right so Y is 5 x is 1 and then for the rotation of can 2 we want is it three org3 let's find out yeah maybe negative3 let's see if
    
    that makes more sense nope that does not three it is there we go cool so we started um with them slightly oh no no sorry we we we have them here as their uh actual State they they live here and this says hey you can send them there but we want to start from having them off screen so y that's going to be uh up right yeah so it's going to take can one which is this black cherry up off screen oh wait no sorry it's going to go down I'm sorry I'm getting my myself confused so y 5 is going to bring it down and
    
    X1 and so it's going to shift it up so yeah I'm getting a little lost myself but I've been staring at this stuff kind of all day so um yeah let's just keep rolling and let's create next a scroll timeline so to do that we want to import scroll trigger so import import scroll trigger we could have gotten that from the start but we didn't um and we want to register that plugin and we're set there nice so after this after that last from go ahead and say consc scroll TL equals gap. timeline uh we're going to pass it an
    
    object defaults that's an object uh Direct it's going to be two two seconds and scroll trigger there we go uh it's going to be an object with trigger it's going to be the same as our our um text or or or like our as as that one as that scroll timeline trigger is going to be hero and we're going to have the same start of top top and same end of bottom bottom and we will scrub at the same speed guess I could have just copied this but now we got a workout on our finger so you know you're burning calories it's all good uh yeah now we
    
    have the scroll trigger timeline and let's start adding some animations to it so scroll TL uh I'm actually going to organize this with comments that's one nice thing you can do between uh functions when you're chaining them you can just say a comment here and then yeah well you'll say so this comment I'm going to say rotate can group and that by group I mean the entire group that wraps around everything it's kind of like if you were like rotate the body of an HTML uh document you would be rotating
    
    pretty much everything right so that's what we want to do so we'll say you have scroll timeline comment and then two parentheses group ref. current. rotation and we're going to pass it an object of Y is math. pi time 2 now if you remember uh this is 360° so we are rotating B on the Y AIS of the up and down axis uh by 360 degrees so if we just save that we should notice something right so that's exactly what we're going for we wanted to spin around on that y AIS once wait does it do once it goes yep
    
    and then red finished it there yeah okay cool it just seemed like it went twice uh next so we're going to do another two but first we'll do a comment we'll say can one black cherry this will help us uh like be able to identify it right because I I don't know which ones can three until I see like oh it's great got it so we'll say dot two and we can yeah we'll say can one ref. current. position and an object with X is.2 actually you know what before we fill in the object Let's uh build out the rest of the animations that we're
    
    going to be doing okay um um so we don't have to like erase a bunch of things or type too much I said I like being lazy so uh we need a can one position and rotation so I'm going to do that uh the end of these all get zero in the position parameters these are all going to fire at the very start of our um yeah of our animation or of of our scroll timeline I should say um let's go ahead head and I'm going to copy this whole thing and put it there and if I can go I'm going to select the one and hit
    
    command D command D and change it to a two and again select the one command d three I'm saying it so happily three and there be four and that' be five so can one four can one five and is there anything else there's should to be one more uh animation in a little bit but for right now that's good uh let's change the flavors like I said lemon lime can 3 is grape this one's strawberry lemonade and last is watermelon all right save that and that looks so satisfying those comments are really handy all
    
    right so let's go ahead in and start moving stuff around so we're going to go from the place that it's set to where uh we'll say X is.2 Y is .7 and Z is -2 and for the rotation we'll say Z is.3 all right so that's can one that is our uh black charity let's see what happens when we rotate yeah it straightens out a bit and it kind of it leans the other way so it is working it's Landing in the place where we want it remember here it's just it we we haven't shifted the whole group over yet so that's what
    
    we're looking for all right next lemon lime going to say X1 y.2 Z negative 1 I'm not going to stop and like look at each single one feel free to do that but I want to not waste your time x is uh okay so want can 3 ref and X is.3 Y is 0.5 and Z is -1 uh for the can3 ref rotation we're going to do z is1 c is .1 sorry that all right just want to make sure I'm still recording uh cool see point1 and so can 4 you see things are starting to come into place that was can three we got our grape there that's looking
    
    good um so we have uh can 4 is going to be x0 Y is.3 and Z is 0.5 can four ref rotation Z is.3 last can 5 X is.3 Y is .5 and Z is .5 and rotating by the z-axis by .25 so these there's nothing special about these values really I just thought they worked and at the end here we want to shift this entire group over to the right so remove that semicolon if you have one and say do2 group oh what happened there group. ref group ref. current. position and we want to pass that X1 duration three and ease going to be sign in
    
    out now uh we want to also start it a little bit later or or or sorry not not not not stuttering not a bit later but um at a specific time so you want to say at13 seconds so now you see it moved over looking great now I can go ahead and play with it you can scroll up scroll down and yeah it's pretty fun so well done I think that's it except there is one thing that I'm noticing if we're down here and we we reload the page we get this weird thing where they still do that animation thing in and I don't know
    
    I don't love that so we kind of only want to play the intro timeline if we we haven't scrolled yet so we'll say if parentheses window. scroll Y is less than 20 so if they haven't scrolled more than 20 pixels then we will run the intro timeline otherwise we don't need to we're just going to we we we want them just to like show up here if I save that and we go back there we go they are not animating in like that anymore but they still will if we're at the top nice all right now that we've got our
    
    scroll animations in this scene I want to make some bubbles cuz that's really the thing that's missing from our scene it's the uh it's the atmosphere right it's this is nice but doesn't have that atmospheric touch so we're going to make some bubbles now there's a problem that you need to watch out for when you need to uh render a whole bunch of the same kind of thing you can really get into some problems if you don't do it in the right way we're going to use an instan mesh and that is going to make us only
    
    use one draw call and I know so that's Weir to say um but basically it makes your GPU do a lot less work than if you were to render a bunch of meshes all in the way that we rendered these cans just like thousands of them it it's it's going to mess you up so what we're going to do is we are going to grab nope not that uh the the bubbles component from here and I'm going to talk you through each of the um each of the main steps here uh I've commented the heck out of it so grab this and in slices hero we're going to
    
    add another file I'm going to say Bubbles and in reality you could move this into your components and use this anywhere there's no reason why this has to be um glued to the hero just for for the uh sake of this of course I'm collocating it with the hero cuz we don't use it anywhere else but you can definitely use it wherever the heck you want so I pasted that in I'm going to save and now let's take a look at this component so as expected we start off with a use client up here and then we are using an object 3D as a container to
    
    effectively set and update positions for each bubble instance so this is a little less uh involved than a a mesh it's just a very generic class for things and so we are using that and we're going to use this o uh object 3D to put all of our bubbles into uh these are the uh props that it takes and just in case you want to use it in other scenes like we we could have hardcoded these but I put this in so that you can um yeah make it versatile you you could have it even just go up once if you set that to false uh now we
    
    have the the the mesh ref you've seen this but the the the types A little bit different and then we have an array that holds all of our bubbles speeds so we're going to uh create a random bubble speed a little bit later uh and we have a Min speed and a max speed and this speed is a multiplier for that so you see if we set the speed to like 50 it's going to be a much bigger number here um so then we want to set the geometry and the material for our mesh so we have geometry and material just like we did
    
    for the Box originally right um the the mesh needs a geometry and a material we're going with a sphere with bubble or or sorry with um with that as as the size but this is like the vertices essentially the higher the number the smoother it is the lower the number the more it kind of looks like a cube or like a simple polygon so 16's a good in between and I'll come over here I'll come over here so that you can look at the Bubbles as we go through it uh and then the material it's transparent and we share the opacity that is uh up there
    
    as a default and just a standard material uh this use effect is going to run once and that's what's going to create and place our bubbles throughout the scene and we need to get access to that instance mesh which is attached here to this instanced mesh element and we then uh create you know how how however many number of bubbles in random location so we use a gap till I love using them I use them all the time and we keep them between these uh bounds so there's essentially like a cube of 4x4 or or I guess it's like 60 by 60 I
    
    don't know it's it's it's a big old Cube where they can get placed that's why some are small because they're in the distance and some are big because they're coming up right in front of us and then we need to update Matrix so that um we apply that that position to that uh mesh so when we apply is don't don't worry if this is a little bit um funky because we're we're not going to get too deep in in into this but at least want you to um understand these different steps so then we we need to tell the mesh to hey set that Matrix at
    
    that location uh for for index I and then like I said we need to set a random bubble speed so just happy tell us random somewhere between Min speed and Max Speed to the current uh the current index and then we we let the uh in instance Matrix know that it needs update and we're going to be doing that later on down here too see needs update uh just telling it that hey you you need to redraw this you need to recalculate this at some point and we clean it up uh when it leaves the Dom so that is our
    
    use effect and then use frame use frame runs on every animation frame and so if you have uh an animation playing at 60 FPS this this will run 60 times per second that's just how that works right uh so we assign the current body color to the bubble so it looks natural that's one trick here that um if you don't have that it it just doesn't look right um if if you put a white bubble in yellow it just stands out it looks like weird ping pong balls where this kind of feels like they're they're actual Bubbles and then
    
    as you come down here it still feels a little white but it's actually green and it helps a bunch so we're just grabbing that off of the actual ual body and that helps us kind of have like one spot where we can get all of our where we can get that consistent color from um then we Loop through all of the bubbles and we move the bubbles up by their uh speed and I guess we could have like made them move a little bit side to side more because they kind of do do just go straight up and I think bubbles kind of
    
    move a bit less perfectly than this but it's it's good for what it is um and if it goes off the top of the screen so if the position uh is greater than y we move it all the way back down to the bottom and we just give it a new position and it rises up again just does that over and over and over and yeah we mark it as needing an update and there it is uh anything here interesting not really so this instance mesh makes our uh scene way more performant so we save Bubbles and then we're going to import
    
    it right into our scene alongside or sorry we're going to import it into index and we're going to put it right below our scene we're going to say Bubbles and I'm going to import that from Bubbles and I'm going to close that and save and let's see what we get so we get lots of teeny tiny bubbles coming up now we can keep it like that or you can uh do the numbers that I have here so I say count is 300 speed is two and repeat is true I think that's the default anyway but yeah so if you want yours different
    
    that's totally fine and it should change as we scroll down and yeah there we go we have our bubbles in our scene so you can do this with all kinds of stuff with cubes there's a lot of good examples on the react 3 fiber docks um if we search for instance instancing they have yeah see you can do a lot normally that would be way too expensive to to to to draw but because of instancing uh you can save hundreds of thousands of objects in a single draw call so highly recommend instancing if you're doing anything like
    
    this it's the way to go okay our hero component looks done but uh actually there is a problem on slower connections our text Will animate in before our 3D scene is ready and uh it could be you know a couple of seconds so it could look kind of silly right now when it animates in it's it's nice it feels like they are all coming in together right the cans come in the text comes in it is it it feels cohesive but on a a slower connection it's like the text will be waiting and all of a sudden like 3 seconds later these come in it it's
    
    going to be weird right um what we need to do is we need to pause the text animation until the scene has loaded but we don't want to turn our layout or our page into client component so we would have to do that if we wanted to use something like a a like a react context or any kind of thing like that so we don't want to reach for that tool but instead we can we can use a lightweight State Management library to handle this and that's where we bring in zustand I'm I'm going to mispronounce it I'm sure
    
    zustand zustand who knows but we have a link to it in our course docs and see State Management zustin docs and zustin with typescript so open up both of those and I'm going to close some of these others um actually o we we'll come back to R3 perf um because we we want to make sure that we are being performant um so here's our introduction to zustand npm install zustand so let's go for it open up our terminal going to paste that in and there we go it's installed we'll run our Dev server again and let's scroll down
    
    to First create a store we're not going to go too deep into Z we just need it for a very simple use case and it's perfect for that kind of stuff um so here we see the example that they have create from zist you can go ahead and copy this and we are going to create a brand new folder in the source directory so come into Source right click on it new folder and we're going to say Hooks and inside that we're going to create us store. TS uh not not TSX to be clear just TS and in here we're going to paste uh this
    
    code so let's take a quick look at this code before we wipe it out um so it can take these values like Bears so it can have that count and then we can also have functions like increase population basically if you've used Redux this is a very simple uh non complex uh implementation of that same kind of philosophy uh so increased population it is a function that says that that returns uh the state of bears plus one and and sets that two bears so if we call this increased population function it will update this right there uh we
    
    have two more functions like remove all bears and that sets it back to zero and then update Bears we we can pass it in argument so if we want to say hey we just got 30 bears in uh that will set Bears to 30 so we don't need any bears unfortunately uh maybe that's the website let me know in the comments uh if we need to make a bear website but we can wipe that out and instead we can say ready false and then we're going to say is ready and this will be a function that we call when we are ready uh make an
    
    arrow function and we're going to say set and that comes in uh as as a an argument there we're going to call that function and return an object that Updates this ready value I'm going to set ready to true and it's really like like that's our store uh in front of the con put export so that we can send this out into the world and it can be appreciated and before we go from here you see down here I have uh the the interface because if you check out the typescript docs you want to add an interface that you then put between the
    
    create and the call so let's go ahead and say interface and we'll say State open that uh curly bracket we'll say ready is Boolean and is ready is is a function that returns void um so uh other functions that return void are like console log where there's nothing actually returned right we don't like return a value like like map returns an array and then grab this state put it between the create and we are set now awesome so we have a nice little typescript store here in zist we now need to use it so let's go into our hero
    
    and in here we want to import uh our store so I guess we can okay I'm going to sort these out a little bit uh dry needs to go up uh these other two are fine so because it's something that we have in our um project we're going to import it down here so import use store and it should know where that's from no um there we go so we want the one from at hooks use store and down here it is a it's a hook so we are going to call it right inside our hero just like we we would with used state or anything like that we're going
    
    to say const ready equals use store parentheses and we're going to uh have a function here that that that gets state so it'll get the current state at the time that this is called and it will uh return state. ready because remember this uh object here is our state and so we just want ready off of that object we could also call for is ready but this component just needs to know hey is the rest of the app ready can can I start this animation or do do I have to hold off so then we don't want to add uh add
    
    the store I should say uh we we add this uh this variable to or or I guess this bit of state to use Gap so right at the beginning we can say uh if not ready return so if the app isn't ready because no uh because our scene hasn't said it's ready we don't run this but we want it to run when it is ready how many times we going to say ready in this course I I hope you're counting uh so I'm going to put a comma here at the very end of used Gap because this can take an object and in here we have dependencies revert on update and scope
    
    three pretty handy um properties but we're going use dependencies and if you if you've used use effect at all uh you'll be familiar with passing a dependencies array and we're just going to pass an array that has ready so when this property it says right here add ready to the dependency so use Gap reruns when the value of ready changes so as soon as this changes uh used gsap knows oh well I should check this out again and we will get past this block and we will go on to load our animation at that time so now that we're checking
    
    for ready we should set ready because right now I don't think uh our animation's ever going to come in uh our probably not running oh it is so our cans come in but our uh block is doing its job and uh because it's not even setting the background color right like our bubbles are white so it's kind of a mess all around so we need to go to our scene and we need to yeah so let's say it's the true when our scene TSX is done loading so in our scene we need to import use store in here as well you can copy it from over here if you want to be
    
    uh brilliant AKA a little bit lazy but hey we we like lazy here and inside our function just like we did before uh you can do it either under use ref or or just above but we're going to say const is ready this time not ready but use store store and then we're going to get that Arrow function that gets State and we're going to return state that is ready and that will give us that function so now we can call that function uh after the can ref checks inside here so if this goes through that means these exist and we can continue on
    
    if this doesn't then we we are not ready right so as soon as that finishes we can say is ready and now it works and if you have a slow connection uh it'll all wait and then it can slam in and fly in and do all the kind of stuff all at once so that fixes it problem solved nice what else handling mobile let's handle that so we want to hide these 3D cans when we are on smaller devices uh partly because it's it's a whole other thing to animate for uh but also because if you're on a on a phone you might be in some really
    
    bad service or or whatever or you just don't want to use your data on 3D cans and stuff like this is much more of a a desktop sort of thing so we just want to show that static image that that uh we added before so we have a great use media query hook that I included in our docs so um you can find something similar like this on you know there's lots of like collections of hooks out there uh but this is a really solid one and going to copy this and go to our Hooks and now we have two hooks folks we
    
    are building a collection and that's where it's going to stop so use media query TTS and just paste that in um you can check it out but really it's just taking in a string um like you would write in CSS and it's just going to return a Boolean it's going to say hey uh yep that that matches or nope doesn't match all right it's it's not too deep but we want to use it in inside our index file uh so after ready we can call Let's see we can call it and say const is desktop equals use media query and it
    
    Auto Imports from at hooks I love it and we're going to open up we're going to call the function and then we're going to pass it a string of Min width and then colon oh sorry U make sure this is parentheses inside the uh inside the quotes it's a little bit funky because it's like taking the actual like CSS kind of um media query but it it works great so 768 pixels you might saying why why that because that is the Tailwind value that we we want to match um and then inside the parenthesis uh but outside the quotes we want to
    
    have a fallback value see if it's a yep for Server fallback so on on the server we just want to say uh yep it's true and we have that as our server fallback so if we go over here uh we shouldn't notice any difference but now we can use this media query so we only render our view component and that is the one remember that brings in our scene and our bubbles we only want to render this if is desk desktop easy for me to say is true so we're going to open up curly brackets and say is desktop and and and
    
    then open parentheses and move the bottom of that all the way down save and prier should format it so um yeah we we now have it so that yep it'll load then but we have a problem again all right can you spot what's happening what's happening is well I I I kind of say it here right where uh because we're we're on mobile or or you know we're we're we're on a smaller screen than the the breakpoint we have uh this never loads in and that means it never sets ready to true so we're always waiting on it didn't mean to do that um
    
    so let's also check for is desktop in our use Gap function up here so if not ready then return uh oh we going to Performance in a sec we just want to add something to this we want to say if not ready and we're on desktop cuz if we're not on desktop we don't care about anything needing to load in because there's nothing to load in right so if we're on desktop and we're not ready then don't do it right and because we've added this we now need to add it to our dependencies so that should work now if we reload we
    
    should get our animations there you go we've we a lot of it is uh fixing problems that create another problem that fixed another problem that create another problem it just kind of like a back and forth sort of thing so that's looking good and there we go uh because is that is that desktop changed we ran that again so let's talk about performance now real quick I just want to show you a handy little um tool or or a a library that lets us see our performance let's open up view canvas and I'm going to uh bring it in up here
    
    so we're going to say import and curly brackets perf capital P RF uh from r3f perf just like that not sure why I didn't help us with autocomplete but I'll forgive it uh and then we want to put it inside our canvas so we can say perf just like that it can also take a couple of uh oh it doesn't have any autocomplete maybe that's why it might not be like types scripted uh but if we see up here and I'll try to zoom in a little bit um there we go we're getting 60 FP s on this animation and so uh hopefully you're getting the
    
    same and as we scroll down we dip to like 59 that's all 51 but honestly it's not uh we're we're we're not really having any problems so um although yeah okay I was making sure the text was showing up so that is one way that you can check for performance to make sure that your animations aren't overdoing it um and you're running real smooth it's buttery so we're not going to keep that up because this is kind of one of our more intensive um things or our more intensive scenes so I'm going to get rid
    
    of it but now you know and feel feel free to keep it up it just it's not very pretty so I I don't now what is a 3D site without a loader right so I'm going to close out a zist in docs um we used react 3 perf just a little bit uh now I want to go back to the dry docks and I want to search for loader and I want to search for this one in particular so uh dry provides a really basic loader and I mean very basic uh we are going to put it underneath our Canvas OR sorry like outside of our canvas and we are going
    
    to wrap our viewport in suspense so suspense is going to wait for these async things to to happen like whatever you you have going on uh it's going to wait for this to all finish up and it will let the loader know it essentially waits for that to happen and it it's intended to hide the whole app so that everything can load in and it just goes for it we can override the Styles cuz yeah it's not the prettiest um but to be honest these um the the docks here I I'm not even sure how to go about styling it otherwise I I would
    
    have uh if you figure this out and style it really cool let me no I would love to like throw an updated loader into it uh but yeah I I couldn't figure out how to style it but it's definitely possible uh so inside our view canvas we first want to say suspense and that is an import from react we're going to say fallback equals null and we want to open that up and pop our viewport inside it and then outside canvas we're going to make react mad for a second we're going to say loader and we want to import that from dry and yes
    
    we are returning to children so we need to uh wrap everything in a fragment so uh create just an empty angle brackets and then put the closing angle brackets down here so that everything is wrapped in one child element so now we have this loader let's see if we can trigger it yep there you saw it right but you might have also seen that little red box down there up what did I say we solve one problem and another one pops up all right uh we get a react hydration error the client and the server do not
    
    match so it's warning us going like hey uh the server told us one thing we're seeing a different thing in the UI what's going on so we need to take the loader out of SSR so we're going to use and and SSR by the way is um serice side rendering uh we're going to use import Dynamic from next Dynamic so this allows us it's it's going to make it call for our loader only when it's needed so that's the kind of the great part about Dynamic everything else when we say import it's getting imported no matter
    
    what uh but with import Dynamic we get to import uh Dynamic from react 3 dry when when it's used only so let's say import I want to put it yeah right here import Dynamic from next Dynamic thank you autocomplete and we're going to say const loader equals Dynamic and we're going to open open up a parenthesis there going to give it an arrow function and say import parenthesis quotes we're going to pass it at react 3 dry thank you again for the autocomplete and then we're going to chain a do then onto it and
    
    pass that an arrow function that gets mod in the middle or or or as an argument and that has on it loader so we we want to return loader and last but not least we want to specify hey do not do this uh SSR right like when when you are Sur side rendering so SSR false and that should clear that right up we we want to get rid of it here now because it's saying hey you're declaring this twice so get it out of there keep it in Dynamic and we should not see that again awesome uh the the loader on your
    
    local machine might not come up very often it's kind of hard to bring up cuz all this stuff is cashed and it's fast but uh once you send it out out into the world um it's going to be handy just to kind of cover up everything and let it load in so we have one last issue and this really isn't like a an issue with the hero itself this is just more of a housekeeping thing where whoa you see our slice preview that used to be so nice and so helpful is now stretching out to an uh unbelievable height that is
    
    because it uh is such a long component that the if frame in here that detects the height of the slice and displays that it just can't really figure it out so it just keeps growing and growing and growing so what we're going to do is we're going to edit our slice simulator page so slice simulator we want that page. TSX and all of this stuff is uh created for you when you initialize slice machine and when when we created our project and that's how we get these awesome little previews and we are able
    
    to go in and edit them so we need to do a couple things first let's take care of that growth that uh that's stretching um off the page so we're going to say period Max hyphen H and I'm going put another hyphen because brackets get weird with EMT if we start doing uh those square brackets it's going to think we're doing something else so I'm going to leave it there and it's going to create that even though that class isn't a real Tailwind class and I'm going to say uh 900 pixels and yeah our components are generally or
    
    or or at least some are taller than that uh but we don't really need it to to show the entire slice we just kind of want it to give us a good idea of what's going on so just by adding that we should already be a little bit better off so let's reload our our uh Page Builder and there we go live gutsy okay are you noticing something uh a little difference between the page we used to and this page yeah we don't see any yellow we don't see any cans like what's going on so let's set the background on
    
    the slice simulator we have a couple of uh props that we can pass we'll set background equal to empty string pass the empty string and there we go there's our stuff we got our stuff back now that's pretty great and we don't see a further problem yet but there will be one in the carousel so I'm going to preempt that right now by just saying Z index and this isn't something that you'll always have to do like um I don't often edit the slice simulator but if you're doing a site in dark mode you don't want that white
    
    background you want to come in here and set this background so that your slice previews look normal um but set the slice similar to a z index of 10 and nothing will change here but later on in the carousel uh our can will actually show up and that's it folks slice is complete amazing work really uh this was a lot go take a little break we just covered a ton of Concepts and next up is hour sky dive slice I'm so pumped you're doing great let's get into it all right another day another slice I hope you are excited for our Skydive
    
    slice we have this cool little can just spinning down and as we scroll we get our words flying by and if you want you could put the words in front you you can definitely figure out how to do that um but for us I I think it's readable enough that it goes behind and we also have some accessibility tips uh to make this whole component component actually readable for screen readers so let's start off by opening slice machine and creating a new slice and we're going to name it Skydive so go into our page and
    
    click add we we can add from either the slices panel or from in here if we add it from in here it automatically gets added to this page so go ahead and create new and we're just going to call it sky dive and it's be Pascal case no spaces hit create and go into Skydive we're starting off by upda that screenshot so let's find our files here they are and we want our thumbnails Skydive is right there drop it in and now we'll be able to pick from a stylish thumbnail when we are in our our page builder great now we want to model out
    
    just a couple of fields that are in here there's not a lot of content here um it's it's more flashy than content that's that's most of the site though uh so we need a sentence we're going say text sentence and then we also need a flavor and that's going to become uh via a select field so I'm going to say flavor and if we go to our soda can and our code uh we want to match up against these exact like like uh capitalization and everything these exact words when we go in and change our options so options
    
    we we want lemon lime we want grape uh let's add a few more yep three more to be precise black cherry strawberry lemonade and watermelon all right so we can use the first value as default that lemon lime we're going to say done and that's really all we need here so let's get into uh pushing it let's oh I'm logged out again all right I logged back in that's what I get for recording these over uh several days so uh now we are in our changes and we see that we have a page and a new slice so we're going to push
    
    those and I think that's what we're saying here add Skydive slice to our homepage so let's go ahead and do that hit the plus we're going to choose this slick Skydive slice and we are going to go ahead and say does it yeah so we're going to say uh dive into Better Health and flavor we're going to do black cherry then uh while we're here let's change this to not just be fizzy but soda for gutsy people and in case you don't get the gutsy thing it's like probiotic soda it's all the rage right now so that's why we're we're going for
    
    that's like a healthy kind of soda brand it's all made up it's fun so uh now if we come back here remember we're going have to hit refresh twice for it to to actually happen so we now have a slice at the bottom placeholder component for Sky die variation default slices great we have our second slice let's take a look if we minimize hero and open Skydive or I guess collapse hero closing all of our things collapse hereo again and we have Skydive it's going to give us another uh placeholder component but it builds all
    
    this out for us we don't have to worry about any of that and we are ready to get into it in this we're going to have another uh index and scene combination and in this one uh the index is going to be very simple so let's get started on the index. TSX we're going to start off by making it a use client because you gotta uh and now we're going to swap out section for bounded just like that import it from at components bounded looking good I love when it comes from the at components uh we're going to add a class
    
    to bounded we're going to say class name is Skydive just for you know naming it and then uh height of screen and then we going to add an H2 in here even though uh we don't actually have uh we're not going to show any text we want to add an H2 uh so that it's accessible because this will be picked up by screen readers so we can say H2 period s R hyphen only and inside here we're going to drop our slice. primary dot sentence and if you hover over Sr only it shows us all of the different uh classes or yeah all all the different
    
    properties that get added uh in order to make this readable by screen readers but completely hidden to anyone else so now that that's there it's time to make our scene so I'm save this and we should at least yep see was going to say we should see our age2 no we shouldn't uh now go ahead and Skydive and say scene. TSX and we're going to do a tsrf c and up here set use client need to make my own Snippets that don't include that import but have used client uh now let's just start off by creating our
    
    refs let's just jump right into that I don't mind um so going to say const group ref it's equal to use ref and we're going to type this with three. group and that'll be fixed in just oh no it keeps wanting to keeps trying to help all right let's let's come up here and just import uh asterisk as three all caps like that from three and that should so three. group all right that works and now we're going to uh set null as the default we have that first one we're going to be doing I think five more groups so copy off a few and swap
    
    out the names call this canre we'll call this one Cloud one ref don't worry we're not making a th clouds only two two Cloud refs Cloud 2 ref and then clouds ref I should say cloud group ref I don't know it's already there it's all good and then words ref and those are all our refs once again we just need to give uh green sock something to grab on to so these refs come in real handy so now let's wipe out this div and we need to create a group and let's add our floating Cannon there and we'll give it a ref of you
    
    want to bet it's can ref or or say do you want to guess do you want to bet yeah it's not how that works uh and you have our floating can and we can keep this open uh see how I I didn't have it self-closing we're going to put something in there a little bit later but right now uh also put a ref on the group and that's group ref all right two of our refs are down now uh we can save this scene and add it to our index so scene and we want to do it from period scene and uh we need to put it inside a view
    
    see I so this is what happens when you uh just try to use these components anywhere right so I I I'm not putting this inside of view so it's not going inside of a canvas this needs to be in the canvas component got to got to watch it so View and import that from dry and now it should be a little bit happier all right cool only thing is uh this view doesn't have any Styles right we we we know that we need Styles so let's make our view a certain size we're going to say class name is height screen
    
    and width screen and like that we have our mysterious black can feels like it's uh in witness protection or something all right so we have our floating can we don't have any light so we need to add a little bit of ambient light let's come on into this scene and let's add an ambient light I think we had one of these earlier intensity is going to be two and color is going to be uh not white right it's going to be a tint of blue and we're doing that to kind of give like uh I don't know the effect that it's
    
    actually in the sky so hash 9 ddfa it's going to be our color and we can self close that ambient light let's see what we get there you get a little bit of a wash of blue color still not the the most beautiful scene I've ever seen um let's add an environment we love these environments uh environment files it's going to be HDR field. HDR I told you we were going to use that field one and this is why cuz it's like we're outside we want the sun we don't want studio lights that's not going to feel right
    
    and then environment intensity is going to be 1.5 self close that and let's see how that looks much better see it it has that one source of light where our others that that's clearly not outside right so we want to next rotate the can so we want to wrap it in a group so we're going to push our uh our lights and things down I'm just going to say uh lights and then here in our floating can we're going to wrap it in a group and we want to on this group put a rotation and you might be wondering why
    
    didn't I have to put it on the floating can why I just rotate it straight up because we want this to still move on its axis and not wobble around funny so we want to put it in a container and then have that container be the thing that is rotating so rotation needs an x a y and a z so pass it zero comma 0 comma 0.5 and now we see that it's in that position that we wanted in next we want to add our clouds let's check out dry because guess what we're not going to make our own clouds we're going to get
    
    them here this is a particle based cloud loud I'm telling you dry has everything we're making so many cool things just with like the kit that is here so back to clouds uh here we go so particle based Cloud let's look at this example here use the clouds provider to glob all clouds into a single instance draw call we talked about this a little bit earlier with uh the instanced mesh it is a really great performance benefit if we can do that so use this Cloud's provider we can go ahead and uh just about copy
    
    their code but we can we can do our own so I'm going to come underneath the floating can doesn't matter because in um 3js it's not that if I put the clouds down here it'll be on top of the can and if I put them up here it would be under that's not how 3js works it's a different kind of uh space right so going to say clouds and import that from dry and inside here we'll say cloud import that from dry and I am going to save this and let's see what is going on so we just have this Haze to find out
    
    what's going on let's add orbit controls and now we can zoom out and we see that we have this rectangular long narrow Cloud well it's not it's not rectangular but but I'm I'm thinking of the bounding box around it so it's it's got this like long oval shape and so yeah orbit controls helps us to get a lay of the land essentially so we can keep the orbit controls on as we build the rest of this out because we're going to do a little bit of a trick I would say a um a a way to make it seem like there are infinite
    
    numbers of clouds but it's essentially the same thing that we did we did with the bubbles move it up and off the screen and once it's off snap it back down to the bottom and bring it back up again let's add our refs real quick ref equals Cloud's ref and Cloud gets ref equals ref equals Cloud one ref and we want to set the bounds for this bounds is going to be an array of 10 10 2 and now we uh sorry we we we we make a second cloud and we want to pass the Cloud 2 ref now what we just did with bounds was open up the the containment
    
    box in which these little textures can render in if we just make these bounds super tight uh I'll make this one one one one and I'll hide this you see that it just becomes this super dense Cloud where you know there's not much going on but we want a kind of a long square or or or sorry a a thin Cube or I don't know you get what I mean it's it's a a square on two dimensions and then this it just needs to be thing because we don't we don't need the depth we just need it to kind of spread out so now that we have these
    
    two clouds we are going to animate them in a little bit but right now we're going to leave them as is I want to bring in all of our elements first and we still need to bring in our text so I'm going to uh add another comment here to say clouds just to try to do a little bit of organization say can and then let's say text or uh yeah text text works no need to be perfect here with uh our our little quick comments so we currently don't have any way to get our sentence we need to update our props uh and our destructuring here to allow
    
    for it first thing I'm going to do is change the name of the props default here to Sky Dive props just so it's more specific if you ever want to export it it can be handy we're going to say sentence and that could be a string or null and flavor we know that this has a has a a set option of five different things right so we want to say content we're going to import that from prismic doio client and this is what gives us uh easy access to the types that slice machine generates of our models so say content
    
    period sky dive slice default primary that's the one we want Skydive slice default primary it's a lot but it's basically pointing to let's go back to slices Skydive uh the default variation and then this is the primary area you you might have noticed that um in our other scene we are I think we're doing it here we're pulling sentence off of primary so that's why we're doing that but we aren't done yet here because we need to specify is it flavor or is it sentence that we are typing this as we're typing it as flavor and so now if
    
    you hover over flavor you can double check your work and see yeah it knows exactly what it's expecting so that is great now we just add it to uh that object so say sentence and it's going to autocomplete for us love the autocomplete so good and we don't we can pass that flavor here to our floating can but it's going to be disappointed uh because we don't we're not passing it in anything yet from our index uh file so flavor at least that's ready for us now coming back to index it's going whoa whoa whoa I need more stuff you you
    
    you're missing some things here uh so we want to pull in the flavor and that's going to be slice. primary. flavor we're going to pull in sentence and that's going to be slice. primary. sentence and now it is much happier uh great so let's add our text to our scene so guess what we're using something from dry uh type in or actually go to the top and we want to search from here say text just one big uh not context text text text we're looking for it wait where is it is this oh no there we go text so it's under
    
    abstractions text and text 3D we're just going to use regular text for this 3D might have worked I just wanted to keep it kind of normal you can do some kind of cool stuff with uh 3D text if you want to try it after the tutorial go go for it and uh tag me I I would love to see how you make it look so it is high quality text rendering with s distance fields and we can do all kinds of stuff with this uh we can pass it a custom font it's it's a really powerful little um component that wraps around tra 3D
    
    text so we're going to create a function that creates individual text elements we're going to do that at the bottom kind of like we did with the splitting text component uh but slightly different so we're going to say function 3 text and that is going to get a sentence we're going to destructure that off the props and a color equal to white as a default and then we're going to type it like this why is it yelling uh let's close my function so at least it knows it's a function and we're going to type
    
    it like this so This object and then colon this second object and here here we're going to Define our type so sentence is a string and color is optional but it's also a string and then down here we want to return text and we want to import that from react 3 dry and pass sentence inside here and I said we're going to do um the splitting text thing we're starting simple so we're just going to use our three text function or or or component in in our scene and see how it goes so under our text comment we can first make a
    
    group so that we can contain all of these words going be really handy so ref equals uh words ref and then inside this group we want to first check if there is a sentence before we try to render three text uh with a sentence so say sentence and and and then say three text and pass it the sentence and that oh and we also want to pass it a color uh we can see if if we just save it there we see that we do get white text dive into Better Health it worked so it is working now let's pass it a color where did our text go here it
    
    is let's pass it a color and that's going to be uh in quotes and then hash f97 315 f97 315 I type that right let me try that again yep I typed it right but guess what we're not using it here so we need to actually use it but really the color can wait let's first map map over the sentence and style our text after so in here just before the return we want to say const words this where we're doing that the the splitting as I mentioned going to say sentence do two upper didn't like that okay do know
    
    server to uppercase so now everything is going to be an uppercase letter and we're going to split on the spaces and now we have this words array now we want to say uh our material we going say const material is equal to new 3. mesh Lambert material and call that as a function and next we want to use our media query because we want to size the words based on if it's on a mobile screen or a you know a desktop so say const is desktop and we're not going to have like the same value as before but I'm um I
    
    have a value here that uh works better for this situation so import the used media query hook and we're going to pass it a string with parenthesis and Min withth colon 950 PX and then comma true as our fall back so we have our is desktop and this is looking really nice now instead of just returning text we want we'll put a a return above here we'll say return words. map so we're going to return uh all all of the word we're going to return a text element for each word I should say and in here we're
    
    going to pass this a function and this gets word which is a string and word index which is a number because that's what map gives you it gives you the thing and then it always gives you the index that we're currently at and we want to do an implicit return so we're not doing Curly we're doing these uh we're doing parentheses for an implicit return so now we want text we're going to I'm just going to grab this and bring it up and we are going to add a key to this because we're iterating so we need to
    
    have a key our key is going to be a little bit funny because we aren't sure if the word is going to be unique so we need to combine it with the word Index right like if there's the twice you can't have a key that is already in the scene so our key is going to be in back ticks and we're going to use dollar sign curly braces and say word index and then hyphen another uh one of those and word in here so it's going to be like zero dive and you know you get it so on and so on uh we don't want the sentence
    
    though we want the word and now we should get rid of this return we should see yep a whole bunch of mess uh that's exactly what we want though it's all up case and it's all stacked on top of each other this is working next we can go ahead and style this out so uh after key go ahead and kind of give yourself some space here so we got a few things to add we want to check the scale and that is going to be uh dependent on the desktop so is desktop is desktop question mark do a turnery so if if it is desktop the scale
    
    stays at one it's exactly where we want it otherwise let's go to half size color is going to be color now we're using it material is going to be material font now this is why we didn't put the font collocated in our app because we need it here fonts SL alpino variable w o f f don't use two here it will not work with this you have to use regular wa that's also why we are using both Waf and Waf 2 so I guess we could have collocated Waf 2 and then done this but it's it's fine next font weight that's going to be
    
    900 we want that uh very very thick one anchor X is going to be Center and anchor Y is going to be middle that sounds a little funny but that is essentially the uh transform origin if you're familiar with that in anything else so if if we rotate it it's going to like rotate along the center axis rather than at a corner so that's what we're saying for the anchor and last we are going to say characters and this is a great way to uh reduce how much you load in cuz fonts have a ton of glyphs to them a ton of
    
    characters that you can use but we know we're going to use a subset of all potential glyphs so we're going to uh basically spell the alphabet and give it some punctuation so go ahead and just have fun with that a oh and do it in caps because um we are specifically not giving it the lowercase letters so that we just save a little bit of uh it's a it's a bit more performant and it's fun to do the ABCs f g h i JK all right if you got that wrong um you unfortunately do not pass the class um notice playing so uh I'm giving
    
    it a couple punctuation things if you know anything else is going to be there uh maybe an apostrophe you can add what whatever you want in here um or you can just remove it and it can take all characters but uh since we are turning this into uppercase even if your content team puts in all lowercase this right here guarantees that it's going to be uppercase so we can hit save and there we go we have chunky orange text now we can't make it out at all and that's totally fine so now what we want to do is get everything moving
    
    up at this same kind of angle see how like better is moving up and to the left the clouds are moving up into the left so let's in our file here go up underneath our refs so we got our refs here let's go just underneath that I'm going to say const angle all uppercase be a constant and we're going to say 75 time parentheses math. Pi / 180 so what we're doing here is we are getting uh one degree in radians and then we multiplying that by 75 to get 75 degre so we want to move everything up at this 75 degree angle next let's create a
    
    couple of functions that we will use to get uh positions in our project so we'll say const get X position try to spell p i o n there we go equals parentheses distance and then we're going to type that as a number and that's an arrow function and we're just going to return distance times math do cosine or cosos uh parentheses angle and that will get us our exp position go ahead and copy that change this to Y and change the cosine to s all right we have one more function to add in here it's going to be const get
    
    XY positions equals and I'm going to say distance I just grab this Arrow part go ahead and copy that over and then we're going to uh have parentheses and we're going to return an object and that object is going to have on it X and that's going to be get X position and we're going to pass it distance comma y get y position we're going to pass it wait for it -1 * distance all right now we're going to be using this function in our animation and so let's start animating um I'm going to see if I can grab let's find scroll
    
    trigger so we are typing out the same thing over and over again or at least uh we will be I guess um there we go I'm going to grab this chunk here Gap use gsap scroll trigger I don't want to type that out anymore like I said we're going to be a little lazy uh I'm going to move these components down and keep a little space there too all right cool now we have gsap use gsap scroll trigger and I want to register those plugins so we'll say use Gap and scroll trigger excellent so we are are now ready to uh use gsap so underneath get
    
    XY positions we're going to call use Gap parentheses going to pass it an arrow function and we are going to do what we did in the last one right off the bat we're going to check to see if our refs are there so if parentheses exclamation mark clouds ref. current or and or and I'm going to uh give this some space so that I can do this should be enough so Cloud's ref then we'll check can ref and then uh words ref there's no real order it doesn't really matter and then Cloud one ref and cloud two ref you can move those around
    
    all good either way uh oh so if I don't have anything after that return there we go that fixes it so if none of those are there or or sorry if any of those are not there just to be super clear um if one of these is missing it it it will return so that shouldn't ever happen next we need to set some initial positions we want the clouds to be behind the camera at first and by that I mean like closer to me um yeah like if you're taking a picture and someone's behind you right so I'm going to say gap. set parenthesis clouds ref.
    
    current. position and the vs object is going to be Z10 so if we save that here we go it is gone but if we look turn around there's our clouds that worked well then we want to have uh the can move up and to the left uh so it's so it's off the screen when we scroll in and then it can come down so we're going to say gap. set parentheses can ref. current. position and then we're going to pass that the uh the result of spreading get XY positions we're going to pass it -4 if we do that it moves up and off there it
    
    is this is working well then we move each individual word down and to the right so the words go down and to the right the can goes up to the left so gap. set words ref current. position and for that we are oh actually not current position we are going to need to do current. I'll explain in a second um current. children. map and here we're going to get an arrow function that gets word inside and we're going to return word. position and put a comma there because we have that is all our Target still all right
    
    so we are mapping over all of the words inside this set and then we now need to give it its uh VAR it's var's object the the thing we want to do to it so we're going to again spread the get XY position and this time we're going to say the distance is seven and with a z of two and that just gives it a like I don't know if you can tell but here it's it's a little bit bigger at the bottom here than it is at the top kind of like it's it's flying away from us also and that's why we have the Z of two so now
    
    that should be down and away and there we go so now we want to make the can spin like it does in the final version but not on the world's y AIS cuz that would make it go kind of super wobbly we want it to spin on its own Y axis so we're going to say gap. 2 parentheses can ref. current. rotation oh not that rotation and we're going to pass it Y is math. pi * 2 so we want it to go a full 360° around duration I I put this at 1.7 if you want yours to be faster or slower you can adjust it repeat is going to be
    
    ne1 that's kind of a a must have that means infinite and ease is going to be none and you can try it with wi with uh any other ease or just with that commented out if you want to see why we're doing that uh but yeah it's now it's still a little bit wobbly yeah it's a little bit wobbler than I might like will will work on that but still it is rotating around its own y AIS so that is working um so let's actually update some values on our floating can so come down here open up the part here and right after flavor we
    
    can say rotation intensity that's why we uh added these props so we can customize it like this it's going to be zero float intensity is going to be three float speed is going to be three and we are set there so now that rotation intensity was what was wobbling us and throwing us off a little bit but now um it's just kind of floating up and down on its y AIS and it's looking a lot better let's add some quick comments just so we know what each section here is doing so we say set initial positions and then here we'll say that
    
    this is the uh spinning can and now underneath that put a new comment that's just just says infinite Cloud movement like that and we're going to uh declare some more constants here we're going to say const distance equals 15 and duration const duration equals 6 and now we want to move our clouds off screen like our can and our word so we will do that here we'll say gap. set parentheses array Cloud 2 Cloud 2 ref. current. position comma Cloud one ref. current. position and after that we need our vs
    
    object and that gets a spread uh get XY positions and we're going to pass in distance now if you're not familiar with the spread operator we're essentially returning an X and A Y value because that is what that returns and so we're just busting it out of the object really handy and now let's save that let me see the clouds are gone they are down ready to shoot up and uh you know make it seem like we're falling so we want to move each Cloud group up but with different values so we'll do the first one and then we'll be able to
    
    copy most of it over so gap. 2 and this one's just going to say cloud one ref. Curren position and we're going to say Y is we we're using back ticks CU be plus equals dollar sign and then curly braces get y position and then we're going to pass that distance times 2 and now for our X we can copy that line but change every y oh oh oh oh I I have an error here where I I put get XY positions the autocomplete um did not help me out well did you know it did its best get y position is that what it's called where's that function
    
    get oh look at that get y okay here we go so get y position cool that's fixed and so change this to an X Change uh this to an X and singular and instead of distance * 2 we want distance uh minus 2 or sorry distance times -2 next we're we're going to do an ease of none a repeat of -1 and a duration duration of duration there we we go all right uh I make sure you have a comma there and it doesn't oh I had I closed that for some reason that's weird didn't mean to do that there we go now we see that if we save that we
    
    have this One Cloud group that moves up and to the left okay not bad we can do it to both so grab this and paste it and change Cloud one ref to Cloud 2 ref and now what we're going to do is we're going to put a delay on the second one we're say delay is going to be duration divided by two and that way it will wait until this one's halfway up to start going the first time and then after that they're both going to Loop and just kind of be in sync so let's save and let's watch it work so it's going to wait until it's about halfway
    
    up and then let's go and now they're just going to be in lock step and you're going to keep doing this thing where you're never going to know that it is doing this trick it doesn't look very impressive when you zoom out and do this but when you're in the middle of this uh it's pretty cool right I'm I'm zooming back a little bit so that you kind of get get the effect cuz we still need to zoom on scroll but yeah you would never know it's it's doing what doesn't look nearly as good once you're out all right
    
    we're going to create a scroll timeline now so we can put that underneath our Gap 2 so const scroll TL equals gap. timeline and inside here we need to pass it the object and say scroll trigger our favorite the trigger is going to be the Skydive component from over here wait wait for it this is the hero wait for it there we go Skydive component so it's the entire component that we're working with so say trigger it's going to be Skydive the pin is going to be true so we're going to say yes please pin this
    
    for the duration of the animation and then once you're done let it go and let me keep scrolling so t r u e we want to the start to be top top but this time we're not going to do bottom bottom we're going to say end is going to be uh plus equals 2000 so you can change that value if you want it to last a little bit longer if you have a lot more words maybe you you want to scroll for longer um but 2000 just felt right to me and we'll say scrub is going to be 1.5 so now we can we we don't need to save and see this cuz cuz this isn't
    
    doing anything just yet but in our scroll timeline let's call that scroll timeline dot 2 and the first thing I want to do is I'm going to change the background color cuz this is not a pretty sky it's not where I'm from say body and then we'll pass it the vars object and here we go background color and that's going to be hashtag yeah hash whatever uh c0 F0 F5 and we'll see in a little bit if that worked uh we'll say overwrite Auto because like before with the background colors we we we want to make sure that
    
    it really takes effect so uh overwrite Auto there we go and duration is going to be real quick it's going to be 0.1 and we can go ahead and save that so I'm going to remove orbit controls and you should do the same because then we can't scroll with orbit controls there and I'm going to yank them out of here we are we are done using orbit controls all right oh we are okay that was weird cool that's looking good and then we come down here and we're slowly going to Blue but this is clearly not what we want we we don't
    
    want it to be half green the whole time so we need to add a few more things to this scroll timeline where where was it here we go scroll timeline to body let's add some more stuff here right now uh the only thing that this that this 2,000 pixels of scroll has to do is to change the color so the duration doesn't really matter that much it's all relative to other animations so now let's move the clouds in front of the camera so two parentheses clouds ref Uh current position and we'll pass that a z of zero so it
    
    goes back to where we uh had it in the first place and a duration of3 and so that's already a longer duration than our background color change and we want this to happen right at the start so we'll say zero so that background color is changing and uh this the the clouds are moving at the same time and now let's bring the Canon from the top right going say period two parenthesis oh why I opened it can ref do current. position I know it's it's a lot to just keep typing that um but I do think the gsap folks are going to have a
    
    nice little solution for this maybe we'll see but uh I would like one right x z y zero so we're basically bringing it we're bringing it home and a duration of. 3 and an ease of back out I'm going to say 1.7 so that's just like the the intensity of that and so now if we save let we go up let's come back down let's see how this looks as we scroll down we get blue and we start to see some clouds going in front so they're moving and they're in and we get our can nice all right so right now we're just chilling we got these clouds we've
    
    got this can and uh it just hangs out and that's the end of the animation but this is progress people this is progress now we want to map over the children inside the words ref group and return that position I said I'd come back to it and I did not forget the reason why we did that weird map uh with words ref is because we needed to get a a bunch of things inside of a group we we're not actually animating the group itself we're animating it's children uh so that's why we did that map somewhere around here I
    
    don't know we're we're going to do it again so I'm not too worried about finding it so we want to say period 2 parentheses words ref. current. map and we're going to do that went weird sometimes the audio complete just thinks you're doing something completely different we're going to pass it in Arrow function and we're going to do the same thing where we say word and then word. position all right and if you can find yours you can prob just copy it but I couldn't find mine oh I think it's up with the
    
    Set uh we we set the initial positions yeah right here so sorry if I made you retype it but pass it in object or a a vars object and in here we're actually going to use a great Gap feature called key frames a key frame allows you to create complex animations by defining like multiple steps or you know key frames within a single tween so key frames uh and this is going to take an array so instead of writing separate tween for each step here that that we we want these words to go on we just get to
    
    do this one two and then in here we can um say like all right first go there and then do this and then do that uh just within this one tween within a timeline it gets gets a little bit hairy but uh it's it's it's not going to be too bad this is almost like a nested timeline kind of thing um so in in this key frame we need an object it's going to be a vs object we'll say x0 uh y0 and Z -1 so we want it to like go away from us because right now uh they're down to the right and they're kind of closer and now we want them to
    
    come into the middle and like go in into the distance and then as they go up we want to spread get get XY positions we're going to pass it7 and we only get X and Y there so we need to uh say the Z ourselves and we'll also say -7 so we are pushing these words away and we want to stagger this so uh within so after key frames have a comma after that bracket and say stagger and that's going to be uh 0 three is is what I have you can play with your values and inside the two but after the object here we're going to put a position
    
    parameter of zero so that everything starts at the very beginning and so it's it's a timeline but everything's kind of happening at once but it's still handy to have it within a timeline so we have this coming down and we have dive into better health and there it is that's our animation we are going to spice it up a little bit more though um after the word's finished we want the can to fly by and leave the scene so we're going to do uh two can ref current. position I need to make like a keyboard shortcut
    
    for just typing those two uh words and going to have an object that we spread get XY positions pass that number four because four is going to be a well it it's a positive number so it's going to move us in that direction and have a comma after that say duration is .5 and ease is going to be back in 1.7 so it's going to like kind of like go backwards a little bit before going forward again so that back ease is kind of fun yes see see how it it it overshoots and and then it comes back that's the Backes whoop and I'm coming
    
    back and then it's going to kind of like rear up and get ready and it's going to there you go boom and it leaves awesome now we're not putting a position parameter there because we want it to happen after everything else has run now we want uh the to to get rid of the clouds at the same time so we going to say two clouds ref do current. position need to get sponsored by current position uh Z is going to be seven so we're going to move it back it you know behind us a duration of 0.5 and for this one we also don't need
    
    a position parameter so we can just uh let it happen so we're up here we're living gutsy and then we want to uh fly through the sky a little bit dive into better health and then let's get out of here and then we are Cloud free and can free so the only thing is um I don't love this right now like it's it's fine but we can do kind of a simple thing thing to make it a little bit splashier so remember I told you to keep the floating can open if you didn't you can it's fine you can open it now but we're
    
    going to put a light inside the can so Point light and going say intensity is going to be 30 color it's going to be hash uh 8 C 0413 it's going to be a red because we uh have the Cherry here so and we say Decay is going to be uh 0 6 and then close that up and now we should see the difference let's come down to our o see how that these clouds like they take on a little bit more um depth now that this uh light is there and even when dive comes it's kind of dark down there as it goes by it it gets lit up so that's kind
    
    of cool at least I think so um if you're if you're doing a different flavor you might want a green uh light or whatever um you I I I just wanted to kind of feel like it's affec the things around it right so I don't know I like that effect if you don't you can drop it and you might just want to shine some more light on those those words in some other way then so that is it for skydiving uh I hope you got your license or your permit I don't know what do you need need a Skydive can anyone do that well our soda
    
    can can and uh great job we're going to make our Carousel next let's get into it we all right the rumors are true it is time to make our Carousel slice let's check it out first in the website scroll down this is the carousel so we have our buttons and we're going to change textures and spin this can around have the cool wavy circles in the background so for this we only really need a couple of fields I'm just going to use this choose your flavor and uh this down at the bottom because the flavor here uh
    
    isn't something that we want to put in prismic you could put all the labels and all the flavors in prismic I think I mentioned this before uh as a custom type we're just not doing it for this course that you don't have to enter a a bunch of data in prismic but let's go ahead and create this so we're going to go and make our Carousel slice we're going to open Slice machine create our new slice create and we will say Carousel and let's update that screenshot I've got it right here and that looks great so we have a
    
    screenshot now we have some modeling to do we're going to add a field we're going to add a rich text and call it heading and we're going to narrow that down to just be and H2 that only that does not allow multiple paragraphs and then we're going to do uh I call it price copy might not make sense but copy is like text on a page and it's like it's not exactly a price I guess it's more I don't know right the 12 cans so that's what I called it that's what we're going with uh we're going to go with paragraph
    
    and we don't need multiple paragraphs so I'm just going to say done for that and then we want to add it to this page and select existing Carousel add we should be able to just go ahead and push that up [Music] and there we go we're set so we're going to add that to our homepage now uh if we reload we should see our Skydive component although it's not going to be yeah so the yellow background here um once again it's it's going to be yellow because we we have to scroll to make it blue right so our Skydive component
    
    isn't going to be the best uh preview here but um like I said you could always have some logic in there that detects whether or not it's in slice machine or sorry in slice simulator and instead just puts an an image like the uh screenshot as a uh full size fixed image on the component just figured for for this we're just not going to bother we're going to add the carousel though and for the carousel I think it says choose your flavor it does choose your flavor and I'm going to say 12 cans you can mark your price if you want to uh
    
    you know undercut me and sell yours for 12 bucks go for it uh we're going to save and we are going to publish and now we're going to build it out and animate it so let's come back to our fizzy site remember reload twice and let's go all the way up and grab those colors nice all right so we got placeholder component for Carousel let's get to styling or I mean like you know building out that slice so open it up uh let's go Carousel index and we're going to close the sidebar first we are going to make this a use
    
    client and we're going to start by pulling in the flavor object from our uh from our for what they call this like the resources dock um I have a flavors here so it it's it's like a variable inside index. TSX so let go ahead and grab this I didn't want to make you type all of this so we're just going to grab that hit copy and we can pop that right below our Imports so I'm going to paste flavors in there and it says I don't know what soda Canam props is man what what are you talking about but hopefully we can get an Auto Import
    
    on that yep from at component soda can so we're importing that type and there we go so with this one we're actually going to go without our bounded component so we don't need to uh swap that out we don't need like the padding and everything it gives us but we're going to style this section so we're going to say class name and we'll say Carousel just to give it a name that we can grab later relative grid H screen grid rows and we're going to put brackets to make a I forget what this is called exactly but just like a custom
    
    value uh so we're going to say Auto comma 4fr comma Auto and that seems to work nicely for the can in the middle and the buttons just taking up as much space as they need which is not much do justify Center uh overflow hidden BG white oh I didn't hit a space and py12 text white all right so if we save that we should see this white area and all our text is white right now so we're not really going to see any of this right now um we're going to make a background div on top of that white though so go
    
    ahead and you can keep the placeholder text there still uh but we'll I'm going to say period background hit Tab and we can actually make this a self-closing div because it's only to exist as like a a background and I'll show you why we are doing it this way in a second so pointer events none uh absolute inset zero BG is going to be brackets # 71 0523 let's get that 710 0 523 opacity 50 now that is kind of part of the reason why we're doing it because we want to be able to change the color on this and set it to opacity 50 and
    
    have that all stack on top of a white background to give it that that look so that is half of that on top of white next we are going to bring in our heading so let's go over here uh let's go to our slice Carousel and let's show code snippet grab both of these going to get rid of placeholder component text and paste that there and paste that there import prismic Rich text and what we're going to do actually is we're going to I'm going to I'm going to uh make it lose money I'm gonna I don't know I was going to make a joke about it
    
    not being rich anymore but we're just going to take out the rich part of prisic Rich text and import prismic text from the same library and uh I'm not sure if you mentioned it before but that just returns a string so we're going to wrap that in an H2 that is relative and I just like having the class name done for me it's so nice uh we're going to say on this we're going to say text Center oh there we go text 5xl and font bold if we hit save do we see anything we do perfect now now let's add the div
    
    that's going to hold on to the um like like the carousel component so just say grid and in here let's just comment out so going go left and then can and then write just to kind of leave that for now uh and we're going to add some more styles to this grid uh I I misspoke earlier I was confusing these two grids um so this is grid rows I I thought it was the um the grid that goes here here and here but it's the top middle bottom so that is the auto 4fr a Auto this one is going to just be Auto auto auto so
    
    grid calls let me just dou check yeah so grid calls Auto comma Auto comma Auto make sure you don't put any spaces otherwise this will not work and I'm going to say items Center and I save that nothing will change um but we want to bring our can in let's go ahead and do that now unlike other uh slices we're going to do our whole scene right here because it's not really that uh comp Lex of a scene so underneath can we'll add our view view and import that from dry class name is going to be aspect square and that's
    
    going to make sure that it has a 1:1 aspect ratio it'll always stay square and we'll set the height to brackets 70 V Min so that will go off of the smaller of the width or the height and it will take up 70% of that smaller value or or it'll it it'll be the size of 70% of that smaller value next we're going to say Min height 40 and that view we're just going to close it and open it up and inside here we're going to say floating can and Float intensity will be3 and rotation intensity will be one so not the most intense you don't want
    
    to distract too much from the I don't know uh the like sales aspect of it I guess um but before we save we're just going to grab a handy dry helper called Center so we're going to pop that there and wrap it around floating can and here for Center we're going to say position like that and brackets uh 0 0 and then 1.5 oh scroll down and there we go we have our dark mysterious uh can uh this 1.5 just shifts it I think it was like a little bit far back before yeah see so I just brought it forward you can adjust
    
    yours but this will probably work best I was I've been tweaking lots of numbers uh now we need an environment for some lighting we can just do that right inside the view here so we'll say environment and files equals uh Slash HDR lobby. HDR and we're also going to add environment intensity that'll be 6 and environment rotation so if if like if we don't like the stuff that's facing us we can actually spin the environment and make it so that like oh that light is now facing the the way we would like it to
    
    so we're going to pass that an array say 0 comma 3 comma 0 and you can uh toggle that on and off and see if you like my choice if you don't get rid of it do your own thing and that's looking pretty decent it's a little dark uh and I did it on purpose because I want to add a a directional light now for a little bit of punch I didn't like the way it looked with uh just like one or 1.5 I it it seemed better this way so directional light intensity is going to be six and the position of it is going to be 0
    
    comma 1 comma 1 and save that there we go so we get some nice highlights up there not as much down there we don't really need it but that's looking pretty good all right we'll add the text at the bottom you know the uh the price stuff I'll comment that out for now we'll add that once we have some functionality and I want to do that right now let's get some function some functions going uh no let's let's make this actually do something when we let's add some buttons let's make them clicky you know uh so at
    
    the top we need to use state so we're going to say const uh square brackets current flate current sorry I'm I'm used to autocomplete we need to type this one ourselves current flavor index and then Set current flavor index and so that's going to keep track of where we are in um our Carousel so as we move backward and forward we're going to move through uh this this index we'll say use State import that from react and we're going to set that to zero to start with excellent now let's make a change flavor
    
    so I'm going to say function change flavor and this will take an index and that'll be a number type and going to open up our curly bryces and say const next index is equal to parentheses index plus flavors. length and we're going to say modulo or the percent sign modulo flavors do length and so what that does is by using the modulo operator we keep the next index inside the bounds of the number of flavors because this will uh divide by the length and if there's a remainder it will return that remainder
    
    but if it's like uh this is four and the length is four it will return zero so this is a nice little way to keep it within so we don't go to like an index of like 12 and there's not 12 items then we get narrower so now just underneath that next index we want to call our Set current flavor and we are going to pass that the next index like that and so now let's create some basic buttons that change the flavor uh because the transparent background we'll need like a a z index thing on it but don't worry about it
    
    we'll handle it so I'm going to create a regular button lowercase b we're not importing the button from before button like that say onclick and we're going to have an arrow function that gets called when this is clicked we'll say change flavor pass that current flavor index plus one and then we can and we'll close that that but uh inside we'll say uh left and you can do that we don't see anything just yet let's give this a class name and we're going to say Z is 20 there we go that brings it up for
    
    some reason I think it's part of the opacity in the background don't worry it's not going to be a problem later but we want to add our flavor to our floating can so before the closing tag say flavor and we're going to pass that that flavors like that and then we're going to use the index that we have the current flavor index and then dot flavor so let's see if we're getting anything from this if we save that here we go we are getting a color changing can now it's not going to look very cool for a
    
    while it's just going to look like you know it's just changing in an instant like that we will add that spin so it has a a little more style to it so let's add a button for the right as well so copy this button and where's our other comment oh it's all the way down there oh yeah cuz cuz the view is kind of big but it's not that big that we need to like have its own component or anything um so only thing we're going to change is the minus one for current flavor index so and we'll change the word to
    
    write so now if we go to a strawberry we can go back to watermelon to Strawberry nice all right now let's add the text at the bottom that I promised you uh that's going to update as the flavor changes so we can uh uncomment out that PR Rich text we're going to make one div that goes around it all so we're going to say period text area and we're going to open that up move the Pres text inside of it get some more styles on here relative MX auto text Center and then inside here we want a div wrapped around a paragraph So first
    
    the div we're going to call it period text wrapper and inside we will put a paragraph and inside there we're going to put current Oh wait we're going to say flavors and then brackets just like we have where is it uh here so current flavor index and then we are going to pass that the name all right so let's give this text wrapper a little more couple more styles text for Excel and font medium that's how you spell font medium and underneath that although we can probably save it now yeah there we go we're getting some getting some
    
    traction looking good and underneath that we're just going to wrap this PR Rich Text in a div as well to give it some style so I'm say period mt2 tab on that and there we go text to XL font normal and opacity 90 that's just going to make it um you know not stand out as much as the strawberry lemonade title but it's still readable it's still there so now our Carousel works but it is pretty ugly uh let's start by making our buttons prettier so we are going to grab a component from the resource doc I'm
    
    going to open up over here to uh create a new component for it because we're going to grab Arrow uh icon TSX so let's come to our resources you can see we have a couple here going to grab Arrow icon first hit copy and paste that in this is really just an SVG made into a react component as you can see it is very simple and actually we are um only going to use this in the carousel so take it out of components drag it to your Carousel just makes more sense to collocate it because we're only using it
    
    here so now that it's here let's go back to our index and we need to pull it in but we're going to pull it into a new uh function we're going to create a uh arrow button at the bottom so say function arrow button and I'll say parentheses and then we'll uh destructure our props but I also want to you know finish with the whole function thing and then we'll return that button and change flavor don't worry about that we we we're not going to need that in a second uh but what we do want to do is create a uh
    
    props type so we're going to say type is arrow button props and first we're going to say Direction that's going to be oh that's optional and it's going to be a string of either right and then this is a union so can it could be either right right or left that's all it can be you can't do up down left or right we're not giving those options so next we're going to do a label and that's going to be a [Music] string and last we're going to need an onclick and that will be a arrow function that just returns void I think
    
    we talked about this already so we have our arrow button props now we can come down here after this object say colon arrow button prop so now we're going to get a little bit of help uh with autocomplete here so if I hit uh control space I see my three options pretty cool I'll bring in label I will bring in onclick and I will bring in Direction I'm going to give direction a default I'll just give it right doesn't really matter but might as well so on click we're going to remove this function and
    
    just say onclick like that and we can go back to our fizzy and I'm going to swap out arrow button for these buttons where they so I'm going to swap button for arrow button and the onclick that is going to work wait what what is it uh it's upset that it doesn't have a couple of things so um onclick is not assignable right it's saying uh I don't I don't mess with children please don't don't give me any children so we're going to get rid of that and it's already happier it doesn't want a class name we are not taking that
    
    but we do need to give it a direction and a label so we're going to say uh because it's this is the right button we're going to say uh direction is right and the label is going to say next flavor and we can copy this bring it up to our other button we're going to say plus one here and we're going to say previous and direction is left if we hit save um ah I think we're still saying the word right down here yeah so we got to uh change that to label ironically it was wrong uh so it says previous flavor and next flavor
    
    don't worry about that right now because we're going to hide that um for for the nice Arrow but we want to keep that for screen readers so let's style this button we've got a lot of classes to add to the uh z20 I don't think we even need the z20 let's delete the z20 and if it comes back we'll sa uh we're going to say size is 12 and is a shorthand for setting the width and the height to the same value so pretty handy if you haven't used it before I say rounded full to get that beautiful circle look uh border is going to be
    
    two I'm going to say border border border is going to be white and sry I lost my place uh BG is going to be white sl10 so that puts a white background at 10% opacity see how it gives us the RGB and then just 0.1 so that's a nice little shorthand for adding opacity to a color uh we're going to say p is three padding three all around opacity it's going to be p a c ity is 85 we're going to say ring white Focus colon so this is when you are focused on this button we're going to say outline none and that's because we're
    
    going to to use a uh a focus ring one of these styles that comes with Tailwind is pretty great say Focus visible so this is if they're using the keyboard we don't need it to have this Focus ring if you're clicking on we only want it to be when you're using the keyboard Focus visible we'll say opacity 100 so we'll make it a little bit more obvious and focus visible again we're going to say ring for and and on medium screens and above MD size 16 LG size 20 all right let's save that and it is looking pretty good minus that text
    
    so let's pull in the arrow icon we going to pop that right here Arrow icon import it from it came in from icon and that's fine because it is collocated with this slice that's the time I don't get mad at it um and then around this label we actually want an S A span. Sr only and then we are now much more accessible this Arrow icon is going to get a little bit of styling that is um you know it's going to be logical it's it's it's going to depend on the direction so we're going to say class name and we're going to give it the
    
    curly braces we're going to import CLS X and we're going to call that as a function and we're going to say if the direction is equal to right and uh then we we are going to add negative scale x 100 so if this is true then we're we're going to return that so scale x 100 but it's going to be negative so there we go so it it just scales it in the opposite direction kind of inverts it and it is looking great so now if you click that that is working our our name changes our labels change we're in good shape so the buttons are
    
    done let's now bring in those wavy circles in the background to give us something uh kind of cool to look at so come over here get your wavy circles now pop those right in that same folder Carousel wavy circles. TSX and once again this is really just a um an SVG that I made in figma and it has a couple of Gap tween in it that you should definitely be able to figure out there's nothing too wild here transform origin just tells us where we want the animation or the uh the the transform to start at so it's kind of like if you put
    
    your finger on a piece of paper like dead center and then spin it it's going to spin you know from the center but if you put your finger at the corner of it it's going to spin in like a much weirder way so we want it dead center so that they spin in a you know a a normal way and anything else here that is worth pointing out um no we're just using current color to color our uh circles and we've used that with the logo already so we're familiar with that now where do we want to put this we want to put this below
    
    our background element so here's our background come up here and say wavy circles and we're going to actually style this uh kind of custom for this component I I don't like putting um these sorts of styles in here just in case you want to use this somewhere else I keep saying like please build on this site make it cooler uh do whatever you want with it if you want to put these wavy circles all over the place go for it um let's style it here now though class name is absolute we're going to say left is uh 1
    
    12 top is 1 12 we are doing a nice little absolute centering trick H is going to be uh brackets 120 uh V Min so we're going to make it bigger than the smallest side uh by a 20% bigger so 120% uh negative translate uh x 12 did I type that right I did and then negative Translate Y 12 and last we're going to say text is brackets # 71 0523 and that's just going to set a a uh value for right now you can see that it is the same as our background we're going to be changing that with gap in just a little bit but that's looking
    
    really good now we just need to animate the transition inside the change flavor function because this uh this happens a little too quick and our background doesn't change color so we're going to spin the can super fast that you won't even notice the texture switching as much well yeah you might still notice but it's going to seem like it fades rather than has this sudden uh swap so we want to go up to the very top and flavors we're just going to set a constant up here so we're going to say const spins on change and we're going to
    
    set that to eight that seems to be a a decent number and you can tweak it later I'm just going to stop saying that because uh you know I I I know you know so uh inside Carousel we have our state we have our change flavor in uh just under our state we're going to make a soda can ref so const soda can ref I'm not sure why I called it a soda can ref it's the first time I'm doing that right it's always been can use ref and we are going to use a group and then null let's import that group from three all right that's Happy
    
    uh we're going to add that to the floating can where is it it's right here so we're going to say ref equals floating sorry soda can ref and then in that chain flavor function we want to return if there is no soda can ref so if no soda can ref current return just a nice little check so that when we uh go to work on this later it doesn't say hey that that might not exist that's that's how we check it so the typescript is happy now let's import Gap up at the top we don't need scroll trigger for this one but we do need uh
    
    Gap and use Gap so import Gap from Gap and I keep doing that import use three sorry no no not use three use Gap so many things that we're doing in this course uh just like that and then gap. register plugin use Gap all right we're set there I'm going to just quickly reorganize a little bit quick tidying up call me the Marie condo of code or don't I you know it's completely fine and then the components of soda can props let's grab that oh I'm gonna put it right next to here and we will shift it down and that's a little
    
    bit more organized all right lots of things to to pull in here we're we're we're very busy so uh we oh actually you know what we don't need use gsap now that I think of it um so I just made you do it for the heck of it so we can remove used Gap and we can move remove it there because we're going to be calling it inside of a function so this function won't run um before there is something on the screen to call it so we don't really need to worry about that so under next index it's fun to say we're going to say const TL equals gap.
    
    timeline and create a new timeline and we're going to start off by saying TL do2 and we're going to uh grab the soda can ref. Curren rotation and on oh it did that autocomplete thing again and after that we need the uh vars object we're going to say Y is it's going to get a little bit tricky so just uh you know prepare so we need to check and we're going to do a turnery here so if index is greater than the current flavor index then we're going to go one way but if the new index is less than the current flavor index we're going to
    
    go another way right so this is how we're going to figure out which direction we spin so we're going to say index greater than current flavor index question mark and we can actually move the question mark to a new line uh going to do back ticks minus equals dollar sign curly braces math. Pi * 2 time spins on change so we're going to go uh you know negative uh eight rotations is is is what we're going to do if if that is the case but if it's not the case if index is smaller then we need to do the
    
    opposite so I'm going to grab this again and I think it's going to be a plus here just go the opposite direction so it wasn't too bad I I probably freaked you out for no reason say ease is power to in out and last uh we we don't have to say it but duration of one sometimes I just like to clarify so that I can see and we're going to uh do something else that might be unnecessary just put a position parameter that that is going to start at zero if we ever move this around it's good that we just lock that in that
    
    that's going to start there next we're going to chain another two on there and we're going to say uh first a type two going to say background I'm sorry do background and we say comma so just like you would with CSS we can select multiple um CSS classes uh by just putting a comma and a space so we want the background we want wavy circles outer and we want comma wavy circles inner and make sure you you do the comma if you uh did that is that period supposed to be there that's weird like that's breaking on the period uh if
    
    you don't do the commas it's not going to work next we want to do background color uh so we're going to change both the background color and the fill of these just to kind of uh get get all of it so the background has a background color but the uh circles have a fill so we're going to say background color is going to be flavors and say next index and that is coming from right here right we we figured that out with the modulo next index. color so now we have the background color we're going to just copy and paste
    
    that and change this to fill like that and then we'll say ease we'll do the same thing duration um I I originally had these values here because I was like tweaking them and trying to uh see what felt right and ended up just landing on duration of one so we want this to happen at the same time so we're going to put it as a zero like that let's chain another thing we're going to we're going to move the text wrapper if you don't remember text wrapper that is uh the one inside text area so we we're
    
    going to animate the thing that's wrapping around the name of the flavor where's my cursor here we go so we're going to do two parentheses. text wrapper and we'll pass it var's object of duration is 2 Y is -10 so we're going to move it up and opacity is zero and that will also happen immediately so we have a lot of stuff happening right away then we're going to actually take a little break uh with our animations because this is uh well you'll see just follow me so two we'll say parenthesis uh we are going to to
    
    just pass it an object just an object and you'll be surprised it's happy with that now we need a vars object and we're going to say on start now this is a call back that Gap has that it it U there are a bunch of call backs that you can use with gap so on start on complete on repeat on delay on delay huh yeah anyway um these are really useful and we're just going to say hey as soon as this tween starts here's what we want to do on start we're going to call this function and it's Set current flavor
    
    index to next index so what we want to do and we're going to have a comma I'm say 0. five the position parameter of 0. five what we need to do is we need to have it change color at the midpoint of our animation uh yeah yeah it it it has to change at the midpoint because at that midpoint the can is like at its fastest speed and the text has disappeared so we need to change it then and then the text can come back in and the can can slow down so that's the entire idea we have 0. five for that reason and
    
    so uh and and and once again we have a duration of one and so this is going to happen at the halfway point uh for everything else moving around so 0 five and we're going to change one more uh tween on here I'm going to say two uh period text wrapper we have to bring it back in otherwise it's just not going to ever be seen again that's s duration is going to be 0. 2 Y is zero I'm going to bring it back to where it was and opacity is going to be one and that will happen at 7 so it'll happen a little bit
    
    after the midpoint of these other animations now that was a bunch of of uh Gap without actually testing it out let's see if we got it so uh let's reload CU that oh we we still have this uh remove your set color flavor index um from the very bottom so you should have this now uh I need to save there we go so now spins and it feels like it's in and out but it's actually happening like as a hard cut but you can't really tell and the background changing color helps with that as well now you might have noticed
    
    that wavy circles uh these each have an opacity of 0.5 and 0.5 and remember our background has an opacity of 0.5 so basically what we're doing is we're taking one color and stacking it three times on top of itself until it gets like nice and dark to what it kind of should be uh here in the center so just a fun little trick that that we're doing to uh I don't know I I like it and that way we don't have to come up with a whole color palette we're just using uh I think as a tint is the the right word
    
    but yeah I guess we could talk colors all day uh the moral of the story is that this slice is complete uh you could add a buy button to this if you want to link it to a product page or for a full website experience but for now this is great and we just have a couple more slices to go play with this for a little bit have fun with it and uh you know if you ever make new flavors uh toss them in here and just uh go wild all right we're going to make our alternating text slice so that's is this one right here
    
    where we have that on the left and then on the right and then back on the left now we want this slice to be able to take as many intersections like uh these different you know paragraphs with heading and then copy uh as our editors want so we're going to use repeatable groups it's a prismic feature and a responsive timeline that um makes a tween for every section that we add there so we're going to open Slice machine make a new slice im an alternating text and we're going to add the screenshot let's do
    
    it create say alternating text hit enter we're going to update screenshot I've got the screenshot over here dropping that in and we're looking good um let's model this out so like I said we're going to add a group a repeatable group it says a set of fields that editors can repeat so we'll see it in full effect once we push this up to prismic but you kind of get the idea of like we're we're going to want it that to repeat text group so we're going to call it and we're going to add a field in here not up here but in here to the
    
    group itself add Rich text and say heading that's going to be an H2 you're used to this song and dance by now uh and then we're going to add another field it's going be rich text and I'm just going to say body and you know I'm going to be so generous I'm going to give them paragraph and bold and italic and multiple paragraphs let's just give it all to them so we have our Fields let's add it to our page type and if you add other page types you could also add it to them can be added to as many page
    
    types or custom types or whatever that that you need it to be added to so add it there and then our changes should reflect the page and the slice so go ahead and push we're going to add the slice and enter content from the resource doc so I'm not going to make you type out all of this stuff um so let's go over here and grab this alternating alternating a text slice and we see that we get a uh text group so I'm going to pull the um notion doc off and you see it alternating text content so yeah go
    
    ahead and open that and we're going to copy and paste in got friendly goodness paste into the body and now we're going to add another item so we can add as many of these heading body combinations as we need to we're just going to do three for this but if you want to like you know have them scrolling all day that's that's your thing do your thing and last one naturally refreshing and the body here all right cool we've got some good looking content I'm all about having it feel like a real website so I like when
    
    there's like actual content and not just like Laur msum so now that we have that added uh slice is not complete yet we still have some stuff to do um but we can reload our page and check it out down here there we go placeholder component for alternating text variation default slices so let's put this back over there and we are going to open our alternating text so to start what do you think we're going to do use client um anytime we're using these animations we just got to do it this time we are going to swap out section
    
    for bounded and make sure it finished is the autocomplete down there and we are going to style our bounded component and say class name it's going to be alternating text container and relative text Sky 950 and that's all we need on that so inside let's wipe out this placeholder we're going to create a div and it's not g to have anything on it but inside that div we are going to have a do grid so open that up and then on that grid we also want to put relative all right so now our view is going to go
    
    right here but right now I going to work on the HTML so just put a view goes here comment so we know to come back for it so now we need to map over our uh groups so we go to alternating text come back here let's check out the code Snippets here we see slice primary text group. map so go ahead and grab that I'm going to put that right underneath where the view is going to go and then so inside we're going to render a div oh it doesn't it gets a little funny you can't do the autocomplete inside these
    
    sometimes and div all right now it's happy uh give this div a key because When We're looping over things like this you have to do that so going to say keyy is as text parentheses and let's import that from present client as text is going to be item. heading and now it's happy that's our key so that we uh yeah so that it has a unique value now we can get our other two Snippets we have our heading and our body we're going to grab that first one and given them a lot of space we're going to put a few more elements in here
    
    so like spread them out and this one and import your prismic Rich text component cool so let's add some styles to this original div with a key on it say class name we're going to say alternating section grid H screen make it as as as big as the screen Place items Center Gap X12 MD grid calls 2 so on medium screens and above we have this back and forth two grid thing but then it'll fall down to a single column as a default now we want to wrap these rich texts in divs so just say div and wrap it around both of them
    
    because we need to kind of group them together and we need this div to shift to the right if the index uh oh I need to grab the index here if the index is an odd number so every other we need to shift over to the right so we're going to say class name and we're going to give it an object and say index modulo 2 equals or sorry triple equals zero so if the index modulo 2 returns nothing uh or or sorry returns zero uh then it's even and so we're going to say call start one but if not then it's odd I'm going to say
    
    medium screens and above call start two and so if we save that let's see if we're getting anything here we have it on the left we have it on the right there we go it is already working obviously we're not styled but it's already going well so we're going to change this prismic Rich text we're going to uh break the bank I don't know we got to come up with something for that uh just make it into a string we're going to do our own H2 with uh let's say text balance and wrap that around prismic text add a couple more Styles text
    
    6xl and font bold see how that looks it looks beautiful one more we have the prismic rich text wrap this in a div uh we say period Mt for period text XL I love chain and stuff we're already done styling that amazing I love it our component is built and styled and can take as many of these sections as we need to so now let's bring the can in by creating a scene uh not in the carousel here we go in alternating text scene. TSX we're going to go with tsrf C love it and we're going to set up the used client at the
    
    top and we're going to add a group instead of this div and inside the group we want to have a floating can and an environment and we're going to give the environment that Lobby so files equals HDR lobby. HDR and environment intensity we're going to say 1.5 close that environment and we're going to give the floating can a flavor of strawberry should complete it for us strawberry lemonade perfect so save that and we're going to add this scene right where the view goes here so we need to First add a view so view no
    
    not view helper view from dry yes then inside here we're going to do the scene from do scene and we shouldn't have to pass anything so we should we we don't see it because this view doesn't have any uh size to it right so class name I'm going to say alternating text view absolute left absolute left zero uh top zero and height is screen and width is full now if we save there perfect we have an absolutely positioned can right there hovering it's not moving with us though scroll trigger is going to take
    
    care of that for us so let's get our animation like ready by you know giving us something to grab on to const can ref equals use ref we import it we pass it a group from three and it is null to start with and they want to put that canre on our group all right that looks good and now we also want some colors here so we'll say const BG colors these will uh you know I think you'll figure out what these are for and we're going to say # FFA 6 B5 for the first hash uh E9 C ff6 and # CBE f9a we got our three colors you can add
    
    more if you'd like um we're putting it in an array so that it can like Loop over and all of your sections will have a color change now we want to import Gap and we are going uh with all three the floating can down with all of the gsap import so import Gap from Gap where didn't that work Gap from Gap import scroll trigger from gsap scroll trigger and import use Gap from Gap react what is this upset about it's declared but value never read oh it did twice that's interesting all right we got our Imports
    
    and underneath that we need gap. register plugin and scroll trigger nope and use Gap there we go all right underneath BG Colors Let's call use Gap and pass it an arrow function inside here we're going to check to see if that canre exists if no canrec current return get out of here don't do it and then we need to get all of the alternating sections once once we get past that we'll say okay what are your sections we're going to use a simple Gap utility function oh and by the way when I say sections I don't mean in the HTML
    
    sense I'm just kind of calling this group of text a section so just want to be super clear there that that it's not a literal section element but const sections equals gap. utils do2 array really handy little uh helper function and we're going to give it the class alternating sections sorry section it's going to be plural because there are multiple of them so now we're going to get our sections uh it's an array of those elements now I want to create a a timeline with scroll trigger we're going to use the pin property for this so that
    
    like I said the can sticks so say const TL and you can call it scroll TL maybe specify there that sounds good gap. timeline and we're going to pass it a object I'm going to say scroll trigger we're using it so much in this course I love it so the trigger is going to be period alternating LT e r n iing there we go text View and the end trigger we we'll we'll touch on this in a second uh and maybe we should do markers for this to really see it end trigger is going to be do alternating text container and then we need to say pin is
    
    true start is going to be top top and end is going to be bottom bottom there we go and scrub for this we're just going to say true um it's going to be the same as us passing the number one there because that that is the default now that we have this scroll timeline let's put it into effect uh wait actually I was going to fall into Old habit it's there and just start doing Scroll timeline. 2 blah blah blah but uh because this component can take any number of sections we need to Loop over each and add twns to the
    
    timeline for each one like if we only have this section we just need the one tween if we have 12 sections we need 12 twns so 12 twns just fun to say uh so we're going to do a four each over the sections so we'll say sections do for for each and this is going to take an arrow function and inside here we're going to say underscore because we're not going to use this actually we don't we don't need the section itself we just need to add um a tween say index because we're we're going to actually use that and
    
    we're going to skip the first section because the can is already in well it's it's going to be already in a good place for that so we don't need to animate it to anything thing um and if there's no can we we want to stop so grab this if no can ref current for some reason once you go into the sections uh for each it it wants to be sure of that again so check for that and also check if index triple equals z return you could combine these into one but I think I don't know for me it it makes it clearer that we're
    
    not checking for the same thing here then we're going to make a simple is odd variable so const is odd index modulo to is not equal to so exclamation mark double equals zero so if it's yeah that will be true if if that's odd it's going to be true uh then we want to start our timeline in here and by start I I I really mean we're going to add a tween to the scroll timeline that that exists so say scroll timeline uh do2 parenthesis can ref. current. position and we're going to pass it a vars object that has e actually let's do
    
    the xer so X is going to be checking for is odd question mark so it's going be a turnery uh and if it is odd we're going to go negative one so if it's it's odd like this one we want to shift this to the left so X going be -1 but otherwise if it's even we want to shift it to the right so we want to move over there that makes sense uh then we want ease is Circ in out that's just the ease that I I liked for this and a delay of 0.5 and let's see what else we're going to need there well first let's save it and
    
    we should see if we reload um yeah it shifts back and forth it it'll stay in the center here because we haven't like placed it anywhere but we can actually do that on the group itself so let's do that say rotation I sorry uh position and we could do the full array but I also want to show you this shorthand can say position hyen x equals 1 and now if if we save it and it does the thing there we go so it's no I was all at the bottom so it'll start there at position X1 and then it'll shift over and shift back nice so I also want to um
    
    make it kind of like turn towards the words that it is next to so let's add a rotation here rotation Y is going to be .3 so I'll turn it a little bit towards the camera then so let's add that little rotation trick to our timeline uh I'm going to grab this to and try to reuse as much of it as I can I'm going to copy and paste it and canre current rotation and instead of X we're going to change the Y the rotation on the Y and we're going to check is odd and this first value is going to be 0.4 and if it's even or if you know the
    
    second value is going to be negative .4 we're going to have a delay of zero you can just get get rid of the delay really um and our ease is going to be back. inout like that and this is going to happen at the exact same time as the previous item before it so we can use this um Arrow or or or this pointer to say hey whatever they're doing I want to do that so uh make me animate at the same time as them it's just an another way to like like link these two together um so these would be run running at the
    
    same time uh we're going to change one more animation on here we want to change the background to uh one of our background color so we're going to say dot two and we're going to pass it I'm not sure I opened that up uh pass it alternating text container and in our vs object we want to say background color is gap. utils wrap now wrap is a really cool little function in that it will let's see if that has a description um yeah Returns the next number in a Range after the given index jumping to the start after the end has been reached
    
    so if we're wrapping around red green yellow um by giving it a number of five it's going to give you yellow back so it just keeps going around and around and it'll uh return the right value for you so we're going to say BG colors and then we're going to pass it index so we're always going to just kind of keep going in this order forever and that takes care of our background Colors Let's reload and see how that goes uh happened a little fast let's see uh uh there's something wrong there you see how it's like getting dim and
    
    then coming back we're definitely uh doing this on the wrong div or we never styled this to start with a color maybe that's what we need to do yeah so let's go to our index and right up here in alternating text container uh anywhere you want to put it it'll it'll move anyway BG yellow 300 so let's give it a starting State and hopefully that gets rid of that issue on reload so we get green purple and yellow cool that looks a lot better you see how how I could kind of tell like that dimness was just not right so
    
    much much better so this is looking pretty good uh only problem is that on mobile uh the can refuses to leave and just kind of hangs out so we're going to borrow that technique that we used for uh the hero and we're going to grab is desktop and check if that is there before we render that view so I'm just going to pull con's desktop I'm going to grab this line line 31 for me and bring it into my alternating text right here and I'm going import use media query from at Hooks and then I'm going to use this is
    
    desktop and and and parentheses and like that we only render it if it's on desktop if it goes below certain spot um that should be working all right let's see what's going on that's what I meant to do uh it helps to look at the right site I was looking at the uh whoops all over the place uh I was looking at the live site of course that's not going to work um so coming down here and we need to find a size where it is good to have it around because right now um yeah that looks pretty good it got a lot brighter is
    
    that just me am I imagining stuff now it might be fine actually um so now if we go smaller oh remove child on node so because we can sometimes get a uh a error that we are removing a child that is not actually part of that because of the whole views thing that we're doing we're going to move it over to the hero so take your is desktop and plop it over oh no sorry not the hero the scene uh my apologies so we are going to import our use media query here and we're going to be using this is desktop
    
    with the minwidth 768 over here you got couple things we want to touch so first off if it's narrower we want the position X not to be one so we're going to check is desktop question mark if it is one if not put it right in the center let's try that not sure what size we need to get to oh but it's that that one's not going to work because it is um there we go that the the the animations are still going to take hold so that's why we need to edit those two but now we have a nice centered can we'll take care of the text in a little
    
    bit and next yeah let's actually come up here and do that let's figure out this x value outside of here so we don't want to um we don't want to add another Turner here it get really really hairy it' be tough to to reason about um so let's say uh const X position equal to to is desktop if so then we can copy this and put that in there otherwise uh we want it just to stay in the middle and the float should be fine oh but the middle is zero all right so that should work let's see how that goes and we Reload It come on down and yep
    
    and so it's just rotating let's make sure it still works on desktop it does not uh here we go there we go it it does it just might need some help uh being reactive or responsive when we go between that should be taken care of in that hook but maybe because the this is set already so let let's recall uh use Gap if is desktop changes okay so at the end of used Gap we want to pass it another uh object and say dependencies say is desktop that way if that changes um our animations will uh be reprocessed
    
    and it it'll make a new timeline that keeps things uh in the center see it just did it uh I thought it did to be honest um I did not uh Focus as much on mobile for this because it's really a desktop kind of experience but it would be good if this does still work on mobile at the worst we can hide it but I'd like to have something here all right so I went and made a solution for us I'm going to walk you through it real quick so it'll look the same on on desktop but if we scale it down and then reload just to make sure it's in the
    
    center we have this cool little blur in the background we can make it even more um like high contrast with a little bit of color but right now all we're doing is putting uh backdrop blur LG on this uh div that just swaps us back and forth so what I did uh and what you've got to do uh is go ahead find the div that we just had index modulo 2 call start one call start 2 on uh import clsx and wrap the uh the the original bit in clsx and then hit a comma and we're going to do rounded LG P4 and then backdrop blur
    
    LG and what we can do also to to increase the contrast here we're going to say Max MD and that is going to kind of do the reverse of what most of Tailwinds uh responsive Styles does and it's going to make it so it only shows up uh on medium and below so here we're going just going to give us a background so BG um let's say white and then let's go slash 20 going to play it by Say by ear but it's more by eye isn't it um and this is totally up to you do this as much as you like uh as strong as you would like it
    
    so it's a pretty decent um solution here right like we we we get to keep our can also let's get rid of the um the turning back and forth ah and you're probably going what's going on why is that not showing up for me uh up here on the relative grid put a z of 100 that is what is what worked so um otherwise you're probably looking at me going uh yeah mine's my can won't go to the back um so that should work check your code against mine if you have any other differences um but in our scene we want
    
    to do the um what was I going to say we want to I I I don't like the turning back and forth without a a reason for it right like now it's just like it's like saying no and I don't get that I don't get it so uh we're going to do the same thing of uh const y rotation is equal to is desktop if it's yes then we're going to return this parentheses otherwise no rotation so uh y rotation and so saving that we should just kind of be in it for the long all uh let's try it again let's reload it's still turning back and forth ah
    
    because we need to update this too so is desktop if so give me .3 if not give me zero last time there we go so get a little fizzy can in between you can up the um hover if you want to make this a bit more interesting make it a little bit more floaty but totally your call and now it's mobile friendly awesome job all right now we can say that the slice is complete and next we're going to be working on the big text slice soda that makes you smile uh this spinning circle is part of the footer so it's be working
    
    on this and it's a it's rather a simple little component but it's cool that it it is responsive and it's a big Punchy typography so let's get into it create a new slice and and we're going to name it big text I'll add it right to the page this time add create new uh big text and then go into it and we need a screenshot update this screenshot where is it there we go and now what Fields do we need we don't need Fields uh this one has to be hardcoded so we can't let our editors come in and be like this is
    
    delicious drink it uh because we need specific values for each of these words right we like designed it just right uh but by making it a slice we still let our editors uh shift it around our page and just remind that slices can be as simple or as complex as we need them to be if if it's just there as kind of a hey move this around kind of thing that's fine too so we're going to go ahead and push and then in fizzy you can uh reload see some of those slice previews come in we got our Carousel we got our
    
    alternating text that's looking great and we're going to add this big text we don't really have much of a preview just yet and we don't really have much of anything here but that's fine and say save and we're going to publish so back in our phys site we have our placeholder let's go ahead and big open this index index. TSX we do not need used client or bounded for this we uh don't really have any JavaScript happening on this page so on the section we're going to add some Styles and going to say class name is uh Min height
    
    screen width screen overflow hidden BG is going to be uh # fe6 334 and save that and we already have a nice big Orange area to work in going to get rid of this and inside we're going to put in H2 with grid so H2 do grid and we're going to continue styling that for now going to say with full Gap 3vw py10 text Center font black uppercase letting uh I'm going to put that at 7 this is a very like we're going to have a lot of brackets in this because I I just tweaked the numbers a bunch to get it to to work right so you'll see what I
    
    mean as we continue on a bunch of these brackets and then uh text is going to be um # Fe 832 and we might be able to put that text yeah let's put that text up a little bit higher so that it's just [Music] um part of the uh the section because we just have one color for our text and we don't we're not typing the same thing over and over again now remember we're not pulling in any data we're just going to say the word soda in here but we're going to do it inside of div so we're going to say period teex next hyphen and
    
    then we're going to finish that class in here uh 34 VW see what I mean like the very specific thing so we're going to say soda and let's save that and see how that's looking soda all right it is working next we want to build out this middle section we have this like uh soort that makes you right we have three words going across the middle so let's say uh grid and inside that we're going to have a few spans but for now let's continue to style out this grid component say Gap is 3vw text is 34 VW on medium and above we're going to do
    
    flex and then MD text bracket 11 V so we want it to on uh on small screens break it down so that every word has kind of the sameish size right um and then on desktop these get nice and small and these stay big so that's why we have the medium flex and the smaller size there now if we go back to our site and we're not going to save because there's nothing to see in here yet let's go ahead and make a span with inline block so span pan do inline block tab we're going to say that space and I'm going to make another span
    
    just like that I'm going to say makes but this one we're going to override the uh size a little bit we're going to say Max MD so that this is on the smaller screens we're going to overwrite it and say this text should be 27 VW and we're going to copy this span and do one more uh let say U and we need to change this at Max MD text to 40 because use a small word so we need to get really big on small uh screens and that should do it there we go that makes you and that's looking great so soda that makes you let's bring in that smile
    
    I sound like the Joker um all right and then a final word we want to put smile uh let's see we want to put that just inside the H2 so period text hyphen and then we'll say smile and then come back and do text 32 VW and that's pretty sweet wait we will deal with what whatever that is don't don't worry about that I'm not sure yet but we'll handle it okay I reloaded the page and it just it it went away just a uh like a build artifact not a big deal and this is it this is really a simple component um not that wild or
    
    anything but it's just a nice big Punchy typography uh slice that you know can be fun on a big impact site like this uh feel free to change the words and you'll need to figure out new text sizes it's just trial and error I can't say like it's not like the Pythagorean theorem or the square root of anything it's just uh 40 No 41 no 41.5 yep that's it so let's see what we got on the slides um yep oh yeah and that's the thing um add a can add bubbles change the colors like do whatever you want with this like it
    
    doesn't have to be this simple um you can toss some bubbles in here you can have a can fly around and do crazy tricks up to you uh we add to our homepage and we publish finished and we are done time for the footer so our footer is going to be pretty straightforward it is just the fizzy logo and we're going to put this little um spinning text circle thing there so we just need to add a new component so in components we're going to say footer. TSX and we are going to say TSR FC and there we have it going to close
    
    the sidebar change this div into a footer so that we are semantically correct going to give it a class name of uh BG hyphen and you could absolutely uh bring these uh so Fe 832 you could definitely put these in your Tailwind config we were just doing so many things with different like 3js and all that kind of stuff that just figured for the sake of the course typing it out might be easier but you can absolutely uh put this in one place so it's a lot easier to change when you go through so hash uh sorry text
    
    hyphen hash Fe 6334 and close that so we have what what we're used to there and inside that we want a div so I'm going to knockout footer I'm going to say div and we're going to put class on that and say relative and inside there we're going to put the fizzy logo and that text is actually for uh the logo because remember the logo picks that up now let's go into our layout I can just say hit command P layout and we're going to want to put it below main but inside the body right there and just like that you
    
    should have your fizzy logo underneath we definitely need some more Styles though and uh under the fys logo I'm just going to say uh period absolute and hit Tab and I going to say oh no I say in here I want to Circle text that's where we're going to put that in a little bit but first we need to put some more styles on this relative div so say MX Auto Flex W full Max W4 XL justify Center PX4 and py10 save that and we already have a much better looking footer we centered that it's looking good so now we want to
    
    pull in the circle text from our resource DOC come to the resource doc look at that it's the last thing we're pulling in folks we did it we made it to the end uh create a new component wherever you are where is where's our components folder I want to close everything I'm missing it there components and we're going to say Circle text. TSX paste that in and this is a pretty simple SVG component we are using clsx so that you can pass in a class name and it'll work alongside um this circle text class you
    
    can also pass it a text color and a background color we have some defaults and that will override those two so if you want to style this differently go for it uh we also have accessibility through this title so that's really nice uh the way that it rotates is a Tailwind uh class in your Tailwind config so animate spin slow just as a spin animation but over the course of 6 seconds and yeah that's really it so let's bring the circle text in to uh our footer so Circle text and we're not going to pass it
    
    anything we don't need to but we are going to go back to our website and we might need to add some more properties here I think we need to maybe give it a size because we're going to say right 24 top is zero so remember we're absolutely positioning so we need to tell it where to go we're going to say size is 28 origin Center negative translate y14 MD colon size 48 so on bigger screens we want this to be bigger and MD negative translate y28 so these were some values that I found to work pretty well I just wanted
    
    to kind of have it there it's just a sty stylistic choice that that I I made you can shift it over you can put it right in the middle whatever you want to do we are the designers of this site so up to you so this is going to be a a little weird artifact of um the the uh is desktop reloading so I'll look for that and check the troubleshooting section for that because that might be something that I'm able to fix uh By the time this goes out but the good news is most users don't like go from Mobile to desktop uh in the same
    
    course of a a couple seconds right that's not really a realistic thing all right it is details time uh there's always stuff at the end of of a website project that you just kind of have to polish it up right uh first we're going to start with the favicon we can delete the current icon PNG from inside the app directory right there it's a beautiful prismic logo but we're going to delete it and then grab your files that you your your assets that you downloaded and grab this icon SVG and drop it right
    
    into the app directory and your nextjs instance should recognize it and there we go we have our little ZZ thing if you want that to be a different color go for it um it is an SVG it is editable so you can totally do that and actually you can come in and just change that right so up to you customize this site uh next handles that automatically cool so next OG image and and metadata so in the page builder let's check out the that's not the page builder that's slice machine check out the SEO Tab and right now it
    
    says homepage the homepage and a bunch of cars so that's not what we want we can change the uh image first we're going to swap it out for this OG image and we don't need alt text just because um OG images don't get alt text that's not part of the uh the standard um then for meta title let's see do we have it here yep fizzy hyphen soda for gutsy people and then I don't have a great way of uh getting this to you so you can either um open the slides and go to the very end or uh type this in discover the
    
    refreshing Taste of fizzy so I leave it to you unfortunately um and next we're going to deploy so we're looking forward to that going to save and publish this so we're going to deploy our site and put it live in order to do that we need to host our code on GitHub then versel is going to take that code and use it to build our host or sorry to to to host our site that it builds I said that poorly but you get it um we are going to push to GitHub first so in terms of initializing git you can do it from either your terminal so if you do
    
    do like uh get in it you can do it there I like using for pretty much everything a gooy so I I like going to Source control I like clicking the initialize repository button I like clicking the add all button and then typing up here init uh initial commit and then hitting commit and then I get to click publish branch and if yours is wired up to uh GitHub already like mine is see the a trast uh you can just go ahead and do it this way if not that's totally fine you can go to GitHub and let me just go to GitHub
    
    regular and you can oh here you go tap repository is new go ahead and create a new repository if you don't have a GitHub account yet it is free go ahead sign up for one and then uh go to github.com new and you can name your repository whatever you want you can just call it fizzy Call It Whatever ever you would like and then um actually you know what I'll go through this path so we'll say fizzy um yeah it's available because it's on my name and we're going to make this public and add read me no we don't need
    
    any of that so create repository and it's going to give us these commands so push an existing repository from the command line is what we want because we have code to ship so open up your terminal and close my sidebar paste that in and there we go if we reload our GitHub page we should see all our beautiful code right there we don't have a read me from prismic but we don't really need to worry about that no one's going to see that so we just went through an initialized git we added all to that commit we named it or or we we
    
    we added a comment uh with initial commit we created a new repository on GitHub and we pushed our code to that new repo all in like a minute next we're going to deploy to versel so we're going to deploy to versel and so if you don't have a versel account yet you can go ahead and click sign up right here otherwise log in and you'll see something like this this is like the dashboard we're going to click add new and I'm going to say project and if you don't yet have it wired up to GitHub go ahead and do that there should be some
    
    buttons here of like connect to your GitHub account uh me on the other hand we're already wired up so you should see your fizzy uh repository over in you know coming from GitHub and it'll know it's a nextjs project so we're going to click import and we shouldn't have to do anything here we don't have any crazy environment variables or anything like that let's go ahead and hit deploy and I'm going to pause it and see you on the other side of this deployment all right so I am a minute 30 older than
    
    last you heard from me and now we have our site deployed so we can continue to dashboard uh the thumbnail is always going to be kind of bad that happens with these kinds of 3D sites it's not anything we can really do anything about um because it's just not supposed to run like that so I have fy. verel doapp you cannot get that anymore I apologize but you can have your own kind of fizzy Dave Sandra kind of thing and now it is live fy. ver. apppp is gonna be the site that you're seeing as you go through this
    
    course we just built it together and so we want to use that to do a couple things back in our page builder we've been using uh this whole time Local Host for these previews so come up to these three dots right here and we're going to say live preview settings and in here we still have our Local Host paste in your new verell doapp link and uh slice simulator should be added to the end automatically and just like that we have uh live slice previews that anyone can come in and use because it's not
    
    referencing something that's on your desktop it is referencing you know something that's live on the internet so that's set there but uh prism has a great preview feature uh but this preview is not enabled so let's go back and let's click settings and you should see where is it previews right here so we have this previews uh feature I'm going to make the window a little bit bigger we're working on a new uh settings area so this will be better very soon um but we are going to create a preview so for site name we're just
    
    going to put production or you can say live site if your uh Team doesn't really know what production means domain for your application that's where we're coming in remove the end slash that might trip you up a little bit it's a little bit weird but we have to have the end SL off there because we have a slash here we're going to say SL API preview and going hit create preview and you might be like how I didn't make an API preview uh path right so if we go back to our project we can check API exit preview preview and revalidate
    
    so these are part of the boiler plate um that we use and so this is all prismic specific code that we just don't have to worry about you you didn't have to copy and paste this from anywhere just you're up and running with uh a preview feature and this is what we're going to use to rebuild our website whenever we have changes uh in a very fast way and this is obviously the function that exits our preview so that's where we are pointing towards that's where that uh API preview is referenced so I just said we need to
    
    revalidate whenever we change something so we are going to come in here and and we're going to set up uh publishing rebuild so that uh we're going to paste my URL in here and have API revalidate and I'm going to put up here something like a rebuild or a trigger a rebuild uh a rebuild say a website just so they know what this web Hook is doing in case an editor comes in later and goes what is this thing and if you just have some nonsense that only tech people understand they might just turn it off
    
    or do whatever so um trigger a website rebuild and we're going to turn off releases and turn off tags we only want this to fire if uh documents are published or unpublished so we're going to go ahead and add this web hook and now if we were to change and I I I hope this works the first time because uh it's not a live demo but I'm going to try to make it one um going to go to the homepage and first off I just want to change this h no we can keep homepage it it is the homepage um but I'm going say soda for gutsy people
    
    exclamation mark in the title so that that just change the actual title but we're going to say publish and if it worked we should soon see here a deploy starting we are not seeing that and that's because we don't even need to rebuild our site like we used to uh with nextjs so if we hover over the live site you have the exclamation mark added in there um let's try this again in homepage we're going to say uh instead of live gutsy live fussy for no reason at all we're going to hit save we're going to hit
    
    publish I'm going to come over here I'm going to reload this site let's see live fussy just like that that was all live I didn't do any Cuts just now all right uh that's how quickly nextjs rebuilds um so your your team can really push out some updates really quickly change this back to gutsy and and remove that exclamation mark but yeah that's really fast you don't have to do a whole like you know minute long rebuild uh within a couple seconds you're back to living gutsy and just like that you have a
    
    fully working really fun cool product page that you can shop around and say hey I can build this kind of thing for you I know how to do 3js I know how to do Gap I know how to do all these cool things to make uh a realistic looking product move around and seem enticing so give me a job hire me whatever um and most of all I hope you just had a lot of fun hope you uh understand prising more nextjs more a bit of Tailwind some typescript you did a lot in this course and uh yeah I think you deserve a maybe
    
    a break if you deploy this uh tag me let me know that you shipped it I would love to see it on LinkedIn on Twitter where wherever you are wherever you're telling people about this uh please let me know I I love seeing these sites out in the wild and I would love to see how you make this site your own if you don't that's fine but uh yeah great work
    