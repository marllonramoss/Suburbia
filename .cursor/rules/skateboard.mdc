---
description: 
globs: 
alwaysApply: true
---
how many websites have you seen with a generic slider in the hero component like a million right now how many have you seen with an interactive skateboard that can do kick flips probably not many this course isn't about building another generic forgettable site it's about creating something that's going to stop people in their tracks we're building a skateboard brand called Suburbia skate with a dope homepage plus a 3D skateboard customizer I mean check this out the skateboard rides along and does


three different tricks the depending on where you click these components are packed with awesome hover effects and SVG animations then we buil a mini app in the same project so users can customize their board and swap out wheels trucks and decks in real time this isn't just a cool project it is a way to learn the tools and techniques that will set your work apart whether you're trying to impress employers or build your dream portfolio and don't worry if this looks Advanced I'll be breaking it down every step of the way


so that it's easy to follow to do well you should at least be familiar with HTML CSS JavaScript and the basics of react we're using some of the best tools in modern web development to build this project we're using the new nextjs 15 a powerful and massively popular react framework it's fast reliable and makes building powerful websites and apps so much easier for the animations we'll use Gap a library that's widely loved by developers and used in hundreds of award-winning sites it's powerful intuitive and makes creating awesome


some animations genuinely fun to bring in our 3D skateboard we'll learn 3js and react 3 fiber which simplifies working with 3D in react you'll learn how to create two interactive animated 3D scenes for managing all this content we'll use prismic a headless page builder that allows us to keep the site Dynamic and easy to update it'll also speed up the creation and data management of our page sections and website for styling we use Tailwind CSS a utility CSS framework that makes applying styles to react components


quick and seamless once it's all done we'll Version Control our code on GitHub and deploy the website on netfi using their free tier in fact all of what we build in this course will be free you won't have to put your credit card in anywhere to build this sick site I'm Alex tro I run the developer experience team at prismic and I will be your teacher for this course this is a robust and thorough course where you're going to learn a ton about nextjs react JavaScript 3D animations physics honestly I want to get started


hope you're ready to have some fun all right let's take a closer look at the final site and each component we create in this course at the top here we have our hero which has a few really fun things going on right in the middle we've got this realistic skateboard cruising along as these wavy lines Slide by giving the impression of like a path it's going side to side a little and the wheels are spinning and it's got this nice shadow underneath it but here's where it gets fun we got these three hot


spots here and if you click on each in the back you get an Ali in the middle you get get a kick flip and if you click in the front you get a front side 360 and you can continue to click uh and it's just a very very fun component uh and you'll learn how to hit these six tricks with gap and 3js and uh yeah your your your users and yourself are going to just keep clicking and uh it's a really fun playground for your visitors to mess around in and then there's this huge Suburbia skate logo across the back


of the page and you can see that it's got this like jittery handdrawn uh animation to it and it's even cooler because as you hit a sick trick it kind of like swells up like rare rare and it's just a just a a nice little effect to make each trick feel a little bit more uh fun and then at the top of the page we got a standard Navar we've got our logo we've got a couple of links that uh we're not going to be building out those pages but um you you definitely can we're going to set you up to be able to uh and then we have our


shopping cart and our uh build your board button and these buttons are really cool there's a nice little touch you got the uh drop shadow that kind of comes up and then you see the gradient that slides up and like the green slides up and pushes away the purple the cart pops a wheelie and same sort of thing here where the green slides up with a gradient and the skateboard pops of wheelie it's a really fun hero section that has a uh a lot going on it's pretty you unique little component next up we've got the latest drop section and


this is where Suburbia skate shows off their newest skateboards this is another section with a few fun interactions uh we have these four boards and when you hover over one it zooms the board in and we get this awesome little colorful scribble in the back that gives it like this graffiti grungy feel and the way they animate in and out is super satisfying and we are using Tailwind CSS to animate all of this uh each board has a customized button and when you click it it'll take you to the customizer


where you can change each of the parts for that board uh but we'll show you the customizer in just a minute uh and if you when you are ready to grab that board you'll be able to add it to your cart with a button over in the customizer uh but we are not covering full cart functionality in this course but the setup is there if you want to expand on it later and wire it up to stuff also the color of this Scribble in the background is automatically pulled from this skateboard image using prismic image API so every Board gets its own


unique Vibe and you don't have to set those colors manually it's like a really slick detail that really shows some of the hidden features of image cdns you're going to you're going to really like knowing about that it comes in handy a lot so next we have a few of these sections with text on one side and a skater on the other the text and button animates in as we scroll and as we move our Mouse around we get this effect that moves the skaters around with this like cool Parallax feel and as we scroll


you'll notice that the slices don't leave the screen uh they stack at the top until the last section clears them away so as we scroll up this kind of get pinned there and then this last section is going to wipe it all away and so there's quite a few little tricks in here we got the parallx we've got the uh animating on on entry and the stacking are all some things that uh you're you're going to walk away learning from this slice so next we have this essential component honestly for these kinds of sites where we've got a video


playing muted on Loop just like a nice little Showcase Video and we have this cool mask around the video so it doesn't have like the straight lines and we put even a texture over top of it so it feels like it's more behind the website or like inside it like someone ripped a hole in the site and that's showing the video rather than like it just sitting on top like a normal website no one wants a normal website and then we're using an intersection Observer to only fetch the video if the user Scrolls down


this far so it doesn't affect our initial page load nice little trick uh to save on performance and then we have our team section and this one's really cool uh most skateboard brands have a team of skaters they sponsor so that's why there's a team and as we hover over each we get this cool Zoom effect where they get bigger but their background gets smaller and makes it feel like it's a like a DSLR Zoom we also do some like saturation tricks we make it a little bit darker to help them stand out you


can see it's like a really fun little effect and uh you're going to learn how to do that I'll show you how we did it and we also get this neat scribble spiral effect to continue that motif of uh you know scribbly lines and like that grungy graffiti kind of feel and yeah you you'll definitely learn a few animation tricks uh and you also learn how to create custom types in prismic and these buttons take you to their signature board and I'll we'll cover that in the lessons now at the footer here this is the very bottom of the page


we have a little Easter egg for visitors who scroll this far we're using physics to make these boards bounce around and it's just another fun and interactive section where you'll find yourself playing for way too long there's not much of a point to this except for to make the brand um you know a a lot more fun like like these Easter eggs definitely like get people sharing uh the website and just talking about it and I think more more brands should just put little things like this into into their page we're using MJS to handle the


physics here and it also uses an intersection Observer to only be active when it's on screen so it saves resources if you're concerned about that so as we scroll off and come back down you'll notice they reset and we can throw them around again and you will be playing with this a bunch I promise you it's very fun now under the final piece the board customizer I'll go up here and I will click on this board I'll say customize and you'll see that it takes me to for slash build and then we've got these query parameters that uh keep the


state in the URL so we can link to specific board builds now we've got a bunch of board and wheel options and truck colors and bolt colors to choose from and as we start clicking those different parts you see that uh not only does it change but it kind of zooms us into that area and if we change the wheels it'll do the same and it spins the wheels around and you can change them as much as you want and as we change the trucks it zooms in you see this really nice texture on the trucks really satisfying uh it's a great great


little effect and then we can even change the bolts and it'll change all of the other metal on the board if you come back around to the trucks you'll see that now all the bolts are white and even the ones on the wheel and so you can build your own board you will learn how to do this and build it so that all of the textures and colors here are stored in the prismic page builder so if you were to build this or something like it for a client or a Content team they could upload new designs and colors on


their own and you can see that the skateboard is a really high quality 3D model with great textures even up close it just looks really solid and it's a it's a fun way to interact with this rather than just like you know a bunch of pngs over top of each other so you're going to want this website in your portfolio to show that you can build interactive websites and related 3D e-commerce apps you're going to learn a ton in this really robust course we're building a website and app in one nextjs project we're using prismic to handle


all content and speed up our development we're animating with the fan favorite Gap we're handling our 3D with react 35 fber a react renderer for 3js we're using Tailwind CSS for all of our Styles and even touching on matter JS for some Physics Easter eggs at the bottom and we'll deploy it all on netlify this is all going to be free it's just we're we're we're we're building something really cool and Powerful that get you a lot of attention really show people the skills that you've built and it won't


cost you anything so if that sounds like a lot don't worry cuz we're all taking it step by step now let's just get into the code no more waiting let's go all right let's get started building the Suburbia skate website so go ahead into the YouTube description and open up the course resources here and in this page you will have everything that you need to complete this course we have our assets like our images and other things we're going to use in the website I have a lot of links to documentation in case


you get stuck or want to copy some of the code that I have on the screen or anything like that uh we have components and files there's a lot of files in here that uh like for instance the logo the SVG I'm not going to have you write out that path so we're going to copy that in when the time comes and then if you are having any trouble in this course open up the troubleshooting Tab and as problems you know might pop up someone discovers a bug in something I will add it here otherwise go ahead and open a


thread on the uh pris Community forums and we will try to help you out once we are done with this we will have final code and final site links here we're going to be doing that uh we're we're creating that final code and site uh right now so that'll be up there I have some extras uh first off credits lots of people helped me build this site and this course and everything so big shout out to them and then also if you want to know what fonts and themes I use go ahead click there great 3js course and


more prismic courses below now we are going to get started by creating a prismic repository so go ahead and middle click that or just open that in a new tab keep this open we're going to need this open for the whole course so I I already had it open but yeah go ahead and open prismic if you don't have an account it will look more like it is on the left or it'll say get started and then you want to say sign up with GitHub or email up to you um but when you do sign up uh right past this window is a


little thing of saying how did you find out about prismic please put video that allows us to kind of get get credit for your sign up and that allows us to create more awesome sites like this and awesome courses that we can give out for free so please put video if you sign up and once you're signed up go ahead to the dashboard if you're not taking there already you won't have all these uh different repositories but you will have the next Nu felt kit and something else buttons at the top we're going to go


ahead and create a nextjs app we have three options here we can start with a minimal starter with uh some preconfigured things we can do a full website demo that has you know a full example with a couple pages and all the slices at fill.com content already if you want to poke around that you can the GitHub is right there but for us we're going to start with a clean slate a brand new nextjs project as well as uh a brand new slice machine implementation with nothing added yet so we're going to say select this and here I'm going to


come in and say Suburbia and you won't be able to do that you'll have to come in and say Suburbia Steve or whatever your name is or I've seen some people do like that with with like the fizzy course and everything so so up to you call it Suburbia something and then display name I'll say Suburbia skate and then what made you create a repository today you are following a tutorial to learn prismic so go ahead and click that and then say create repository we're going to keep it on the free plan see it's a very generous free


plan and we don't need to change anything about that so now we are inside our prismic content repository and we're going to go ahead and select our content language I'm using English United States and then it says to create a nextjs project so go ahead and grab this code a little copy button there and open up a terminal I am putting mine inside the repost folder if you have a folder where you put your projects go ahead and do that and I'm going to paste that in and run it it's going to ask me a few


questions about how I want to set up my nextjs project we're going to say yes to all of these except for the last one so typescript yes es lint yes Tailwind Source directory app router turbo pack but no to import alos we're going to leave this as it is so it sets us up with uh you know not a custom project but a uh a project that has a lot of the the things that we're going to want and as soon as this is done running we are going to move into that folder and we will run our nextjs project and I'll


show you a little bit of that so go ahead and I'm I'm going to CD into Suburbia and then I'm going to say code period now that I'm inside that folder and that opens a new vs code instance running in the Suburbia folder if that didn't work for you um you you might not have the code um shortcut set up so you can just go ahead in your vs code and go ahead open folder but I'm going to close this one out I'm going to move this one over and now that I'm in here I have my nextjs project I'm going to go ahead and


run npm runev and as you can see I like using the builtin terminal in vs code I'll be using that a bunch you can even uh have multiple tabs most terminals allow you to but um we'll be using two tabs in this terminal for the most part so now that it's up and running at Local Host 3000 go ahead and open that going to command click there and we see that we have our nextjs project up and running if you are not familiar with nextjs no problem this is a the most popular react framework for the web um


it is you know heads and shoulders above uh other Frameworks in terms of its popularity many many people use it many any big company so you're in good company learning how to build a website with nextjs and it has a whole bunch of different features that uh can be powerful and'll allow you to scale up as you build out the website as you build out your application whatever you're building uh it's going to be handled without much of a problem by nextjs here it says built-in optimizations and we will be using the automatic image and


font optimizations and down here it says react server components these are components that allow you to use react without sending that additional react code to the client if you don't need it so that makes your site load a lot faster and makes your bundle a lot smaller and I won't get into all of the features but yes we'll be using quite a few here and uh we are using nextjs 15 as of right now this is the newest latest and greatest so we're going to be rolling with that and the documentation is here at NEX js. org SL think learn no


sorry that's their courses uh their docs so if you need anything uh outside of this course maybe you want to take this course a little bit further go ahead to the docs and uh you will be set there but for our purposes I will be walking you through all of this so no no no need to go there so with our nextjs website launched here we want to take a look at the files that we have before we add any new things to it just to see what our Baseline is so the most important stuff is in the source app folder uh at the


beginning we chose the app directory the old way of doing nextjs is the pages route router uh but now we're going to be using the app router if you have used the pages router before uh there are Sub sub some substantial differences in the way that you do things like uh fetching data or even what JavaScript gets sent to the client because server components are only possible within the app router if you haven't used nextjs before you don't need to worry about the comparison we're just going with the app router by


default every component we create in the nextjs app router is going to be a server component and then we can opt in to using client components client components allow us to write interactive UI that gets pre-rendered on the server and then can use client Javas script that runs in the browser anytime we're using Gap or 3js or anything interactive in the browser we need to opt into a client component but for now let's take a look at the file conventions here we have two that we really want to pay


attention to are layout and Page CU we see those two over here this layout is a shared UI for a segment and its children and then the page is a unique UI of a route and makes routes publicly accessible so think of the layout as just something that wraps around Pages it says here that a page makes the route publicly accessible you can't just visit a layout so here if you look in our layout folder we have some things that are going to be on every single page HTML body and then children is basically


the slot that we put the page and everything else inside of that so that's just kind of like the the hole inside this layout and then we also Define things like the font here and the metadata uh so that those are available to every single page and we don't have to Define this on every single page then if you look at our page this is uh the actual content that we're seeing if this was more of a typical website you would probably put the layout or sorry you probably put like the footer and the header in the layout file and then the


page wouldn't get those because those just need to be applied to every single file but for us because we have two very different kinds of pages here we have this like app and then we also have this web page we want to have one that has the header and the footer and then another one that doesn't have that same UI so we're actually going to be using two layouts you can Nest layouts inside folders you can do a lot with the different file types like Pages layouts and templates but don't worry we will be


getting to that just going to show you how our base project is set up so that we can go from there beyond that they've installed Tailwind for us and we have a basic Tailwind config right here and that Tailwind is then brought in through the global. CSS right there and then that is brought into our layout so this will be available on every page that we have and here in our CSS folder we see that we have some basic starter CSS you can go ahead and actually start getting rid of that if you want to go ahead and


erase that hit save we should start to see a little bit of a difference there and we could go ahead and nuke uh the page and the layout and all that stuff but I don't think it's going to be worth our time because we're going to replace this page with something that prismic slice machine is going to give us so we don't have to write too much for this uh single page component so let's go ahead now let's go back to our uh prismic repository here and we've done that so now we can say set up slice machine and we're going to run this


command um I'm already inside my Suburbia folder I'm pretty sure at least when I open my terminal here it's going to say Suburbia so I'm just going to run the second one uh depending on where you are in your terminal which folder you're at uh you might have to run a different one um this is going to ask you to log in most likely I'm already logged in so it probably said that or it's going to in a second um but yeah if you have to log in or just open a thing in this window no problem go ahead and log in


yep I'm logging into prismic oh no I have to do it myself there we go so you'll see you'll see something like that you're logged in you can close that window just a nice way to connect the terminal to your browser and it says continue with next steps in slice machine want to run slice machine I do so I'm going to hit Y and that will start slice machine the way to run slice machine without that just so we know is npm run slice machine just like that I don't need to do that but in case you hit n or something you're not stuck so


now I'm going to open it at Local Host 9999 close that window and then we have our slice machine here I'm going to move this all the way to the left and I'm going to move this uh all the way to left too I going put them there cuz the these will be the three windows that we kind of work between um slice machine is going to be where we create our page types and our custom types and our slices and then uh this is where we're going to put our content and then these are to like look at for um you know the


the example of what we're building so now that slice machine set up we can go ahead and hit continue and it's going to say run slice machine continue and then now it's waiting on us to create some models and then push them up to prismic so if you look here this is at prism.com page and it's actually going to be very simple to do uh we're just going to hit create we're going to say a single type because we only want one homepage and for display name for the page type I'll say homepage and oh I'm going get that


capitalize but we'll keep keep the ID lowercase hit create and there we go it's been saved successfully and all right what what just happened exactly I'm going to close my I'm going to minimize my console and oh we have a new folder over here called custom types interesting if we open that we see that we actually have a folder inside that called homepage and then that has a Json file so we just created this Json file and you see that it already has some SEO and metadata fields and couple other things and if you look it automatically


created these fields for us so we don't have to do it later uh it's just a nice handy default the rest doesn't really have much to it but it has this slices button where we're going to add the different page sections that we see on our website so when I introduced the site I went section by section right each of these sections is what we call a slice so this is like the product grid slice and we're going to build that as its own component and then our editors will be able to move that around and


change the content in that as they want um so we we we build one slice at a time that's a slice that's a slice and so on so we now have our homepage it's just going to be pretty simple on its own the complexity comes within each slice so once again with prismic you build simple Pages complex slices and this one Json file of course is not all that slice machine and uh in installing pris project has done you might see a lot of things like slice machine. config and pris types we will touch on those as


relevant but I'm not going to walk you through each of these you will see all of that in due time but we now have our page and we see that over here we have this little one you you probably see it more like this if you have yours says full screen the review changes so if you click that and we see homepage new you can go ahead and click push it'll do a little Spin and it'll say good job you did it and then if we come over here we can say I've pushed my models and by over here I mean prismic doio


and there we go so we are now in the prismic Page Builder and I'm going to go ahead and just create a new page and we're not going to be able to do much here right now but I just want to show you how this whole flow works we created a page type in slice machine we pushed it up to prismic We Now create this homepage in prismic and I'm going to go ahead and say because there's nothing really here uh in Maine we're going to go to SEO and metadata I'm going to say meta going to say Suburbia so B RB a skate boards and say the


best just for now I'm going to hit save and I'm going to publish this and so now we have our first page published in prismic if we go back to our site we're not going to see anything we haven't wired up anything here to say hey I want that information however little it is to appear here please uh we need to change the code of our page. TSX to make that happen luckily prismic makes that incredibly easy for us so if we go back to our page types right here going to go open the homepage we see at the top here we have a page snippet go


ahead and click that and look at this so it even remember I was talking about app router and Pages router we're doing app router but even if you're doing Pages router if you have like an older site that uses that we still have the code for that so go to app router and you just going to copy this and we are going to go to your page. TSX that is within your app directory and I'm going to wipe it all out and go to paste and hit save and let's see uh that might throw an error because we don't have any slices yet let's see if that


does uh yeah okay so I'm going to okay we'll come back to this let's go ahead I thought that might work but it doesn't that's okay we're ahead and add our first slice say add create new and we're going to say hero all right slice name hero Target Library don't ever change this this is for much bigger projects we don't need to but if your project is so big that you need like nesting uh like you need to have different folders for your slices because you just have like dozens and dozens you can change that for us


we're just making like five or six so go and create that and now we should have a slices directory that just got created and we don't need to change anything here yet that just fixed our error and now we should reload and only thing we're going to see is at the top Suburbia skateboards that is the SEO content that I put in over here and that is all we're looking for right now but I want to show you how this automatically gets imported here right there's not a lot happening yet I know but I don't


want it to get too magical and have too much going on before you really uh before you understand what's happening right so let's take a look at this page file it is relatively small in terms of like it's 22 lines of code and this is going to be uh this is able to render out like entire Pages because of the power of slices and the slice Zone and this second part is really only to generate the metadata so we can kind of ignore that for right now if we just look up here this is where the work is happening so first we say cons client


equals create client create client is coming from a local file that's that at slash local file prismic iio and it it runs this function create client let's check that out let's see what that does prismic iio if we open this up we scroll down and we see this create client file this is automatically generated for us to pull in our accurate repository name the routes that we Define up above here that we're we're going to change and uh add to as as we build out that's why there's a to-do here for us nice and


handy and then it also gives uh basically the defaults that you want to have don't don't touch these because this is perfectly set up so that your uh nextjs app cache isn't going to give you any trouble and this setup also allows us to use the prismic previews feature later on and this is just our standard create client that we we won't have to touch it all so we're going to be calling this into anywhere we need to fetch data and it already has all of our configuration set up for us so that's what we do first we create this client


and then we call for our homepage because slice machine knows what we're inside and so when it creates a page snippet it creates it to match that page type very handy for us and then it is going to get that page and then on page is data. slices and we render sorry we we pass that to this slice Zone component and basically what this slice Zone component does is it Maps over an array the API from prismic sends back an array of slices so here if we're looking at the prismic homepage as an example we


received back a uh in an array of these slices where the first item is a hero and has all the data it's going to pass it to that hero section and it'll render it out and then the next item is this uh main logo type section and so on and so on so it's really just it's rather simple under the hood but it's very powerful because now uh your your marketers can go in and go actually you know what I want this section to be over here and they can shift things around right they can go uh like that but not


in in the Dom actually but like this is pretty much what they can do uh inside prismic and you don't have to get called in they can edit all this data without bothering you or any other developer they can just move really fast even if it's your day off so this is the general concept and so we pass an array of slices to our slice Zone and it gets rendered out and creates our web page and that's why we can make a homepage that is what 22 lines long the Simplicity isn't here it's in each of these slices so if I go back to slice


machine I'm going to open up this hero so before we add our first field let's take a look at we what we actually need to do here this is our hero and we need to look at what are the different things that we need to have fields for so first we need a heading field we need them to be able to change this content as they wish as well as some body content uh so that's two fields we have a third field this button is going to be its own field we can change uh both where it's going as well as this text within the same


field and then that's kind of it for this hero we're not going to be doing the 3D aspects of this component just yet I don't want to overwhelm you with uh 3js and re react 3 fiber and uh gap before we get the hang of nextjs and prismic and tailwind and those things first those are like the good fundamentals the Baseline that we want before we jump over to this hey if you're enjoying this course so far it would mean so much if you could hit that like button and even subscribe it really helps with the algorithm and allows me


to keep making creative projects like this and teaching you about animation 3D and just building amazing websites also I want to hear from you if there's something you want to learn or some kind of website you want me to build drop a comment below I would love to hear your ideas thank you so much let's get back to it so for now we're just going to have a skateboard image here without any animations or anything just as we build it and we're going to like hardcode that in just because it's going to be a


placeholder this will be hardcoded as well because you don't really you can't put like a 3D model into a form field so we have one two three things that we need to add to our slice so let's go ahead and do that first add a field we're going to choose from one of these fields you to be have pretty much everything that we would need here and uh down here we even have repeatable group so if you need um like if if you have cards or something like that that need to repeat you can choose one of those but for now we're going to choose


a rich text because I need a heading one so re choosing that we're going to say heading and I am going to unselect all of these different options so these give your editors options and if I click H1 that means that they're only going to be able to to to write in H1 turn off allow multiple paragraphs and then click done and now we have a heading if we go ahead and add another field we want that body let's say Rich Text body and unselect all paragraph bold italic and uh I'm not going to allow multiple paragraphs for that one either


and I'm going to say done so I'm allowing bold metallic because here I'm using like your board and then like it's not that big a deal I'm not going to allow them to put images in there but those things aren't that big of a deal next we want to add a link field this going to be our button and the placeholder we don't need to worry about that but we do want to make sure this allow display text is checked because uh that that gives us the power to not only Define where it's linking to here but also to allow them


to type in build your board because that's that is important all right let's click done and we have our fields now you might wonder what did that actually do if we go and look at our slices folder here and we see hero that's exactly what we created and we'll see that we have three files in here index Mox and model so index is just going to be pretty boiler plate right now says placeholder component for hero and then it gives the uh specific variation that's one feature we'll get into in a little bit um for this slice and so yeah


just a little bit of boilerplate react that we are going to add to in a second but let me show you model. Json and this is kind of similar to the page model and you can see what we created here's our heading it says that it is a type of structured text that's just another word for Rich Text uh and it only allows heading and these allow for paragraph strong and bold or sorry uh emphasized and then that is our body so we see our Fields here and we don't have to you know mess with Jason we just get to uh


create it with this nice little UI here in slice machine so you will never have to touch this model don't worry about it the mock we're not going to get into too much but it's nice that it creates mocks for you as as you're building this um and yeah just don't don't worry about the model but just know that this is what's happening and this happens locally so that we can Version Control this and so it's placed right next to our code rather than it happening in the cloud like happening on prismic and then we can't uh Version


Control that right next to our code so this has that added benefit so now I'm going to close the model and close the Mox and here in our index under the hero component I want to start to bring our data in and you might be used to setups where you have to uh you know fetch the data and find where that data is located in that you know nested object and do all these like console logs and everything well that's not the case with prismic and slice machine it's really nice check this out so the same way that


we copied a code snippet for our page before we can click show code Snippets here and then each one of these gets its own little code snippet so we're going to grab these one at a time and paste that in just go ahead and grab each one don't worry about the uh squiggle there little error we will fix that in just a second and oh I hit copy instead let me see paste cool so now I have let me close my sidebar I have three prismic Rich T well two prismic rich text and one prismic rich or prismic next link


there we go uh and what I'm going to do is I'm going to hit command period and you will see a little Quick Fix thing come up if you're using vs code at least uh otherwise you can just follow the next step but I'm going to say update import from prismic IO react and now we have prismic Rich Text in there and I'm going to do the same thing hit enter sorry uh hit command period and then enter and now we have our uh Imports here so what we we can do now we we can do a couple things right I'm just going


to show you really quickly this simulate feature I I said we're not going to touch on mocks too much in this course but if you want to start building this out now and styling it you absolutely can because uh slice machine comes with this MOX feature where you can simulate your slice so if I were to come in here and say let's don't follow this but I'll just say uh text red 500 and I'm going to wrap this around that prismic rich text and that should do something now oh uh ah so I know why and actually follow me on on


this one okay because this is something that that we all need to edit so we're going to go into our Tailwind config right remember this is the default that nextjs gave us uh and what this content array does is it tells Tailwind where to look for classes right this way Tailwind isn't um combing your entire project looking for the classes that it needs to put into its bundle because we're using the just in time bundler but instead we're only going to look in Source Pages uh components and app now if you notice


uh we don't have our slices folder in that list so go ahead and copy this last line Source app and just add slices instead I'm going to save that and then as soon as I do I get a red familiar so now that that's fixed um I can go back to my slice yeah so that just shows how you can update your uh slice and and build it in real time without having to go into your CMS and create a a a bunch of content right so you can immediately be effective so text uh let's go 5 XEL right you can see how quickly that updates and I'm just


immediately getting down to business and you can even edit what that says and you'll see it just updates so I'll save that that my content but we're actually going to go in uh and add that content now just so that we can start building it out inside um our page because this is still our page we just have this heading here and I want to give us a little bit more to chew on than that so head o actually first we have to push this up to prismic okay so we we we have our component locally um and we we created this model with the


heading body and button but if we look here that's our review changes tab uh we have a couple things that have been modified first off homepage has this new slice if I were to go back here uh there's nothing that says add slice and so if you if you ever see that on a page you probably don't have slices um added to it now there is I need to push that change as well as this new hero right so I'm going to hit push those will both be updated and congratulations your content has been updated and should update here but we might have to


just reload it there we go so now we have this add slice button okay inside our homepage oh I'm actually going to change this real quick to homepage because that's what it is uh I'm going to hit add slice and right now we don't have much of an option soon we'll have the hero and the product grid and the I don't know what else do we have uh yeah the uh text and and image component uh so we'll have a bunch of SLI here soon right now we're going to add the hero and we're going to check what we're writing here so escape the


cuac you might not be able to copy that because it's behind the 3js so just escape the coal uh yeah Cole D sack I think that's a French term and if you're not familiar with what a CAC is this right here is a CAC so uh it's very common in the suburbs hence hence why it's being used for Suburbia and it's just one of these round like end of streets where you kind of have a few houses uh around that Circle so if you ever see one of these this is a culdesac and yeah so escape the CAC just kind of means like you know get out of this


circular around and around so and then for our body we're going to clicking everywhere going to get uh not just a board your board design a board that's as realistic place as you take it for everything else on this page we'll be able to copy our content but for this because we have this 3D in front uh we're going to have to type it out all right so I just typed it in uh and if you would like you can make that italic or make any part of it italic it's your choice and then here for the button I'm


going to choose a link type and we're going to say link to web page and we will just say slash build just like that and we will uh create that page later but for right now we'll just put it there and then our display text I believe is build your board so go ahead cool if we hit save here and publish and we head back to our web page hit refresh twice and then you'll see uh yours won't look like that because I added these Styles let me get rid of those um but you'll see that our content is coming in and we didn't have to do


anything when it comes to um figuring out how to pipe this through so I just want to show you one more time how this content is getting rendered here so it starts at the page we create our client and and then we say hey can you give me a single document back and it's called homepage prismic says cool here it is it becomes this page if you look at page uh it is is just a general all document type right and I'm I'm actually looking at the generate metadata part but it's the same thing so we go page. dat. slices we pass


that to the slice Zone we also pass our components where's components coming from this is coming from our local slices folder and the index file right here all index does is it Imports every one of our slices and so far it's just hero uh and puts it on this components object so when the Sone sees that oh this is a hero component it's going to go and fetch the hero uh you know like that that react component so it's going to match what prismic is saying with what our files here have and then pass


the data into that hero so if you look at the hero this slice comes in and it has type of hero props and inside that because prismic is giving us um automatic type generation we know exactly what is on um this slice so if if we just go here and I say slice dot you'll see we see ID items primary slice label so these are all the things that are on that slice we're typically going to go into primary and then we hit period again it has a autocomplete and we see body button and heading those are the fields we created


so if we go even deeper go to button and then we can see link type or text right and and there will be more as long as you check to see if uh that already exists because right now it's not sure if this is even filled out um but basically slice machine gives us like one of the benefits for it being local is that it generates types automatically and real quick I'll just show you that but this is another thing that you do not touch um see it says do not edit this is handled for us but you'll see this nice long file of all these types


uh this is going to be pretty big by the time we're done trust me I am so thankful I don't have to type these out and figure these out on my own it would be half of the build uh but it's just done for us so if you are messing something up like a title you're you're you're going to know right like you're you're never going to run into a thing where you're like ah I shipped it but it's not working I'm not sure what's going on it's it's going to yell at you before you can even uh make that mistake


so very very handy and that's how our data gets rendered out here all right now to make our lives a whole lot easier we're going to go to our resources and we are going to come down to assets and you go ahead and download the Suburbia site assets zip folder and when you open it up you should see something like this so we have a few places to put things we have to add to prismic add to the public folder here we have some slice snapshots I'll show you where those go our icon and a prismic repo icon so let's start


with the last one first so if we go to our prismic repository and we go back we have settings down here go ahead and click that and we have this Suburbia skate icon here this this blue little well mine will be a different color than than yours likely because it's just random go ahead and click that and navigate to your sub Suburbia course assets and just choose the wheel and we're going to hit open and then I'll say apply the settings and if we go back to our documents uh we'll see it up there and if we go back to uh


prismic itself you have a cool little icon there so just a nice little touch nice and quick uh and that's always a little bit better for Content people to come in and see it just you know spruces it up so that you show that you put some care and attention in there next we can go ahead and grab our icon and you see right where here where it says favicon.ico you can drop it right on there and it'll put it next to it and then go ahead and delete fav ion. and you see that it already changed nextjs automatically looks for those


files here in the uh app directory and if you have certain file names like icon uh it will say okay that's what they want for their icon you don't have to put it anywhere else it takes care of it automatically easy next let's clean out our public folder these are a bunch of svgs that were used by the page uh uh when we deployed the or or like when when we built the nextjs project to begin with we can delete those and those are gone now go ahead add the public folder in here go ahead and and select


all and just drag everything into you guessed it the public folder so yours should look something like this your icons on the side might be different uh just because that's a VSS code theme kind of thing uh but yours should look similar to mine in terms of all the files that you have here next we can go ahead and grab the add to prismic folder these are a bunch of assets that we are going to be using for the website you might recognize a lot of them from you know the preview and everything here's one of our skaters for


instance uh open over there you know so go ahead and uh select all and we can go back to prismic and we have this media library here go ahead and click that and right now all we have is our skate wheel but if we uh click upload media I think that'll do it yeah so I'll go add to prismic I'll I'll do it this way you can go either way I think I could have dragged it in but I'll click open on all of those and those will all start to upload let me me give it a second all right mine's done uploading uh so we will be using these


throughout the course uh it's just easier to dump them all in at once rather than having to go back and grab them one at a time and just to show you what these slic snapshots are if you go to slices and you see this update snap uh screenshot orn snapshot whatever you want to call it uh click that and if you click slice snapshots I'm going to grab this hero.png drag it over all I do was take a screenshot of the uh the finished product and that should download fully just give it a sec let me try refreshing


mine there we go uh and I'm just going to hit push and I'll show you the effect there so if I go to my homepage now in my prismic uh slice selection menu I have nice pictures that you know show me exactly what I am choosing rather than just saying hero or text and image that sort of thing and you will see this live editing uh thing but we're going to set that up as soon as we have something to actually look at CU right now there's not much here let's continue to kind of build out this ground structure that that we have


so one of the main issues that we have is that we are just uh right up against the edge here here and we definitely don't want that we always want to have some padding um on either side we don't want it to and and we we want that to be consistent all the way down so I I want um the edges to be rather aligned as we go all the way down the page right um I don't want things to jut out farther on one side than it is on the other so we need some kind of a component because I don't want to write those classes over


and over again luckily we have this component called bounded go ahead and grab this and I'll talk to you about uh what it does uh you see we have components SL bounded so that's what we're going to create right in our source directory here so we'll have app slices and we're going to have a new folder so right click Source choose new folder and say components and then inside that create a new file and name this bounded TSX for typescript and we're going to hit save and let's take a look at what this


component does what it does is it tells us we need this thing called clsx it says I I can't find this uh and we will install that in just a moment I'll tell you what it is but let's take a look at the rest of this this is a component that just wraps around whatever you pass into it and it defaults to a section because most slices are going to be semantically a section element but you can overwrite it if you pass something uh here as as if you want to be to render as a div you can say as equals div so comp is going to be a section


then we have the this class name that first creates a section with these classes and what clsx does is it combines different strings for us so it's class uh string compiler or it just allows you to create uh strings at the end after uh doing some kind of logic or just combining lots of Str string so see how it says true and bar so bar gets passed in so you can do conditionals and that way it allows this component to have some defaults here and then we can also o override or or add to those defaults uh by passing in this class


name and it's also very light so we're using this over Tailwind merge which is another option because this is a lot lighter uh if we're passing it to the front end in some of our client components as you see it it's going to create two components uh in order to achieve the bounding that we want and we're going to pass our children into it it's kind of a simple component that's why I'm not going to have us write it uh and but we we will be writing plenty of components but things like this I would


just rather explain to you rather than have you write it but let's go ahead and take care of this clsx problem right now and there's also something here if you see this little uh Tilda I think it's called Uh the the the wavy Dash pretty sure it's a TAA uh that is something called ta wind fluid or fluid Tailwind yeah so it's fluid for Tailwind CSS and this allows you to use responsive design and and use less code so honestly you see how much it tidies this up so I get really annoyed by how verbose uh


classes can be with tailwind and it gets tidied up just to this so This basically says that um I'll zoom in a little bit uh so at at the smallest size text is going to be large and that's what this says too and then at the largest size it's going to be 2XL and then that's what this says right so it just saves you a lot of time and and the cool thing is it is going to uh gradually scale between those two so it's it's going to just kind of ramp up if I can show you this this is a a small example but you see how it doesn't snap it just


slides up so that same principle and we will see it in action soon but we need to install these things if you go to the resources under documentation you'll see I have the fluid Tailwind plug and the clsx docs go ahead and open both and under clsx you can go ahead and grab this npm install save clsx we could install them all at once but uh let's go ahead and just run each command so open a third terminal if you'd like and I'm going to go ahead and run that oh I I I hate when the dollar sign copies and


just you have to yes yeah so copy that outside the dollar sign cool so that's installed and now I'm going to grab fluid and get started it'll scroll me down to this copy that paste that in this one has a couple more steps because we need to add the plugin and the extractor so here it tells us to open our Tailwind config let me make that bigger for you and that's I want to do let's say uh if if you don't know over in VSS code command p and then just type tailwind and then hit enter uh it gives you a fuzzy search so you can quickly


get between your files I'm not going to I'm going to try to avoid moving around and clicking in here as much as as I can just to keep the tutorial nice and tight and also teach you some best practices and uh yeah also I'm closing this terminal by hitting con control and then the little Tilda um at the top so right under the Escape key uh it's like the back tick in the Tila so in Tailwind config we need to First import fluid and extract from fluid Tailwind I'm going to put that right underneath there and then it's


saying you don't you're not using those so don't don't worry about the errors and then export default content files you see how it has us instead have an object with files as an array but that's not what we have here so instead what we need to do I'm going to go ahead and wrap the array in curly brackets or braces I always forget which one that's called uh and we're going to say files just like it says and hit a colon now it's happy again it says okay you can do that because if we pass it an array then


it assumes its files and then after that array we are going to say extract see oh it's helping us even so see what it says for that yep doesn't tell you much more than that but we need it like that and then plugins we're just going to say fluid so down at the plugins array just pass the word fluid and if we save that now we are able to use this cool fluid uh plugin and clsx is no longer yelling at us because we installed that just before now if you look at our website nothing's changed and that's exactly


what we expect because we we have bounded as a component here but we're not using it yet going hit contrl p and I'm going to go to Hero just type hero you'll notice that it's index. TSX but uh VSS code picks up that you are searching for that file basically so here we have a section and what I'm going to do is I'm going to select section and start typing bounded b o u n d and you see it comes up as like hey do you want to import this from at components bounded and I say yes going hit enter and then a lot of times vs


code doesn't autocomplete the bottom for me so just be aware of that so you just have to go in and and type the rest and we see that we have our import here now it's good uh practice or procedure or whatever to pull the things that are in your project like your custom components down so that it's easier to see what you're importing from like npm packages and what you're just importing from other parts of your project so uh separating it out like this is good practice and we will be doing it as much


as I remember to throughout this project so if we hit save now with our bounded component wrapping around our three items wow we we we get a little bit there uh but it's going to be more dramatic if we open it up a little more um or if we say if I say class name and then I say uh border say that and then you should see a faint little gray uh line there ah but sorry the the border is going to be um on the on the the outer element so that's that's actually not even not not going to change anything but um if you


zoom out you'll see that like yes it is centered there it does have that effect of giving it some padding on the side and centering it so this is what we're looking for it's a nice little component that we don't really have to mess with too much again so I'm get rid of my little class name board that didn't do anything but you know I tried all right next I actually want to bring in our fonts because this is going to continue to not look like the final project as long as we are using whatever this I


think this is a Guist this is probably their builtin font so app layout yeah we're still using the built-in fonts that they have installed locally for us so we still have this fonts folder we can get rid of that fonts folder and uh pull in our our fonts and make it look a little bit more Suburbia now so if we check the documentation here you'll see let's see fonts we have bby1 and D mono as well as the uh link for adding fonts to nextjs that's the only one we we really need I just included these in case you want to


check those out so if we look here at uh using multiple fonts we see that what they're doing is they're importing these from uh next font Google so just in case you don't want to go and find the docs here I'm just going to type it out for you and I'm going to say import and a little trick if you do the braces like that and then you say from next SL font SLG gooogle that will give you autocomplete within the braces but if you do it the other way if you start looking in here um it doesn't have like that narrowed list to


search from so now we can uh say bulby b o wlby y and we get the bulby one and bulby SC SC is for small caps and that's the one that we want and then we're also going to say DM mono and there we go so you have those nice uh autocompletes for us but now uh we could copy this but because we're using Tailwind they actually specific Tailwind CSS instructions down here uh that we want to copy because we can use it with tail one CSS through a CSS variable and we are using next font because they really


optimize the performance of our fonts it's much much better than using Google fonts the way that you might have used it before where you add it as a script tag and stuff like that don't do that with nextjs um it's just it's better for a lot of reasons one of those reasons is it's going to bring it bring that font in locally and so when your page load your users don't have to make a request to Google which can give you some gdpr issues so one of the many reasons why you should use uh the font package um


even if it seems a little bit confusing compared to what you're used to with fonts um so we they have a similar setup uh but now go ahead and copy the we'll copy one and then we'll we'll copy that later so conster equals inter instead we're going to say cons BBY it's a weird word but roll with it uh I'm going to spell it wrong a bunch but we're going to say subsets Latin display swap variable we're going to say font bulby SC and then what it's yelling at me for is it's saying hey we we need a wait


here so go ahead and say weit and we're going to say 400 in quotes like that and now it's just saying hey you're not using bulby so copy this and we're going to do the same thing for d M mono so DM under or DM mono like that and then here we'll say DM mono because these are just functions that take an object that's what we're importing here these functions that take an object and here for the variable we're going to change that to be font DM mono and instead of weight 400 it's 500 so yours should look


just like this and the key here for Tailwind is this variable we are uh assigning this to a CSS variable that then we can use here to extend uh the font family and we're going to do pretty much exactly this we're going to call bulb our Sands and DM mono our mono um but first we need to pass it on the HTML element and so you can go ahead and grab this class name or actually uh if you still have G stands and G mono just swap out bulby and DM sand so bulby and this is one of the last times going to say bulby so don't worry this


is not the bulby tutorial tutorial um and then we want to head over to our Tailwind so I'm going command P tailwind and then we have this extend colors background we don't really need that because we're not going to be like like that's not um our code we are going to be just not not using it like that uh but instead we're going to say extend and then font family and we're going to say Sans far oh actually I'll I'll just copy it from here I not sure why I'm having us type it out when we have the code


right there work smarter not harder people so sans's going to be font bulby SC and then uh DM instead of Roboto here and if we hit save there uh let's see if we have any changes visible here so we do have changes but that's only because we are not um applying these fonts to anything and we've gotten rid of the Guist uh fonts so if we head to our layout we can see exactly where we're putting this we have this uh body class name so what we have to do because uh we're passing these fonts on the class name of body and then we have one


more uh property here anti- alist and that just gives us some nice font smoothing it's a good default we're going to hit a space after antialias we're going to say font mono and that's going to set the like the default font for everything as mono and then we'll specify out of that for our headings we'll say font medium text zinc 800 this is a built-in color with tailwind and that's all we need there we're going to hit save and we see that we are starting to get a little bit more into our styling uh so that's looking


much much better if we change mono to sanss there we go so both of our fonts are working uh but we're going to keep it mono and that's going to be most of our body copy all right we're building it little bit by little bit but it just you know a lot goes into building a stylish website like this there's fonts there's colors there's a whole bunch of stuff so don't get overwhelmed there's just lots of little details and we are taking it one step at a time so the next step on making this hero section look a


lot more like this hero section is going to be to bring in our colors uh if you're not aware Tailwind ships with a whole bunch of colors that you can use right out of the box and they're really easy to use you just say like orange hyphen 400 and you will set your text or whatever to that shade of orange like that specific color but the colors that we're using are not oh the these are not uh Tailwind colors they are custom colors from our designer and so instead of grabbing something like this we need


to come down here to using custom colors so you'll see uh it's inside theme and we say colors and then we can name these whatever we would like and so we have bubblegum or uh Tahiti Tahiti and then it becomes that value and it shows right here BG midnight text Tahiti and that's how we're we're going to use it and then Tailwind will um understand that and set those colors accordingly so if we go to the resources you should see a Tailwind config right here and I put this in here there's a lot here but we're not going


to use like like don't copy all of this just yet um because I know it's kind of a a long file and I want to show you bit by bit as we go so uh go ahead and grab just this colors portion right there go ahead and copy that and then open your Tailwind config and right now you should have theme extend font family and here we want theme extend colors so we're going to put it after font family the order doesn't matter but that's where I'm putting it I'm going to say colors brand blue brand lime brand Navy so


anytime we want to add these colors to our project we're just going to say like BG brand blue I'm having us copy paste this because there's no real like educational value in making you copy hex codes so now if we pull up our it and go over to our index we can add a class name right at the end of our bounded and we can say BG brand pink just like that if we save there we go not the most impressive thing yet but we are getting there so we see how we took colors added it to our Tailwind config and now we


have it available anywhere we want it but while we're here I want to add a few more classes to our bounded component so go ahead and say relative then H DV8 and if you're not familiar with dvh it stands for dynamic view height and that is a unit that essentially means the height of the viewport with any kind of toolbar on mobile um like if you know on iPhone uh when you're scrolling the little bar at the bottom pops up for the URL and the toolbar at the top pops up and that changes the height of a mobile


device dvh takes that into account so if those bars are showing the value will be smaller than if the bar are not showing normal VH will not take those bars into account and stuff can get hidden underneath those bars so that's why we're using dvh then we'll say overflow hidden because we don't want any uh anything overflowing this slice uh the logo here when it's small can sometimes go offc screen but we don't want it to bleed over into the latest drop component so that's why we have that and then we're going to say text zinc and


that's going to be 800 and if we save that and go back here we see that our height is now the full height uh the text isn't going to be too noticeable no no need for overflow hidden showing up just yet but uh one thing we don't have is our nice subtle little background texture back there so we have that file already inside our uh project that one of the files we dumped into our public folder so we just need to create a class for it so I'm going to go ahead in where's the boundary here we go to go ahead in here and I'm going to


say BG texture and that class does not exist yet so it's not going to change anything here and we're not going to put this in Tailwind we're actually going to put this in our CSS file so going to go back to globals and we're going to create a new class here called BG texture and then from that we're going to make a few background uh properties here so background image first and then we're going to say you r l parentheses quotes /bg texture. webp now anything we put in the public folder is going to be


available at that rout at that forward slash um if you look at the public folder uh BG texture exists right at the root then this is going to be nested so any file here is going to be available at like uh Suburbia dcom HDR Warehouse um but this stuff is going to be available at Suburbia /bg texture so that's how that works we can just use the forward slash to access it if we save that right now we should see our texture this is not how we want it to look so we're going to add a couple more things but we already have


it up and running next we're going to change the size on it so background size and I'm going to say 720 PX and 460 PX there we go it's a little bit smaller uh a bit more detailed there and we're going to say background repeat and I'm going to say repeat and we will say background position and Center just like that so we now have our background texture added and the cool thing is we can use that background texture across the entire site now you might be wondering why didn't I just use background I could have done background


URL and things like that let's see what happens if I just put it like that and comment this out it loses the pink so that's why we aren't using just background because this would overwrite the color but when we specify get rid of that when we specify background image background size all these things um it it is a much more precise and it allows our uh brand pink background here to work alongside those other things so that's why we we want to specify here don't try to take a shortcut and use the uh the shortcut


background property okay next up uh we could put the logos in there but I would actually love to get the headings and the buttons brought in so let's do that in our resources let's go ahead and close that we have a heading component here and you'll see that it's pretty simple at its core but it has a switch and that's why I just don't want to have you type these sorts of things out it becomes a little tedious so the file name shows you where to make it so go ahead and do that in components I'm going to say new


file and say heading. TSX hit enter and I want to paste that in and we're going to go over it briefly so uh if you're not familiar with typescript this type here allows us to say exactly what heading should expect so the as once again just like in bounded it says hey these are the things that uh this can show up as right so we're not going to allow this heading to be anything at all we're not going to you know say it can't be a div can't be other things has to be one of these H1 through six uh then we


also take a size property and both of these are optional this as question mark means that this is optional as well as the size as well as the class name we don't have to pass those and you'll see that the as has a a uh default of H1 and the size has a default of large and the class name doesn't really need a default but children has to be there because uh what What's the heading if you're not putting text inside and then that's what we will be passing inside of it um that's why it says children is react


node it's getting that inside so here we have our default classes so first we just want to set it to font sand and uppercase and then depending on the size that we pass in we give these different uh class sizes so as we see here this is our fluid type and it goes from 2 XL up to 4XL depending on um the the width of the viewport and so for Excel it's going to be from four to 8 it's pretty a pretty big shift but we'll see it as we start to play with the screen width uh and then at the end we allow for


anything to be passed in if if we want this to be a blue heading we can do that if we want to be white we can pass that in at the end and that's really it that's the extent of this component it just makes it so that we don't have to uh type these all throughout our project especially if you want to go back and change them later we would have to go throughout our project and then change all of this stuff all over the place so it's good to have this code uh located in one spot so now we have our component


let's go ahead and use it so right around our heading we're going to go ahead and say heading and I'll hit enter just at the end and it should import there it is component sorry heading from components heading and I'm going to close that and I'm going to wrap it around our prismic Rich text like that if I save it and check out our work we see we have this little tiny text and we have one error what is that error so we are uh nesting an H1 inside of an H1 because prismic Rich Text is actually giving us an H1 to start with and then


we're putting another H1 around it we don't want to do that so prismic has another component that we're going to use a bunch of and if we get rid of the rich going to drop it down to just a prismic text I'm going to hit command period and we're going to update that import and now we should see prismic R text prismic text right there and I'm going to hit save and that should get rid of the error but we still have the issue of this text being way too small for what we're expecting now the issue is we need to do one more step in our


fluid setup here and we need to import screens and font size and pass those to theme so open up your Tailwind config one more time and after extract inside the curly braces say screens and then font size and then right here inside theme you can say screens and font size just like that going to hit save and when we go back we should see it and there we go so as I scale up it gets bigger as I scale down it gets smaller that is the beauty of this fluid plugin so now and it's a little bit jittery from the left it should be smoother


coming from the right there we go yeah just cuz the the left seems to mess it up for some reason well and and that's just a chrome thing anyway you see now that we can scale our text uh along with everything else and it doesn't snap and it it allows you to to have much more uniform styling and Designs all right let's keep styling this so heading we can pass a couple more styles to and we want to so first going to say size is LG and it already is but it's good to specify and I'm going to say class name


is going to be equal to relative Max W 2XL and place self start and that's not going to have too much of an impact just yet but around our heading up above we want to wrap this in a grid div or or a div with class of grid on it and grid stands for a display grid so to do that with a little shortcut we can just type period grid and then hit Tab and that's going to create a div with class name of grid and to move it down and up like I'm doing uh I am holding option or alt if you're on Windows and just doing up and


down and it's a great way to shift things around with your keyboard you're always going to be faster with your keyboard so if we do div class name grid like that I'm going to add a few more classes on this I'm going to say absolute inset is zero MX Auto margin top or Mt is 24 I'm going to say Max w 6 XL grid rows and for now we can just say uh two but we're going to come back to that uh Place items end PX means padding on the ex like padding to the left and right on the x- axis is six and Tilda or


yeah yeah the the swirly thing right uh Tilda py is 10-16 and this once again is the smaller end or or like the Min value and then the max value all right because we are using clamp under the hood with that so you see that it's saying all right clamp the Min is 2.5 RM it's going to find something around the middle for that like uh Sweet Spot value and then it's going to go up to uh well sorry it's going to be that plus 2.67 don't worry about these values we're not writing them we're just kind of showing you


under the hood it is using clamp to uh do the math between those two parts and so that is a div wrapping around what we have here and it makes sense that it shifts because if you look we actually pulled it outside of of the stack so this isn't being counted and so this just shifts up um this is now positioned absolute and so if we delete it like nothing else moves around right I'm going to refresh to bring it back but that's why everything shifted because we're starting to position absolutely so


now that we have our heading looking good uh let's go ahead and check out the way we want to structure this layout so if we inspect we can see that we have uh a grid where you have some padding around the outside and then we have this heading up at the top left and then at the very bottom we have a flex row that has the body on the left and the button off to the right so that's what we're going to go ahead and build now so back in our hero component we are going to create a div that wraps around um all of


our content here and then down here later we'll have our skateboard uh absolutely positioned and just just as a little marker there here we're going to type period absolute and then hit Tab and that will use EMT which is a plug-in that's baked into vs code and many other idees uh to autocomplete that for us and I moved it up and down using the arrow keys while holding option or alt if you're on PC so just a few tricks that are going to make you a lot faster moving around your IDE so we're going to add some more classes


here we're going to say inset is zero I don't like when this pops up but what are you going to do uh MX Auto say Mt for margin top is 24 then we're going to say grid for display grid I'm going to say Max W6 XL that means Max maximum width of this will be 72 rem or yeah you can see all the values here oh one thing that you might not have that I think I kind of skimmed over and we'll restart extensions real quick that's cool uh you should have the Tailwind CSS plugin for vs code if you do not have this definitely


definitely install this that is how I am seeing those values so apologies that we got this late into the video without me mentioning that but definitely download this you just type Tailwind in for extensions it's the one by officially uh Tailwind Labs that is quite excellent and then you'll be able to hover over anything and see the values for it and it does autocomplete as well it's great so back to where we were Max withth 6 XL grid rows we're going to just say uh two and then we'll say Place items


end and then PX x 6 and then squiggly you know the Tilda py10 sl16 so we will save that and now we get this kind of weird thing and let's take a look at why we have uh this setup the way it is so our classes are working we have the grid here now this looks very different from the other one and that's because both of these rows are going to be the exact same uh height that's because here we have grid rows two and if you hover it's going to repeat two and they're both going to essentially be one and that FR


is is like a fraction so this is 1/2 and this is 1/2 so they both take up equal space we actually don't want that but what we do want tailn doesn't have a class for that tailin doesn't have a class for literally everything because it can't have a class class for like you know with 1,233 right like it just can't have that many classes um but what you can do is you can use what's called an arbitrary value in tailwind and this works with pretty much anything that that we're going to come across we're we're going


to use quite a few of these uh but in Tailwind you can say grid rows and then these square brackets you can then put whatever you need to in there just make sure you don't use any spaces um you need to have just or underscores or something like that because uh a space will make a new class that be one solid string so we're going to go back to our uh class here and we're going to say grid rows instead of two we're going to wipe that out it's still going to be two essentially but we're going to say


1fr comma Auto and now when we do that the auto is going to take up just the space that it needs and then the 1fr is going to take up the rest of it so now we can put the escape the cack we can position this up at the top left and then we're going to put these two in a flex di we can do that just right now go ahead and type period Flex hit Tab and then move this down and you'll see we have that on the left and build your board on the right so this is looking really good let's add some styles to our


heading now class name and we're going to say relative Max W2 XL Place self start startart and that should move it up and to the left looking great the relative bits will make sense a little bit later um there's some zindex tricks here because this is behind the skateboard because we don't want it to interfere with any of the tricks and have it so that this whole div is covering up the skateboard we can't click through but also we need to be able to click this button so that's why we're doing some um of this relative


and just basically changing the way that the Z in index works on this component so it'll make more sense when we get to the actual skateboard itself and just in case you are curious uh the way that I have those markers in case I didn't say it uh you just hit grid and flex and then it'll show those as long as your uh Dev tools are open so just keeping those open so we can see the lines that we are creating so now here in Flex we're going to add some classes uh in this div here say relative width is


full going to say FX Flex call so that on smaller devices it is it is flex call uh which means it will go you know it it'll stack rather than be side by side uh we'll say items Center justify between and we're going to do the Tilda Gap is 2-4 and LG going to do Flex row now the reason we are not using this when it comes to row and column is that you can't really uh like Smooth between those two right like it's it's either row or it's column there's no in between but between two and four there's you


know 1.4 and and and other things so there are values between 05 and one there's not really a value between column and row so that's why you can't use that everywhere but for where you can it's really nice going to hit save and there we go so right now it is stacking but if we make this a little bit bigger it is going side by side you can change those values if you would like but I'm going to keep that right there but I really don't like the way that this is uh stretching the whole way you shouldn't have text that spreads


across your whole page like that you should really have a maxwidth on your text so let's go ahead and create a div and wrap it around this prisic Rich text because we can't actually pass a class to prismic Rich text that might not make sense you might be like why is that why can't I do that I can do that um in other places uh with with pris components like on the image you'll be able to pass um a class on the link field you can do it I believe let me see class yep you can pass a class name but if you look or if you go to you there's


just nothing there typescript says yeah we don't we don't have that buddy that's because Prison Rich Text can return a bunch of elements and so with that you don't really want to add a class to all of those elements and if you do you probably just want to put a wrapper around that so prismic rich text just returns uh those elements and if you want to style them uh it's probably best to do something like this so we're going to say class name and we'll say Max W and then in Brackets because it's a


custom value 45 CH that's for character so it's going be 45 like letters or characters wide and we'll say font semibold and we'll say Tilda text LG SL XL CU once again these are values that we can kind of twe between right so now that's looking a lot better and when we make it a little bit bigger yeah that's what we're looking for let's compare it yep looking pretty pretty good um so it's looking good but one thing that I I want to do is I want to hit this biggest break point a lot sooner I I don't want to wait until we


are uh at like a really wide screen like the XL or the 2XL uh according to Tailwind sizes sorry for the jumping and jittering I want to hit it much sooner um and to do that we can go to fluid. tww and we can go ahead down to configuration there we go and it says custom default break points so this is how we change the start and end so this is like the smallest that the screen's going to get and like once it gets smaller than that it's going to stop uh going and then this is going to be the largest uh so once it gets to the


screens. LG value which is uh based off of Tailwind that will be as big as it grows to so we're going to copy just from fluid down over here we're going to paste it at the top here in theme we're going to get yelled at first they need a comma and then what you need to do is you need to wrap this entire thing in another parentheses and it's still going to yell at you but you're going to go to the end of this and type satisfies and you're going to say fluid theme config just like that and make sure that imports from fluid Tailwind


just like that so the satisfy keyword checks that an object matches a specific type without changing how typescript understands it it's not going to change the inferred type so now that we've made typescript happy by making sure that our code is correct we can head back and actually see that difference now over here I've had this zoomed out a bit so if I uh unset my zoom you see that this is really what it's looking like right now and we'll see that same exact look uh in our version of the site uh but


I've been zooming it out just because I have it you know on the half of the screen and I I really want to try to build the desktop version before we build like the uh the mobile version I would say so that's what we're we're working with I'm zooming it out just a little bit but but um yeah you can you can keep yours as as you want but for me that's what I'm doing all right now that we have our heading and our body setup let's get these buttons pulled in we want these awesome buttons in our project so to do that let's head over to


the course resources and we're going to go and grab button link. TSX so we have up here uh react icons we'll install that in just a second to get the uh the shopping cart and the plus sign but other than that just copy this and let's go ahead and create a new component called button link that TSX and I'm going to capitalize the L here we go and I'm going to paste that in and save that and let's take a look at it so here at the bottom we just have this skateboard icon this is uh a custom thing for Suburbia that was drawn


where's the site so that is like part of the logo see it there and so we're not going to be able to pull that in from any kind of icon pack this is just a custom SVG but uh we are pulling in the shopping cart and the plus sign that we'll see uh is it here it's somewhere I I I think it's actually on the customizer itself um but we need to install react icons and for that we can check out the uh react icons documentation I guess you can call this and if you see we're getting it from fa6 that's font awesome 6 and we don't


actually need to go in here but just to show you how react icons works it is a basically an easy way to get uh icons from pretty much any set you can think of uh well at least a bunch of sets and you just pop them in there as a component and it's very very simple uh and the best part is you only get the icons you import so rather than installing like all of font awesome in your project we're only going to be pulling in these two icons we have a really small bundle so it's says mpm install react icons we're going to do


pretty much just that go ahead and open your terminal I have this new terminal down here so mpmi react hyphen icons going to hit enter and now we have that in our project great and it should Fade Away in just a second there we go now that we're set I'm going to save that and I let's take a look at this button the reason we are not creating this is because I think I mentioned it before Adam cun who is just a brilliant developer uh he's super creative he is one of my favorite um like codepen developers he has so many


cool things go check out codepen.io Cobra Winfrey he whipped up this button for us and uh my cooworker Angelo was able to bring it into uh Tailwind along with some CSS that will'll paste in in a second but yeah it's a complex button and it's uh it's all thanks to Adam so shout out to Adam we are not going to be coding it oursel you can see some of the complexity that he's got here um but I will be talking about the things that actually matter that like we can handle ourselves so first off we have these


props we have color size and icon so they handle exactly what you would think they would uh the color the size and which icon we're going to to get um and icon is optional so you can just ship it without an icon um and then down here we have our clsx at work we have all of these Styles you see button cutout that is going to be some CSS that we put into our CSS file um but then we have several things here group is actually how Tailwind allows you to uh inside this basically tell hey if this like parent is hovered I want to


do some stuff inside so if we see group is that uh yes so that's used down here so if if group is hovered then we we want to rotate the icon down here and that's why when you hover over the button the uh the skateboard does a little pop up like that because the group is being hovered so that says hey if group's hovered let's rotate -25° and then down here you see uh if icon is cart show the cart if icon is skateboard show our custom skateboard and if icon is Plus show the plus and then down here


this is the shadow that uh that we have there so we can go ahead and pull that into our hero component it's not going to look perfect yet because like I said we need to add a little bit more CSS but let's go ahead and swap that in anyway so uh just above prismic next link I'm going to say button link and I'm going to hit enter and then I'm going to close that like that or yeah I'm going to close it and I'm going to say slice. primary. button. text so we're passing in as a child the text uh this perpect next link


here isn't going to be used because we're going to pass the different things to this because one one thing I missed here is that prismic next Link Link props is also being put on this so we're saying hey everything that prismic next link can take we we we want to say that's part of the type and we want to combine that with color size and icon so apologies for not mentioning that first so this does act like a prismic next link and then it also takes color size and icon that's why we have a prismic


next link that we are returning that has all these Styles and the um the size is determining what the classes are uh but at at its core it is essentially a prismic next link so we are going to be getting rid of our P next link here passing the text in the middle but then up here it's saying hey we need something else basic basically we have to pass it a field so field is equal to say slice. primary. button and now it is happy but we want to uh specify a little bit more so we're going to say I icon is equal to


skateboard and it even tells us uh what icons are available let's hit save there and see if we see anything so we see the build our board we can get rid of this prismic next link get rid of that so we don't have the duplicate that should shift over looking better let's also make it a little bit bigger so we're going to say size is equal to large and we want to add some more styles to this we're going to say class name and it's going to be z20 because remember we need to pull it uh up above the a canvas that


we're going to be adding later also want a margin top of two and block so if you hit enter there we go that's looking pretty good and now we just need to go ahead and add the uh styles that make up the the like CR crooked side and everything so if you come here we have this global. CSS and we see that we have this button cutout class as well as an and cover nested inside it and then and before cuz we're using pseudo classes or at least Adam is using pseudo classes here and you start to see why I am not going to be uh


teaching you this because this is uh kind of a course unto itself but it's such a cool button I you know told ah we can't not use that so I'm going to go ahead and click there and go up and grab it here button cut out and I'm going to go to my CSS and if you copied the entire thing over like now that's that's fine but uh it might be easier for you to understand if we paste it in bit by bit um so once again there's a lot of filters um a lot going on here if you want a separate tutorial for this uh you know let me


know in the comments happy to teach some of these things I used to write about these all the time over at front end horse and uh yeah they're just a lot of fun so if we hit save there and go back here we should see this awesome button now come to life and just to go over it quickly we'll see that the clip path is actually what is drawing those things on the sides let me uh get rid of this so we can see it a little bit better so the jagged lines on the sides if you get rid of these and honestly that's the way I


recommend figuring things out start to uh tweak this a little bit see how this is the before and now we have this smooth side the clip path is actually what's giving it that Jagged side or that Jagged Edge and same with the after so you you'll be able to figure it out if you start to to tweak this a little bit all right the hero is pretty much where we want it um we can put an image in the middle but for right now I think we can just leave it blank because uh we're going to come in with this 3D


stuff later so for now let's let's actually move to uh adding our navigation up here our our nav bar so we're going to go ahead and create a new component and call this header. TSX different from heading this is the header now the header is going to be the first component that we make kind of from scratch here everything else we either had uh created as a slice or you've brought it in from the resources uh a great way to build things from scratch is to use react Snippets and right here oh that's not


the one just moved here we go so I use the es7 react Redux react native Snippets by dsz neder uh uh these are fantastic and we're going to uh use a couple of them to make our creation a little bit faster so make sure that's installed and then if you ins inside this component say tsrf C and hit enter we get a typescript react functional component so once again that's TS RFC and there's a few to choose from you can use whichever ones you like but to stick with uh what I'm going to have at the end of this go for one of these only


thing we're going to do is just remove the export default um for this project we are pretty much never exporting default and we're going to use uh curly braces to import everything that that we uh all of our components so first things first we want to change this div to a header and now that we just have the word header let's go ahead and save this and bring this into our layout component so let's layout open this up and we want to import this in in so I'm going to uh actually let's go ahead in here and in


our layout we're going to add a main element like that and then inside that we're also going to add our header make sure we import that from at SL components header it's going to space my Global CSS out a little bit and I'm going to put that on the bottom and now we have our little header it's perfect let's continue to build out our header now that we can see it in our page so inside header I'm going to create a div and inside that div is going to be our three parts we going to have the logo on


the left the nav in the middle and the cart over on the right at least on desktop and so first I'm going to import link from next link I'm going to say href equals forward slash I'm going to close that unless to say logo for now we will import our logo soon but now we see it's logo and it links to well this page right here that's good next we want to have a nav so naav and inside that we want to have an unordered list and inside that we are going to map over some data that we get but for right now


we're just going to say Li and I'm going to say item or I'm going say I don't know boards and let's go ahead and save that and then underneath the nav we are going to have a div and inside that div we're going to have our button link and we can close that inside we're going to say uh cart parentheses 1 and then we need to pass some values to button link here so href because this is not actually going to be like a functioning cart we're just going to say doesn't lead anywhere icon is going to be


cart we're going to have color is equal to purple and AR label is going to be cart one just for some added accessibility and you'll you'll see why because on the actual page when we get down to smaller sizes see how it just turns to one we still want it to say cart one if someone's using a screen reader so that's why we have that Aral label there and we will make it so that that changes out so this is looking pretty good let's go back and start to style things out uh header we're going to say class name and that's going to be


header absolute and uh I and I explain why we have that header class because that is not a Tailwind class that's something that we are using in our bounded component I'll show you that in a sec uh we have left if I can spell it zero right zero top zero and then we have Z is 50 we want that a above everything else and we went to use a Tilda h32 Dash or uh sorry slash 48 Tilda PX 46 Tilda py 46 and MD so on medium screens and above we want to go height is 32 so once we do that we see that our pink suddenly uh slides up our


background slides up and so does the rest of the the content why that's because we took it to Absolute positioning so if we remove the absolute you see that it it takes up space in our viewport again uh or or like in in the stack but once we make it absolute positioning it comes out and we can have it seem like it is part of the hero component practically itself but it is it is not but now we can go ahead and add some styles to these div to this div class name is going to be MX Auto grid with full


Max with 6 XL we're going to say grid calls and we're going to give it a custom value of Auto auto items Center Gap six MD grid calls and then brackets again 1fr Auto 1fr so when it is uh sorry less than medium right so on medium screens and above we have three columns and then on screen smaller than that we only have the two columns of Auto auto if we save we will see the effect of that and if we inspect real quick and toggle the grid here we can see where these different um grid columns are so here's one grid


column the second one is just Auto so it takes up just the space that it needs and Boards doesn't need that much space so it starts and ends here and then the last column is here so we just need to push this all the way over to the right we'll do that in just a second but we can see that our grid is working the way we wanted to just to make sure the logo is always where we want it we're going to add a class to the link element we're going to say justify self start and on the nav we're going to add


some sty first we're going to say uh it's give it an ARA label should always give your navs an ARA label so that it is clear to screen readers uh whether this is a main nav or a sidebar navigation or a footer navigation so here we're just going to say Main and then we'll say class we're going to give it a call span full here we go row start two MD call span one uh MD call start 2 and MD row start one and kind of like uh switching between Flex row and flex column we can't do the uh responsive fluid Styles between you


know one and two and things like that so that's why we have to use these but you immediately start to see like man wouldn't it be nice if we could use these and not have all of these very similar values um but we can't oh I meant to save that here go so we save this and these Styles will become more apparent once we go into more of a mobile nav so as you might remember uh the logo and the cart stay up there and then the navigation drops down which you kind of have to think about it like wait isn't this like isn't the order 1 2


three why does it become like one to three in a sense well that's because of the Styles we just added at its smallest size uh or like on on mobile essentially uh we have a full column span so so however many columns we have it's going to span all of them and we say that hey this element starts on row two but on larger devices we are going to say this only spans one column and it's going to start at column two which is right here and it's going to start in row one so that's why we have the order we do uh


for desktop and then mobile all right style our UL now let's get back to our website actually and for the UL add a class name let say Flex Flex wrap items Center justify Center and gap eight and we don't have much to see there so I'm just going to copy this a few more times and now we see boards boards boards boards and that's working pretty much how we want it there's too much complicated there because we're not doing um a super fancy like mobile nav or anything we have so much other fancy stuff that uh if you want a fancy mobile


nav there are lots of tutorials for that not too many kickflipping skateboard 3D things so figured we'd focus on that and we will be fetching data for this Li in just a minute we're not going to hardcode these values we will be creating a custom type in slice machine to bring in these links but for now let's go down to this div underneath our nav we say class name it's going to be justify self didn't get any help with there there we go and that's looking pretty good is there anything else we need to hit let's go ahead and because


we are hardcoding this cart value we're actually going to create two spans so we're going to say span and I'm going to copy that in the first span we will say one and then in this second span we're going to say cart parentheses one so here on the first span we're going to give it a class name of MD hidden and on the second span we'll say class name is hidden and then MD in line just like that so now if it's desktop we see that uh cart one but if it's mobile we just see the number one so exactly what we


want all right so before we call our data in uh let's go ahead and actually bring in our logo so if we go here to components SL logo just go ahead and copy that and create that component right here so logo. TSX hit enter paste and save then in header we should be able to replace logo to import logo like that from period logo or from period SL logo then we're going to style it with a class name of text brand purple and Tilla h12 sl20 and we need to close that and hit save and we have our logo and it links to our homepage where we


already are but why does text brand purple change the color of this logo so like if we do green green or is it lime it might be lime there we go if we do lime it also changes the color why is that this this is an SVG it's not text let's go there there we go fixed it um so the reason is because we're using fill current color and current color picks up literally the current color value from its parent so because we are setting color to purple the color once it gets into this SVG is going to be that purple it's a handy way to allow um


colors from outside and not have to worry about like do you have to set the fill and the stroke and other things it just allows you to grab current color and then you can treat it like text it's really handy all right we can finish the header off by just removing this props type that comes when we uh create the component from a template and then just clear that out so we no longer have any errors in this file save that and since we are in the realm of importing our svgs let's go ahead and import the ones


that we have in the background here uh both that wide one and then the tall one that we have on mobile so if we go to our resources go to components and files and then you'll see we have tall logo and wide logo go ahead and grab each of those and add it to uh the hero component or I should say the hero folder so the three files I have open are the header the tall logo which I just pulled from here and the wide logo which I paste it in as well and just a reminder uh we want put it in the hero folder why in the hero folder because


we're only going to use these components in the hero slice so it's easier to collocate that way you don't have a thousand components where like bounded we can we are going to use that in many different places same with button um and then things like header doesn't belong anywhere but in this General component folder so that's the distinction here so let's open up our hero and right underneath bounded we're going to add a div in here I'll say period absolute hit Tab and then open that up and going to start typing wide


logo and it Imports like that and I'm just going to close that and here going to say tall logo and it's going to Auto Import when I hit enter and if I save this we aren't going to see it just yet because we need to uh add some classes to give it a size so for y logo say class name and I'm going to say w full and let's say text brand purple and there we go we actually get both of them because it just gave this div a size because right now uh this is taking up the size of its parent and the parent is in absolutely position div


with nothing else really going on uh so let's give this div that wraps our two logos a little bit more style so we'll say inset zero and that is a shortcut for top zero left zero bottom zero right zero so we're setting all of the sides to zero so that when we hit save it brings it to um every single side and just makes it a a full screen thing now we're going to say flex and items Center and pt20 so it's padding top 20 so that it doesn't override or it doesn't like overlap that's what I'm looking for uh


with our navbar let's give our wide logo a few more Styles so right for text brand purple we'll say hidden and we'll say opacity 20 mix blend multiply and LG colon block if we hit save we see that it stays but it fades out a little bit now go ahead and copy this whole class name and bring it over to tall logo we have a couple things that we want to change first we want to get rid of this hidden and instead of block for LG we want to say hidden because we need to swap it out for the background one so


now let's go small and there we go that is looking good and if we do this uh let's see like that um we we aren't going to see that overlap so remember when I uh was explaining the Overflow hidden that's why because it can overflow if you have certain dimensions and we just don't want that so that's looking pretty pretty cool now I want to bring in the subtle little animation the little squiggle as I call it uh that we have on in the background so to do that we need to first get this SVG filters component so I'll walk us


through what this does but go ahead and grab that components new file SVG filters. TSX so create this component and we have this SVG that doesn't have a height or a width and it just has this defs element and we're using this to declare these filters or or yeah this filter of squiggle and then index within the Dom so that any element on the page can reference this without having to add this over and over and over again so we're going to make five filters with a little bit of JavaScript here and each


filter is going to use the Fe turbulence and the Fe displacement map SVG filters in order to make that effect let's first add these to our project and then I'll come back and we can tweak these values and you can kind of see what each of these does basically turbulence passes to displacement map and then that's the output that we see but let's first go to our layout and that's sure I open the sidebar and underneath main we're just going to go ahead and say SVG filters oh and there it is we're going to close that we don't


need to pass it anything and now in our Dom we we we have these filters that are being rendered out and if we look we can see that the ID is squiggle and then an index so before we animate it we can actually go and see this effect on our elements I'm going to apply it directly here going to say style and then I'm going to give it double brackets I'm say filter and then in here you you don't have to follow this I just want to show you how this is working so I'm going to kind of hardcode in this this uh filter


the URL parenthesis single quote close parentheses and I'm going to say squiggle or sorry hasht squiggle because it's an ID and I'm going to say one for now and you might not be able to tell but it changed very subtly and I can zoom in and we change this to squiggle to I'll hit save and you see how it just moved around so that's essentially what we're doing we're going from squiggle zero to squiggle one uh not sure if I save it or just go to right so we are looping through the uh 0 to four in indexes


and we can now go ahead and play with the SVG filter a little bit and you'll you can tweak this to your heart's content but I think the values that we have are going to be the best ones for the rest of the site but you can kind of see ah base frequency the lower it is the like bigger the waves so to speak and then the higher it is the more fine grain it's kind of like a spray painted effect there so we're going to go with 05 and then number of octaves it's really how detailed each one gets so I


would keep it at two we don't need it too detailed and then scale for the displacement map this is pretty much how much are we affecting the outcome if you go to 40 if we go to 400 you see it just becomes absolute mush uh so we're going to keep it at four for just a little bit of a warp and this one is important right here seed this is why the effect Chang changes for each index because we are changing the the seed and if you're familiar with generative art or randomization at all the seed determines


uh how the randomness plays out so if you give it a different seed then the different squiggles will be different if you were to remove the seed this wouldn't change they would all be identical because they're all playing off of the same default seed so with our SVG filters added I now want to go ahead and first wipe it off the wide logo let's get rid of that and what we're going to do is we're going to add a class to this that will take care of that um animate wiggle for us so we're going to so we're going to


import clsx from clsx and in here we're going to say clsx parenthesis class name and then after class name we're going to say quotes animate squiggle like that and absolutely nothing should have changed because we haven't defined find this animate squiggle just yet uh but go ahead and copy this and add it to your tall logo it's going to replace the class name there and going to copy our import over and now we are ready to add some animation to our Tailwind setup head to the resources and we want to


grab Tailwind where's that there it is and we want to scroll down a little bit we're not grabing this whole thing go to key frames and you see key frames we have squiggle you're going to grab all the way down and then also we're going to grab this animation so copy all of that and with Tailwind config dots put it right inside the extend bracket so I'm going to put it right after colors paste that in and if you look we see that as it animates it's just going to go from 0% at squiggle zero and it's going to cycle through 1 2


3 4 and it is going to Loop infinitely and the entire animation from squiggles 0 to squigle 4 takes half a second so now because we put it in the animation uh part or we we we passed it into the animation object we can now use animate squiggle as a class anywhere we want so if you've saved this we should be able to go back and you should see fun little effect just like that and we can zoom out and grab the mobile version just to check it and we see the same thing there fantastic so for now this hero is done let's put it on ice


let's put it back on the shelf and we'll come back to it in a little bit next let's get into our latest drop component let's get some skateboards going all right we're just about done but before we move on I want to make sure that we get actual links in here and to do that we're going to create a custom type that pretty much every site needs uh and that is a settings custom type so once again uh or just for the first time I go into slice machine click here for custom types and then it says here custom types are


models that your editors can use to create menus or objects in the page builder so if you have something that isn't a page you are going to create a custom type for it if if you need to have that data entered in it's going to be a single type because it's like the settings for the entire website so settings and hit create and we get this blank area that we can add our fields to now click the plus sign and the first thing we're going to do is we're actually going to put our site title here so go ahead and say text and site


title just like that hit done we are also going to add a meta description another text like that so you should have two text Fields there next we are going to add a fallback OG image so when you share something on Twitter or um slack or whatever and you get that image that's your OG image and we are able to set those for each and every page so like here we have uh the ability to add this me meta image or you know an OG image but it's good practice to have a fallback that if your editors don't set


it for a particular page it then falls back to this generic one that just uh kind of covers the brand entirely so say fall back there OG image cool and I'm going to hit done and next with those BAS Basics out of the way we are now going to add our navigation so hit the plus and scroll all the way to the bottom here and choose repeatable group we're going to call this navigation and we are going to keep the repeatable check there and this actually doesn't do anything yet uh this is essentially like a folder for your field


so now you see we have this add a field button here we're going to click that and now we're going to add a link there and for that we're just going to call it link and we can keep the defaults and this is really all we need for our settings file right now later we can come back and add some things for the footer like these skateboards are going to be part of the settings but we don't need to do that right now so go ahead and head to your review changes tab see that this is the only thing that we need to push but go ahead and push


that and as that gets pushed up to prismic go back to the page list and click click create a new page if yours isn't ready hit refresh and there we go now I have my settings it's saying you can't create a homepage because it already exists right makes sense so instead we're going to create a settings type I'll first name it up here settings site title Suburbia and meta description it's going to say the best skateboards for now uh and the OG image I believe we actually did upload that with the rest of everything so if you scroll well


I'm not sure where yours will be because I think it's based on upload um order but Suburbia o.png that's what we're looking for so we can go ahead and add that that's great and now we see our navigation and we can go ahead and choose link type we're just going to basically say like forward slash um these aren't going to be real pages but I do want to show you how we might link to an actual page I'll say boards uh or you know what I'll I'll say team and then for the next one you see how we can continue to add items here


actually going to say uh customizer and for choose link type we can go ahead and just say slash build and we haven't created this yet but later this will work and then here we'll just say about and I'll choose link type link to web page and just about but yeah let's just do forward slash so that we're not actually sending anyone to a 404 cool if we go ahead and sit save hit save there we go and publish that we can now fetch that data from wherever we need it and particularly we need it in our header so open up your header and


the great thing about react server components if you're familiar with the old way of of uh building with nextjs which is the pages router there you had to fetch only at the page level and pass it down everywhere if you wanted that data to be fetched on the server side otherwise if you put it in a component that was like a a bit further down the line than a page you would be fetching on the client side not only is that slower for the client uh or for your end user but also makes you have to ship


more JavaScript have to just ship more things in general it just a lot slower so instead with the app router we are able to fetch data from anywhere we want because this is a react server component and so we don't get any penalty for fetching our data here and we get the benefit of not having to pass it down uh it's called prop Drilling in react it's kind of a pain because you have to keep track of all these things that you're passing through like several different components so just above the return here


in your header go ahead and say const client equals create client and we want to import that not from at prismic iio / client but just at SL prismic iio I know it's a little confusing but make sure you're importing it from the local one we want our specific create client not the general concept of that from the prismic client package it's a little bit trippy but make sure you get that one and just call that function and then we're going to say const settings equals await client. getet single and we're


going to say settings these uh the single types are e easy to call for it's just this one document um so it's pretty straightforward but with the prismic client pretty much everything is easy to fetch because it's so well typed that if you were to call for something that doesn't exist it's going to yell at you and say that's that's not a thing and it just really helps you out now we're getting an error here saying hey uh you can't do this just anywhere you want you have to do that only in an async


function so right here export function header we're going to say export async function header and that should go away now we're just saying or or now the eror is only saying that hey you're not using the settings thing don't create something that you're not using so we are going to head down to our unordered list and just above the LI we're going to use curly brackets and say settings. data Dot and you see here it helps us out so you don't have to guess at anything no console logging needed do navigation ation do map cuz that's an


array and we're going to pass that an arrow function where we get item equals and then Arrow uh then parenthesis we're going to open this up and we're going to move our Li inside there now it's going to not be too happy because this needs a key see missing key prop in iterator so say key equals item. link. text and if we save that we will see three boards boards boards boards only thing is this isn't a link right now we want to pass the link in so that we can render out a link so go ahead and and create the or


use the component prismic next link hit enter to Auto Import it I'm going to say field is equal to item. link and then class name is equal to Tilda text and then lgx x l and close that prismic next link so now we made the text a little bit bigger that's why that that bulked up and we are using the actual text inside the prismic next link it's automatically pulling that text off putting it inside the a tag if we inspect it and it is automatically linking to where we told it to link to if you look


at the LI see it's linking to SLB build that we're going to have later so that is is how easy it is to add a little bit of navigation and of course if you wanted to move things around add more links what whatever you want uh it's got a triy and drop feature pretty standard stuff but it's uh easy to get up and running so now that we have that we are good to put this hero on ice for a little bit and let's move on to our latest drop component and we've got a few uh different things we're going to create here we're going to create a


custom type to uh hold this skateboard um data so we can choose which skateboards to display in our latest drop we're going to have a heading and we're going to have a body copy and yeah let's get to it as always with slices we start by going and creating a new slice we have our hero already go ahead create and we're going to say product grid let make that a little bigger and hit create and we get our slice this is be similar to what we did for the hero add a field we're going to use a rich text unselect


everything I'm going to zoom out a little bit there we go and we're going to choose an H2 make sure you don't put an H1 uh each page should only have one H1 component and so we're going to call this heading and we're locking it to an H2 don't need multiple paragraphs and we are done there add another field this is our body unselect everything paragraph bold attach ALC once again you can customize it as you want as you wish but I am sticking with those now we're going to add another field it's going to be a


group repeatable group and we're going to call this product we're going to add a field inside there and we don't want to link here but we actually want to scroll down and we see this content relationship a reference to a prismic document that is what we're going to choose and we're going to label this skateboard and then here it allows us to choose what types we want to make available to pick from here so if this was say like a featured blog post section uh you would want to narrow that down for your editors to just blog post


you don't want to have um you know an author or like something else popping up in the blog post section by accident now we only have two types right now homepage and settings which means we're just going to hit done and leave it as open so like right now you can choose anything and we're going to go ahead and create a second custom type called skateboard so head over to custom types hit create and this one's going to be a reusable type we need multiple of them so type skateboard and hit create now this is a


little different because for the first time we start out with a field here why did that happen because we are using a repeatable type and those need some kind of a unique identifiers so that's the uid so that comes standard you have to have that there so that person can kind of tell the difference between one and the other so go ahead and add a new text field and by the way this is text string without formatting when you just want a string back use a text field that's why we have been using them uh in things


like the website title and The Meta description because we don't want to have to like unformat things we we we don't want to get jsx back or HTML back we just want a string and that's what we want here so here we're going to say name this is the name of the skateboard itself I'm going to move name up above uid and you'll see why in just a little bit uh next we're going to add an image and that's going to be just the image of the skateboard we say image and then we are going to say that we will add the price so go ahead and


scroll down a little bit we want a number and I'm using dollars but I'm going to say uh price parentheses cents so you'll see what that looks like uh and then you have to erase I was going to put price here we don't need the rest of it so going to hit done for the record this is what you're going to be like accessing in your code so we didn't need to like specify the Sense part that's mainly for uh our editors so that they know to input sents not just dollars and then last for this custom type we're going to put link and this


isn't going to come up just yet or at least we're not going to add to it just yet but this is going to be uh customizer link and later on once we have the customizer up and running you will see what that is but that's basically how we were able to link uh directly to this board layout and that board layout and all that stuff so now that we have that we can head back to our slices open the product grid and in skateboard in inside our group here this skateboard content relationship we can go ahead to types and we want to choose


skateboard now we can add multiple but we don't want to here so I'll go ahead hit done and now we have a couple things to push up but before we do one thing that you'll notice here is we only have one type that has changed and we can update our screenshot as well only one type has changed and that is kind of a red flag uh when you've just created a slice we have a brand new slice but our page type hasn't changed at all so we need to go to our page type our homepage and we still only have one slice


available for that page type this is because you can have a bunch of slices for a website and you also have a bunch of different page types and you don't want every slice to be available on every page type most likely like you you might have a blog post page type and you're not going to want this wild skateboard uh hero to be available within the confines of a blog post right it makes the whole thing messy and you're just setting uh content creator up to just not not do the best thing so that's why you have to like opt in to


each of your slices and so yeah there we go we have two on on there now and I'm going to go ahead open up product Rd one more time and say update screenshot going to select file uh or you know I'm I'm going to paste it in from here we have our product grid there we go so it should just look like that and now go to our review changes we have our homepage we have our skateboard and we have the product grid go ahead and push all of that it might take a second because of the never mind say because of the image


but it was Speedy so if we head back to prismic IO we're going to go to the page builder and create a new page up got to reload and we have our skateboard here I'm going to go ahead and create this skateboard and I'm going to see we want the Oni mask so that's what that board is called Oni mask and now this is why I put the uid after because if the uid comes first we don't get this benefit of it automatically creating from the the fields before it uh so put your names first and your uids after that so that you uh don't have to


type there so that's taken care of now the image I'm going to say select image and I need to let me see if I can find it o i there we go not this one this is a texture for the 3D board um but this one right here is what we're looking for it's been great um oning mask complete select that one add to page and then price in sense you can put whatever you want here um I'm just doing just like that $59.99 I don't know what a skateboard really goes for but that seems like a good deal uh it's actually that seems very cheap anyway


and we can leave the customizer link blank for now go ahead and hit save and then hit publish and so we have one skateboard to select now in our homepage you can come in here and we're going to hit the plus and add a new slice this is our product grid we can come back and grab the content that we want here so latest drop heading latest drop body grab our freshest designs before they sell out paste that in there and we're just going to do one for now and we're going to say link to prismic page and this is


only going to give us the one option because we're we're locked in the skateboards it's all I can choose so on mask $59.99 and we can choose that there hit save and publish now one of the best parts about prismic is that your content team will be able to see what their slice looks like but we need to hook up the live preview and this is actually pretty easy um for right now we're going to go ahead and grab our URL just of of our local Dev server so I'm copying Local Host 3000 and I'm heading back to


Suburbia and saying get the live preview click that and say get live editing I'm going to paste that in and it should add SL slice simulator to the end and if it does you hit save and then boom we should start to see our slices populating in that one is just a placeholder component and then the hero should be looking a little bit better than that let me see if it looks decent on reload yeah so the the size was just locked from the initial load but now you can see that we are getting a nice little demo and if we uh remove that


word we can say escape the uh boredom there you go it updates bring it back Colac and yeah that's a really beneficial feature and just like that we are hooked up before we launch or deploy our site we're going to change that URL to to actually point to our production well I guess it's going to be after we deploy our our site um we will change it to our uh URL on netlify but for right now working locally that is just fine and I don't need to publish it again really because um I changed something


and just changed it back but it doesn't really hurt if we head to Suburbia on Local Host we should reload and see a little tiny placeholder component down here placeholder component for product grid variation default slices so let's start building out that slice in our jsx so go to product grid index. TSX once again we've created a uh placeholder component we can wipe out the placeholder component part we're going to change section to bounded and that should have imported I'm going to move it down just like that and bounded isn't


happy because it needs some children and what we're going to do for that is head back to slice machine open up slices click our product grid and we're going to show code Snippets and start passing this stuff in so copy and paste copy and paste I'm going to make a little space and then product this like I I said that this isn't a field and it's not but luckily they give us the slice primary. product map so we can um Loop over however many products we have and render that item out and inside there


I'm going to put a prismic next link to that item and that is complaining because it needs to key prop of course so I going to say uh do item comma index we're not going to do this normally um but for the for right now just to kind of see anything load out this is what we're going to do so key equals index that will give us a unique um key and now we need to import everything so go ahead and hit command period on prismic next link import that and same with prismic Rich Text even though we are going to likely be using


the um prismic text for this again but if we save this and head to Suburbia we see latest drop grab our freshest designs before they sell out and we see link and the link doesn't work right now because it doesn't really know how to link to a skateboard like where where does that live what what URL is that um it's it's not really sure so it just kind of goes I I don't know but here's here's a link right uh but it is giving us the right number of items so so let's start styling this little slice we got


down here so we have our bounded component already but let's add our background color and our background texture so class name BG texture and BG brand and gray gray there we go and that's looking better already now for the heading we're going to want to drop this down to a prismic text command period import that wrap this in a heading typ it all over the place uh and that's already looking a lot better we're going to add a couple more classes to this heading and say text Center TOA MB 4-6 I hit a space there and that's it


for the classes and then we're going to say as equals H2 just to specify that that needs to be an H2 not an H1 great looking really good we'll style our body by wrapping this in a div I'm going to say period text Center hit tab wrap it around and give this a margin bottom so we're going to do Tilda MB slash or 610 hit save there and there we go now we're going to bring in our products now the thing about the way the content relationship works is that this skateboard item that we have here doesn't really have all that much on it


if we were to log this out like this you see I have console log slice primary product and index zero this is what we get here we get skateboard with an ID type skateboard we don't actually have any of the images or our price or anything like that we just have a uid an ID and a couple other uh small details so what we need to do is we need to fetch this data and so we're going to create a specific component for each skateboard and inside that component we're going to fetch uh the skateboards data so from within


your product grid go ahead and create a new file and I'm going to call this skateboard product. TSX I use our shortcut tsrf C like that and I'm going to go ahead and say uh get rid of the default here now we're going to set our props we only need one prop that we're expecting is ID that's going to be a string and then we can destructure ID here inside the brackets and now what we get to do with that ID is we get to call for the skateboard document based on that ID so like we've done in other files going say


const client equals create client and remember we want the at/ prismic iio that is our local one call that function on the next line const product equals await client. getet by ID like that and we're going to first type this we going to say content and as soon as we do it's like do you want the prismic io client content yes we do that's what we want content. skateboard document and then we're going to close that and say ID like that and once again a wait we can't use that without this being a async function now everyone's happy


product just needs to be used somewhere and the reason we had to type this ourselves is because get by ID can return lots of different types uh and it we just wanted to make sure that it gets set to a skateboard document and once again those are automatically typed for us uh like we don't have to go create these skateboard document types slice machine does that for us so let's come down to our div let's knock out the skateboard product thing and let's just render out our image to start with so I'm going to say


prismic next image like that and we're going to say alt equals we don't need to have alt text for this one in in my opinion because we already have the text there uh we're going to say field equals product. dat. image and we're going to say width equals 150 just like that and we're going to close that up now let's save that and now we need to pull this in or or or use this in our product grid so instead of this prismic next link we actually want to use our skateboard product but first I'm actually going to


wipe out this whole thing and also remove the item and index here and we're going to destructure skateboard off of that item so we don't have to pass it later and here first we're going to use a prismic helper function so we going to say is filled and you see this is importing from prismic IO client and this does kind of what it sounds like it's going to do it returns a Boolean for whether or not a field is filled in or not so the reason why we use this and not just um something like skateboard question mark and then


something then something right because things like Rich Text return an object images return an object like it's not just a an an easy truthy falsy value so this is filled helper does that hard work and figures out if it's actually filled in or not so is filled and then we need to tell it what type of uh field we are we are passing it so we're going to say content relationship and we're going to pass it our skateboard so now it's like okay cool I'm I'm good with that because skateboard is a Content relationship


field and it's happy if you pass it something else it's not going to be too happy so if that is filled then we going say and and we're going to say parentheses and then we'll do our skateboard product so skateboard product key is going to be SK it's going to be skateboard. ID that will be unique we don't need to use the index anymore not great practice there so we're going to avoid it and then the ID is what we need to pass in so we're going to say ID equals skateboard. ID close that up and we'll save that and


let's head to our page and we see that we are now rendering out the image so what's happening once again is we are getting the data for this slice and it has this product group that has all these skateboards on it right now it's just one and all we get from that is a couple of things we get the ID and so we're using that ID inside our skateboard product to call for that skateboard and display it and once again these are all server components react server components so none of this is going to happen client side it's all going to be


very fast uh the the way the way that we are calling for this data is not going to be any kind of problem on the client side so if if if you're used to this being kind of like an in anti pattern it is now a good way of doing this also you can remove the uh import react from react that automatically happens with uh nextjs now I'm going to shift my imports around and that's looking good all right so there's a lot to style inside this skateboard product component but first let's go ahead and finish up uh wrapping


this inside a grid container so that as we add more boards it'll be aligned nicely it'll have a nice little gap between them and so on so let's wrap this in a div I'm going say period grid and open this up around the slice. primary. product. map and inside here we're going to add some more classes we're going to say w full grid calls one Gap 4 four MD grid calls 2 and LG grid calls 4 and we go ahead and save that and we shouldn't see really any change but if you inspect real quick and see the grid


yes we have four columns there and as we shrink down goes to two columns and then it goes to one column so it's listening to what we're telling it to do perfect now for the skateboard product first thing I want to do is I want to display the price so right after we call for our product so we're going to say const price because you need to do a little bit of calculation say is filled right there prismic IO make sure that is added to your Imports there so is filled. number and we're going to pass that the


product. dat. price and so if that exists if that is filled in then we're going to use a turnery to return a string and then after that if it's not filled in we're just going to say price not available U but inside these back ticks here make sure you're using back ticks we're going to say dollar sign dollar sign curly braces I know it's if you're familiar with using backticks and uh these template operators you might be confused but that's that that's for the price that's for the dollar sign so


that's why we have that there and then inside here we want parentheses and we'll say product. data. price and we'll say divide by 100 and then on the outside outside this parenthesis two fixed and then pass that a number two and what does that function do well that makes sure that it sets uh it it returns a string to that number of decimals so we want to make sure that we always have cents there uh that are represented so even if the number that we're passing it comes out to like0 0 we still want to


show those so two fixed is going to give us that and I'm just going to come in here and I'm going to add a couple of uh elements that we will style out in a little bit so say div and then inside there say span and then we're just going to say Price save that and we should see 59.99 right there perfect I'm going to move this to the side again so we can do both and inside the div that we just created I'm going to say class name Flex item Center justify between and Tilla text or or or I'll just say fluid right


so anytime I say fluid that's what I'm saying so fluid text small SM 2XL so we have a a like quite the difference between those two next I'm going to create another span but we're going to use EMT to add a class to it right away so span and then dot inline Flex hit hit Tab and there we go we have a span with inline flex and add a couple more Styles item Center and GAP one great now open up that span and in here I want to go ahead and say fa star and import that from react icons Fon awesome 6 pushing that up because it's


an mpm package and I'm going to close that and save just to check that it shows up nice and the nice thing is the these uh icons from react icons come or or they're using current color so we can go ahead and say uh class name and we'll say text yellow I'm going to go 400 cool and after F fa star I'm just going to put uh 45 or 37 go for it great so you have 37 reviews on that one okay we're going to keep building this out bit by bit wrap prismic next image in a div and let's say div for now and we're going to add a


class name to that and we're going to say minus MB one so that's going to be negative margin bottom one so it's actually going to shift uh whatever's underneath it up and I'm going to say overflow hidden and py padding Y is going to be four that's not going to do much right now but you'll see once we have the lines built in that it's going to uh make make a bit of a difference underneath we want to have our H3 for our product name the actual name of the skateboard so we're not going to pass heading or anything for this one we're


just going to say H3 class name and say my2 so margin Y 2 text Center font Sands letting tight and fluid text LG XL like that oh I didn't close it make sure you close it or it's not gonna be happy and inside we say product. dat. name save that and we have our Oni mask outputting looking good and then underneath our H3 we're going to add the button so yes later it's going to not seem like it's underneath the H3 but it is it's going to be on top so H3 going to go a little bit down I'm going to say


period absolute Tab and inside here we'll say button link and I'm going to close or no I'm going to open that up and say customize but inside here we have to pass it a field so say field is equal to product. dat. customizer link and now it's going to be happy so we don't have anything in there just yet but when we do later uh that's going to take us right to the Oni mask you you'll see how we do that let's add a few more styles to this div here so after absolute say inset zero Flex item Center justify


Center opacity zero and uh one thing I I don't think I've mentioned you might be noticing that I'm kind of typing sloppy right so watch I'm I'm going to say transition opacity so instead of typing out all that I'm want to go kind of just get a few of those letters across the whole thing so t r o p see I kind of went like okay first couple letters of that first couple letters of that there's probably not going to be many of these classes that have those uh letters in there and so once I see the property I'm going for


I just hit enter um that way I don't have to go through all the transitions so I if I do it the other way where I go transition see how I have to like really go through but but TR gets me right there so little tip that's why I'm kind of just typing I'm not worrying about the hyphens too much just trying to get um a series of characters that gets me close enough to that so duration 200 say D2 boom group hover and I'll explain this in just a moment but group hyphen hover colon because this is a media query much like


uh when we do uh large and medium and small and all those things uh this is if if hovering then we want to say opacity is 100 and other than that it's going to default to opacity of zero so right now we don't have a group on it so even when we come down here it's never going to show so to make that work let's go all the way to our root div in the skateboard product and let's give this a little love so class name we're going to say group relative MX Auto WF Max w72 px8 and PT pt4 hit save on that and that's looking


a lot better so it's now taking up the full width and look on Hover we get this cool customize button that's looking a lot better if you're not aware um you have to have a relative on a parent item for this absolute to know where its bounds are so that's why we're putting relative here we want the uh button positioned relative to the entire uh well to like the root div I'm just going to toss this on here real quick don't don't you do that oh man you can't even see that let's go border uh four there


we go so that is the constraint of this product or this uh skateboard product and you see that everything's kind of positioned nicely in the center there getting rid of my border honestly this image is a little boring right now let's spice it up I'm going to add a class name at the end and we're going to add quite a few things here so MX Auto let get help MX Auto there we go nope MX there we go so we're going to say w hyphen square brackets 58% that is just kind of a specific number so that this looks and and works


good with um the lines and everything else that we have here sometimes you just have have to dial in those specific numbers luckily Tailwind gives you that way to do it uh origin top transform GPU transition transform dur duration 500 ease in out and group hover is scale 150 all right save that and now we see quite a a shift here so we don't want the skateboard to actually take up um 100% of the width like it well I I I don't think it was before but it definitely was getting close um we wanted to kind of be zoomed out a little


bit and then from that scale in once we hover the whole thing and that's where the group hover comes in with that scale 150 and this right here is really important if we uh if I mess up this class so that it doesn't work anymore you'll see that the board overflows everything and it covers the name and just doesn't look as good so that's what the Overflow hidden is doing for us there it's covering up the board right let's look at our final product to see what else we need to do we need to bring in the uh straight lines the horizontal


and vertical lines behind it as well as that scribble animation and with that scribble we need to bring in the color for each part so we've got just like three things left to do by by my count but I've been wrong before let's start by grabbing those lines so if you go to components SL line and actually this could just be uh located right next to the skateboard because we don't actually I don't believe we use that anywhere else but just in case we will stick it with how I I put it here so go ahead and


grab this hit copy and then let's go to components in components create line TSX and paste that in hit save and now in here you'll see that we have a horizontal line and a vertical line uh it gives us those wavy paths so save that and head back to skateboard product let's start at the very top right after the root div create a little space and we're going to add two vertical lines and a horizontal line here so go ahead and add that vertical line and then another I'm going to copy it and then horizontal


line excellent and we need to pass this some classes otherwise it's going to do this and I don't know if you remember the design but this is not it my friends so I'm going to be passing vertical line uh I'll pass both of them the same classes for the most part but then I'm also going to pass it um a like one class that that will determine its position so one will go on the left one will go on the right so for that that reason I'm actually going to come up above our function right below the props


and I'm going to say const and in all caps with underscores vertical line classes equals and we're just going to write uh a string out here a Tailwind won't help us out here because it doesn't think that we're writing classes here just think that we're creating a string so I'm going to type about everything uh here but let's go ahead and top hyphen zero H full stroke to text Stone 300 transition colors group hover text Stone 400 and we're going to come down to vertical line say class name it's equal


to give us some curly brackets cuz we're using C LSX baby we are going to be combining some strings like like I said so vertical line classes comma I'll open this up a little bit so you can see vertical line classes comma and we're going to pass it a string left hyphen 4 and if you see here we are using absolute so once again this will be our bounds and we're going to position it to the left give this the same treatment down here but you're never going to believe it right for so I know your mind's a


little blown right now but uh that's what just happened and there we go so the horizontal line is not actually styled yet but it has been kind of brought to heal by the fact that the vertical lines have gotten a lot smaller and this is looking better already so for horizontal line let's go ahead I'm going to copy this part of const vertical line classes say horizontal and just in case you're you're not aware um when you do all caps underscores like this this just shows that this is meant to stay static uh


this is not meant to change at all it's it just makes it very clear that these are um things that will will not be mutated or it's it's not like a typical variable so for horizontal line classes create a string then say negative mx8 stroke 2 text Stone 300 transition colors group hover text Stone 400 so we could have copied some of that stuff but uh we're actually not positioning this one absolute but we are um making it take up more space than it kind of should by making the margin and I can't hover and


show you that but by making the margin on the xaxis uh spread out so that's how we're going to get this overlap effect now we're going to add it class name I'm just going to actually copy actually no we don't need clsx with with this one this is exactly what we need class name and we're going to just pass it horizontal line classes like that and there we go it's looking better already and then as we hover over it it changes from the text Stone 300 to texstone 400 that's looking much better and we


are not positioning this absolutely so to uh position our next horizontal line we're actually just going to copy this and go down just above our H3 paste it in there and just like that it is set looking really good okay so it's scribble time let's go ahead and find here we go so scribble right here product grid [Music] scribble.io X paste that in and once again uh this is mostly just a um an N SVG but it also has uh a filter built in here right and we have some classes that are already placed on this path now Tailwind doesn't


actually have uh a stroke Das offset uh property or like any of those classes so you can do it completely if you just wrap everything in Brackets and that's what we have here and you can see that we are uh checking the group to see if it's hovering then we set the dash offet to zero you might not know what this is don't worry I'll show it to you once it's all set up um but all we're going to do is drop this Scribble into our skateboard product right behind the prismic next image so go in here and


we're going to say scribble enter to import it and we're going to say class name it's equal to Absolute let me go ahead and close it so that it helps me with my classes bottom zero left zero right actually uh we're about to use all so let's just do inset zero okay so back that up inset zero so going to do all four so just let's save some time H full and with full all right save that and let's see are we seeing anything we are not here's what we want to do we want to also pass it a color so color equals and I'm just


going to go ahead and pass it uh hash let's say f00 and so if I save that it gets a red little scribble behind it and you see it is drawing in nicely and that's working pretty well we're going to get this color uh from actually from the the image we're going to fetch that in a second so to briefly explain what we're doing um this is a great CSS tricks article by Chris coyer uh called how SVG line animation works and if you want to uh learn it go ahead and give this a read but basically The Strokes can be


dashed right so that's how this is pretty much the core of the trick and what you want to do is you eventually want to make the the uh dashes as long as the path is entirely so you basically have one dash that takes up the entire thing and then another one that is a or sorry and then the Gap is also the same size so imagine Dash that is so long it covers the entire shape now you shift or offset that stroke instead of covering the entire shape it not covers the entire shape right now you just shift it


back so like to start it's pushed off and then it moves back in rides along that shape so that's what's happening is we are changing the offset by which it is set so uh once it's hovered it comes back but with the with the um if it's not being hovered we push it off uh by 1,700 it's just a unit so that's how it works and it provides cool little effects like this so back to what we're doing it's looking pretty good and it has that little filter on it so it looks a little bit Jagged just like our logo


up top but we want to get that color so we can close our scribble and ins our skateboard product at the very top I'm going to put this actually above the props here and I'm going to create a new function called async function because we're going to be doing some fetching get dominant color and going to uh pass that a URL that is a string and we're going to open that up and we'll say const pallet URL l equals new URL parentheses URL and uh URL is a built-in interface that we don't have to uh like import


anything so new line we'll say pallet URL dot search prams do set and we'll say pallet and then comma Json so two strings pallet and Json and then we're going to say const res equals 8 fetch we're using the node fetch that's built in we're going to pass it the pallet URL with these new search prams added to it and then we'll say con Json equals await res. Json so when this returns when the fetch returns we are then going to uh cast that as Jason and return parentheses we want to return one of two things and and we'll actually uh


go ahead and console log what we get back so we can see exactly what what we're getting and we're going to return jason. dominant colors we're not going to get any type help here uh and we'll say period vibrant question mark. heex so if that exists then we want to return that or if that if that doesn't exist we'll say json. dominant colors. vibrant uncore light question mark. heex a little bit complicated but you'll see what uh is happening once we log out uh this Jason and why we're doing this


weirdness so we're going to pull the dominant color down into our skateboard product function right after price say const dominant color equals is filled so we want to make sure that yep that's right the image is actually there before we start fetching based on it right image we're going to say product. dat. image and if so let's go full screen because we're making a Turner so question mark await get dominant color as remember that is an async 08 so yeah or sorry this is an async function so we have to


await it uh get dominant color parentheses product. dat. image. URL and if not we're going to say dominant color is undefined all right go ahead and save that but but actually first we should probably use the dominant color so pass it instead of uh where was it uh scribble here we go so instead of the red here going to pass in dominant color and hit save now what do we get we are getting a nice little result that does indeed look like it is coming from our skateboard you can see how that that matches so if we open up our console we


actually do see what we are logging out so these colors in so first off I'll say that we we have a few different values here um but we have an array of colors and an array of dominant colors okay and the Colors by themselves to be honest with you I don't fully get what these are supposed to be there's just five random colors from the thing I'm not exactly sure I found that using the dominant colors uh when they come back is a little bit better of a uh a result now the reason why we are saying up here in


our function uh give me vibrant or give me vibrant light is because vibrant doesn't exist on all of these or or like on all the images uh but vibrant light seems to exist everywhere so your mileage may vary uh but some of the images that I used didn't have a vibrant on it so I wanted a fall back obviously so you can pretty much have them all as fallbacks but uh it makes more sense if you have each of the skateboards um use the same type of color right like you wouldn't want one muted and then another one uh vibrant


and stuff like that so that is looking awesome now we just need to add more skateboards and that's just a matter of adding more content in the prismic page builder so go ahead take a minute and add a couple more of these shouldn't take you too long you don't have to add these exact ones um but these are the ones that I chose these are kind of my favorites just make sure that you are choosing the right skateboard board texture go for it and I'll meet you on the other side just as a reminder uh you


create a new page skateboard and then so I'm going to do uh thank you I'll just walk you through it really quick thank you and we're grabbing that one with the transparency add to page I'm going to say it's uh let's go $69.99 and customizer link we can leave that blank hit save hit publish and then when you've add all of your skateboards then uh go back to the homepage and add those in okay I've created three more skateboard types and so I have four total I'm going into the homepage and I'm going to go ahead and add one two


three more items and you can see we have our preview over here and to say link to prismic page and I'll choose the pink drop first and then we'll do the thank you and then the yellow and black and as you see as we add them they all load in over there in the preview I can hit save and I can hit publish and when I come back to Suburbia skateboards on Local Host I'm going to hit reload hit reload one more time you you might have to uh reload it twice or three times yeah usually the the cache needs to be um


cleared so twice reloading should do it now let's see if our colors are working good that's looking great looking great awesome so not sure which boards you chose but uh hopefully those colors are looking good if not not go ahead and tweak some of those uh values here wait where is it in here um choose different ones of these or choose another fallback or something but uh with my mileage these worked great so great job building out your second slice next we're going to build out this text and image slice a little bit of Parallax


and this cool stacking effect so let's get into that so to create this uh slice we're going to go ahead and head back to slice machine now remember we can create slices uh one of two ways so we can go into a page and create a slice from inside here create new or use a template if you see the templates have a couple uh templates here that we don't really need but in case you're curious of like how would I build customer logos in fact we're actually going to pretty much build this alternate grid component


right now um but we can also just create new and you can also create it from slices like that uh the differ is if you create it from inside a page type it automatically gets added to that page type so go ahead and create a new one from inside the homepage we're going to call it text and image just like that not the best name but it's always the best name that I I've been been able to decide so go ahead and click into this and we're going to start off with the screenshot so say update screenshot and I'm going to pull in uh


the text and image default so the blue one and just grabb that and pop that in there now let's take a look at what we need for this component so we need a heading we need a body we need a link and we need two images one for the foreground and one for the background now all of the backgrounds are going to be the same but by adding uh the background image into the CMS it allows us to change it at a at a later date if we would like to if we want that not to be the same exact like paint swatch every time and we also need a background


color right so blue orange and that sort of thing the last thing we need is probably the most obvious one uh where does the text go and where does the image go text left image Right image left text right so that one we're going to do with variations the rest is going to be actual fields that we add um but we're going to create a variation that flips that part I'll show you in a sec so let's just build out this slice right here so head to slice machine and add a field we're going to start with a rich


text and we're going to call this heading and un select H2 and we are done next going to create a body unselect all you know the dance by now uh you can allow multiple paragraphs if you want and we need that link in there so go ahead choose link and I'm just going to call this button hit done and now we need our images so add a field image we will call this background texture or or sorry background image yeah let's go with that uh and then create a second one image I passed it that's foreground image thing I typed this


before and then we could uh give a color here and just them to put any color they want as a background that is generally not a good idea you don't want um you know content editors just being like ah I like this purple that is how you don't stay on brand so the way to stay on brand is to use a select field so we're going to call this theme and we are going to set the options here so option one is going to be blue option two is going to be orange and add two more options here going say Navy and lime and make sure you


capitalize the first letter here uh like I guess it it shouldn't matter too much but just consistency is going to help if you uh need to match my code which you do so we go ahead and hit done and I'm actually going to move the theme all the way up to the top cuz that give me the first thing that they set so that is great now here here's the other part we want to create that variation because we want to be able to flip it so right here we say it says add a variation and ask for your variation name and I'm just going to say uh image


on left and there we go duplicate from default so it's going to create uh pull the same Fields over so that we don't have to um re add those uh the cool thing about variations is that if we wanted a whole different set of fields for these variations you can do that so say like um I don't I'm going to make something up but say the the variation also had like a a little uh bit of text above and maybe like some text underneath over here I'm just making things up at this point U but you can have those extra fields on this


variation and then as they switch over uh those fields would not be here on that second variation let's go ahead and add our screenshot I still have it up over here drag the orange one over and there we go as we switch between the two variations uh nothing changes here but we will handle that in our code so that it indeed does change so let's review our changes we see that our homeage homepage has been modified and we have the text and image with two variations so we're going to push all of that and if we go and check out prismic


as long as that pushes that should push although it has two screenshots or snapshots to upload uh let's see what we've got has it been added yet maybe not so let's go ahead and reload and we now see our text and image and we can choose either one so I'm going to go ahead and pick this one to start with and I I just want to show you how this works in the editor uh at first so we're going to say blue uh The Heading is going to be crafted for the kickflip going to basically recreate the content from here going to grab this


body and then all the buttons are just going to say shop boards and that's fine uh choose link type just going to say forward slash and then uh shop boards background image we're going to select I forget what it's called but it's pretty distinctive let me scroll and see well I hadn't actually added it but uh it should be in the zip for you now so uh it's called Paint background.png go ahead and add that to the page and then for the foreground image go ahead select image and you should have our friend right here guy one add


to page and nice we have our images here not sure why they're shaped like that or whatever but uh the cool thing here is is that we can go and say change variation and right now it's the default but we can change that variation and say actually we want this one we want image on left nothing's actually going to really change visually but also all the data stayed in our fields and that's just what I I wanted to show is that um it doesn't Wipe Out the data so that's the that's the power of variations


rather than creating a whole new slice if the slice is pretty much the same thing it's way better to create variations because if if that was a second slice I can't change uh this into a different slice and retain that data so I'm going to change the variation back to just the blue one once again it's it's not really like uh changing anything because we we still have our placeholder component but I just want to kind of show you that's one of the really powerful parts of using a variation so I'm going to publish this


content and then let's get the style in it reload our page maybe twice and there we go placeholder component for text and image variation at the bottom there let's open up that slice uh text and image boom here we go our gorgeous placeholder component let's head to the slices and we have our text and image let's grab these code Snippets the easiest way to get started and start piping fresh hot data into our uh into our slice so copy I'm just going to drop all of it in and then we can work with it I'm going


actually create some space there paste did I get this one already yeah it's body cool next by the way I'm petitioning that we uh have just one button to copy all of these drop a comment if you agree that uh one button to copy every field and just paste it in would be uh a nice addition in in addition to the individual copy buttons I think I think having both would be really handy it would have saved us you know at least a minute on this course and that's a minute of your life you're never going to get back so I'm sorry all


right so we are moving in to uh I guess being a little bit more serious here uh let's see what we got though we got seven errors what is that next image it's missing an ALT property of course so we will handle that no worries thank you for those errors we appreciate it because that is important so we have our images it's just rendering out at whatever size um we have our theme color we have crafted for the kickflip all this good stuff once again if you've not worked with other cms's uh you're getting spoiled here because this is


usually like having to figure out the shapes of things and pass them down and figure out which components go where and what what prop you need to pass yeah it's this is just like like even though I said like ah we're we're hitting copy a bunch of times it's still so much faster than any alternative that I've ever worked with so all right this is our third slice doing this dance so I'm going to go a little bit faster from here on out um not kind of walking through and explaining each part but bounded we're going to go ahead and


import that I want to add a class here so class name is going to be uh curly braces I'm going say clsx to import that uh because we're going to have quite a lot of logic on this one so uh go ahead and hit parenthesis open this one up and we want to say well first we're we're going to be saying uh slice. primary. theme equals and it should give us no it doesn't I I thought it was going to give us um some type blocks blue that is that understanding that whatever I I thought it was going to uh give us types but


it's not uh so we're going to say and BG texture uh BG brand blue and and text white but I don't want to have slice. primary. theme over and over and over again because I'm need to do this for each uh of these themes so I'm going to go ahead and just do this kind of Simply going to say const theme equals slice. primary. theme and then we can just say theme so makes it a little bit easier on us hit save there and then uh put a comma at the end and copy this out three more more times so theme equals orange theme equals Navy


and theme equals lime and change each one appropriately BG brand lime get rid of text white for the last one yes I'm going out of order um but for the Navy one we are going to do Navy and keep the text white and for orange we will also keep the text white and so you save that and now we have our blue background and then remember the BG texture is what gives us that cool background texture so looking great already we can go ahead and kill off this uh theme there because we don't need to display the theme we're already


showing the blue this is going to become because it's the heading we're going to drop it down to a prismic text uh import that wrap it in our heading component and we of course need to pass a side is going to be LG and an as H2 that's looking good and then we're going to have a div that wraps around this body so I'm going to say div well actually let's do Max wmd always feel weird saying wmd but anyway uh text LG and letting relaxed there we go so the letting is just just uh line height so it just spaces it out uh each


each line a little bit vertically next we can swap perspect next link out directly for button link and then we also want to uh change the color depending on what our theme is so inside here go and say color equals curly braces theme is equal to Lime question mark doing a turnery uh then we're going to pass it orange oh if you can spell it and then if theme is not equal to Lime then we're going to make it lime that's going to be kind of the default color but we don't want lime on Lime that is some kind of crime that


was an unintentional rhyme oh I can't stop now I'm just this is not good all right inside the button link we want to pass uh slice. primary did I slice primary if I can type there we go do button. text and once we have that we have shop boards looking good and it's uh lime on Blue we will allow that and then down here at the bottom uh we have these two prismic next images for right now I'm just going to comment out the uh background and bring our guy up and we are actually going to create a second component to handle that Parallax


effect where they're stacked and they move around and stuff uh but for now just for um like laying out this component we are going to go ahead and uh bring him by himself and to create that layout we're actually going to create a div just inside the bounded component give a little bit of space and going just say do grid and open that up and I'm G to cut that div and put it at the bottom inside the the uh bounded so it's going right inside it's going to contain everything in there and we are going to add more


classes to it so say grid calls one items Center Gap 12 MD grid calls 2 and MD Gap 24 we save that there we go we are seeing at least we're getting that split uh but it makes sense why because this has several children rather than just two children which is is what we need so heading as a child of a div is a child button and so on so that means we need to wrap everything but the image in its own div so I'm just going to say div for now you'll see why I'm going to cut this div and put it just so it wraps around


button link and that should fix that problem looking better already but let's give this div uh so a class name but instead of quotes we're going to do brackets because we need clsx to do a little bit of work so we're going to say uh Flex Flex call Item Center Gap 8 try that again gap eight text Center MD item start and MD text left so let's see how that looks looking pretty good all right that's really nice now how do we get the variation to change which side these things are on pretty simply actually so we're going to


have a comma there I'm going to say slice. variation is equal to let's see if it helps us with the types does not that's interesting I'm not sure why that's happening but usually it'll say uh okay maybe it's doing it there that might be it let me see if it yeah see it is kind of helping us it's saying ah you need to have one of these two image on left isn't available so once again the automatic types do help us out so if it is so if the variation is image on left then we want to also add the class of MD


order two and that is going to make it so that uh with flex or grid we can change the order of elements even if like this comes first and then that comes second by saying order two we shift this in the Dom uh uh well not in the Dom but in terms of the order it takes within the flexbox row or the grid uh it shifts It Forward above this as if it it it were there but it doesn't actually shift there in the Dom just with the CSS so we just need that one line and we can um move everything over let's go ahead and try it let's switch


back to our um our variation change variation going to go for the orange one and just to rub it in I'm going to even change to Lime to really see if this is working so I'm going to say save and then publish and let's go back to our thing let's hit reload maybe twice there we go so it shifted over it's lime that's why our button is now orange and that's looking great even our text uh switched back to black rather than white and uh this component is already looking pretty sweet I'm going to switch this back real


quick and it's looking normal again um I think I'm importing sure M next link go ahead and remove that and now we don't have any errors in our component perfect now let's go ahead and create a new component inside text and image we going to call this Parallax p a r a l l ax image. TSX and inside here we're going to use tsrf C hit enter remove the default and we do want to set our props right away so I'll say foreground image image field and we want to import that from prismic client going say background


image same image field that's not what I wanted and then class name question mark colon string so we don't have to pass a class name here but this gives us the option to and it's nice and handy uh inside the brackets we're going to say foreground image background image and class name can save that and we can already bring over some of the uh code from here I'm going to uncomment this and then just cut it and let's say Parallax image and we're going to say foreground image is equal to slice. primary. foreground image and I'll say


background image is equal to slice. primary. background image and we can hold off on passing any classes and stuff for now but we're passing those through and then I remember I copied our uh images from there and I'm going to paste them in here and now instead of slice. primary I'm just going to go ahead and have background image but I'm going to pass um oh oh uh I need to remove the underscore so go ahead and do that just say image like that and I need to import prismic next image into this component


so that is looking good class name we're not using yet that's okay um and now we're not using PR next image in this project or in that component so we can get rid of it uh but you see it is now rendering out those components from within Parallax image so we are one step closer now we want to Stack these two images on top of each other and you know there are tons of ways to do that my favorite way is just by using grid and putting them basically in the same Row in the same column so let me show you


how we do that we're going to put a class on the uh parent div and we're actually going to use clsx here so clsx import that and then we're going to use quotes to say grid grid call calls one I'm going to say Place items Center and comma after that uh quote or after that string we'll say class name and that's where we're going to use that if we need to pass anything it is there for us now let's wrap the background image in a div I'm going say uh period call start one tab move this down and add some more classes here row start one


so we're basically saying hey uh this element should be in row one sorry column one and Row one put it there no matter what just place it there and I'm going to say uh transition transform and that should help us for uh when we are shifting it around and I'm going to go ahead and just copy that exact class name and actually copy this whole div because we're going to put it around our foreground image as well make sure you have uh the element nesting the right way don't worry about the errors those


are just for the alt uh text that we don't have just yet but already we see it is stacked just like that because we're saying hey this is going like in uh Row one column one right so it just goes okay I'm going to put them right on top of each other boom just like that I'm going to add a few more classes on the foreground image one that's this the second one down here um and they might not make any sense now but they will help with the O overall styling as we go from uh mobile to desktop and everything


so going to say h full W full and place item Center oh that's self and we already have transition transform on there so that is good uh now on prismic next image we're going to go ahead and add this alt equals empty quotes we don't really need um alt text for these and that should take care of our errors there looking good so next we're actually going to add some imagix pams and what this is is that uh whenever you host an image on prismic whenever you upload an image to prismic it is going to be served by an image CDN which means


it's going to be really performant and it allows you to get back uh a very fast format so even if you upload like a JPEG it's going to serve it as an avif or a web uh P which are very uh compressed formats they they look great but they're very tiny uh all kinds of benefits that come with using an image CDN one of those is that we actually get to pass um different transforms to our image uh and and they get built into the URL and it allows us to like upload a a larger image but get a smaller one back and


that's actually what we did with um our skateboards when we specified that we want a uh I think we put like with 500 or something like that so we're going to say imageix perams and we're going to put a bracket there and say height is 600 just like that and we shouldn't see too much of a difference just yet um but it's just going to help with all of the images that that we use for all these different skaters and last we're going to say class name is H full Max H and we're going to put this in square


brackets and say 500 500 PX and W Auto save that once again not seeing huge differences but he got got a little bit small let's go to the person next image for background image and add a single class here and just say class name is uh W I think it's w112 so this is I I I first I thought it's going to be a fluid size but it's actually we're just doing 91% so it's it's 11 12ths is what that is and it's just going to shrink that down into a good size and if we check our final version we see that it's pretty


much perfect just not moving around yet so let's get that animation going now uh let's go to the top of our parallx image component and we're going to say use client need to be the very first line and this turns this component into a client component so now we can have the JavaScript based interactivity that this component needs we've been using uh server components pretty much exclusively up until now and that means that this will render as HTML on the server and get shipped to the client but this one will come along with some


JavaScript to run on the client uh aka the browser so what we're going to do here is we're going to be targeting both the foreground image and the background image and when we do that in react it's really good to use refs that allows us to access HTML uh Dom elements directly so I'm going to say const background rep equals use ref and it's right there import that from react and we're going to use angle brackets to give it a type say HTML div element like that hopefully your auto complete is helping you as


well and then in here I'm just going to say null so it starts out uh with a value of null and we're going to copy this and do the same just say foreground and we're going to put those on the divs that are wrapping around the next image so not on next image but I'm going to say ref equals foreground and here uh this div ref equals background make sure these match so background background I have a typo here I said background image ref I let the autocomplete go and uh yeah it didn't help me there so now we can move these


images by targeting these refs but the cool thing about use refs is that we can well use it in other ways so we're going to say const Target position equals use ref and here we're actually going to have um values as a default so X is zero and Y is zero let's put that inside an object and the reason why we are going to be keeping the target position aka the uh place that we want these um images to move to inside a ref is because Ed ref when you update a ref it does not trigger a rerender you might be familiar with uh


State like set State the use State hook the reason we're not using uh set state is that the component would render every single time we updated it and that is like 60 times per second and it just would not be able to keep up and you would see a lot of Jank it would be not not good so we're using a user ref and we using that inside of a use effect in a moment next we're going to use the browser's mouse move event to track the cursor uh we need to put this inside of a use effect hook so let's type use


effect and import that from react it's going to go up and make sure that that indeed imported looks good and we're going to pass this an arrow function inside and then at the bottom of it we are going to say comma and just square brackets we don't want this to run more than once so it's going to just set up our functions and our listeners and then it'll also take care of cleaning up uh when this component is unmounted from the Dom inside the use effect we're going to say window and that is the browser window and remember this is


running as a client component and it's inside a use effect that's going to be fine I think if we pull it outside of that it might throw an error but um you want to make sure that this is running on the client so window. addevent listener right there and we're going to say parentheses quotes Mouse move all lowercase and then comma on Mouse move this is a function that we have not created yet so we are now going to create that function uh this is just a standard ad event listener and there are a bunch of different things that you can


a bunch of different events that you can listen for and when this happens we're going to pass that information to our function so go ahead and create function on Mouse move and that is going to take any event and that is a mouse event it's like that so that's the type open up this function and we are going to say const curly braces inner width and comma inner height equals window so those are properties on window and we're just pulling them off we're destructuring them so we don't have to call Window dot uh in or width


all the time and all inner within inner height R is the uh size of our browser window now we need to get a essentially a percentage of where our Mouse is compared to the size of the browser that's why we're grabbing the inner width and inner height so we'll say const x% equals parentheses event. client X and that is our Mouse position on the xaxis and we're going to say that divided by inner width minus 0.5 and then outside of that parenthesis I'm going to make this a little bit bigger we're going to say times 2 got a


typo here and this is going to give us a range uh between zero and one sorry negative 1 and one let's put that as a com a comment there and I'm just going to copy x% down cuz you can just change this to client Y and inner height and there we go we have our x% and our y% and you know just to make sure we can go ahead and log this right now so I'm going to say console.log and we'll say x per I'm putting it inside an object and you'll see Y and Y percent and I'm going to hit save move this to the side reload our


page and I'm going to open my console and as I move around the page see so that's why you don't want to use uh set State because these fire off all the time uh but you see that if we go all the way to the top our x x percent becomes just about uh Nega -1 and so do our y percent uh as you shift around uh so top right is going to make the x per close to one and Y per stays the same so you can play play around with this and see what values you get but that is our normalized Mouse location so now we get rid of this


console log and I'm going to say Target position. current with refs you always have to Target Uh current because this ref object itself is just a container it's not the actual value react keeps the current value in thecurrent property it's just because of how react Works under the hood so Target position. current we're going to say equals and we're going to make an object because remember we uh are trying to give the format that it is expecting we're going to say x is x% * -20 and Y is y% * -20 so I'm going to say console


log and I'll say Target position. current I'm going to save that and open up our Dev tools over here and we should see as we move our Mouse around we get these values and these are essentially the pixel values that we can move our well sorry not the pixel values but but um values that we can shift our objects by now the thing with event listeners is that uh if you don't explicitly remove them uh when this component leaves the Dom it could still be running and uh that can cause memory leak so at the


bottom here it's still inside the use effect we're going to say return and we're going to return a function so do an arrow function and inside that we're going to say window. remove event listener and we're going to say mouse move and we're going to pass it that same function on Mouse move so once again when our component leaves the Dom it will remove that event listener so we don't have any memory leaks so this is great that we are getting the target position this is working really well um but the only


thing is that right now if we were to use these values to move these objects around uh it wouldn't have this smooth feel let me move it here so you see like I I move my mouse and the objects keep moving because it has this like Smooth what's called interpolated uh values to to to shift that there but not immediately right like it's not going there it's like a Snappy kind of thing we don't want it to so uh to achieve that we need to bring in another ref so we want to say con current position and I'm was going to


copy this part over and so it's essentially the the same thing but here current position is going to hold the current position of our images on the screen so now that we're tracking both the Target and the current we need a function that gradually moves the images towards the target position and we want to call that function over and over again basically once per frame so that it's a nice smooth animation so to do that let's create a function underneath Mouse move I'm going to actually remove that console log we don't need that but


underneath uh on Mouse move it's say function animation frame and this is just going to be parenthesis it doesn't need to take anything so here we'll type const and what we're going to do is we're going to break off uh these values from both Target position and current position but because they will be the same variable right like x and x we need to be able to tell them apart so we'll say x and then we will rename it as we destructure it so this will be known as Target X and then y will be known as Target Y and


we'll say equals Target position. current and that's how we can destructure and rename at the same time we're going to do the same thing over here I'm just going to copy paste because I love doing less work going to select the word Target and hit uh command D and type current so I I hit hit command D twice to choose the next instances of the word Target and now we're already done with that great so if this function is running UH 60 times per second how can we smoothly get the current position to eventually equal or at least be close


to equaling the target position well here's what we can do so I'm going to say const new X is equal to current X plus parentheses Target X I got capitalize minus current X time 0.1 so what that does is that for each animation frame we are going to move the object on the xaxis by the gap between these two numbers so if Target X is very far away from current X it's going to be a big movement 1% of you know a big value is larger than 1% of a smaller value so if these are really close uh it's it's not going to move much per


frame we can kind of see that as uh if I kind of go here and just shift a little bit right it doesn't move much per frame but I move real big then it starts to speed up and then as that Gap slows down so does our animation so you just keep taking a percentage of something it's eventually going to get really really small so now let's go ahead and create a new y do this command D and we have our new X and our new y and you might have noticed that hey we we don't actually set the current position where do we get that from well


that's what we're doing right now so current position is equal to oh no current and that's a little confusing current. current but current position. current is equal to x uh that's new X and Y is New Y and we save that CU it felt like dramatic like check this out and we still have some uh some more to go so with an updated current position inside this same animation frame function we're going to ahead and say if background ref. current so if we have been past a background ref because we don't want to try to transform something


that doesn't exist uh we're going to say background ref current. style. transform is equal to and we're going to use backtick I'll open my code up a little bit so you can see better translate parentheses dollar sign curly braces to put our variable in here say new X and then right right after that we need to say PX or essentially we're just creating a string that the browser is going to understand so in here with curly braces we'll say New Y and then put PX right after it so here we are directly manipulating the


style properties of our background ref and we're going to go ahead and do the same going to copy this a lot of copying and pasting and uh I couldn't be happier so going to do command D and say foreground and the only thing is we actually want to have more of a change for our foreground uh I'm not sure if I mentioned but that's a key part of Parallax where see the skaters are moving much more than the background is or at least a a good amount more and that's the whole point of Parallax is that things in uh the the front move


more than the stuff further back and so with that we're going to go in here and say new x times 2.5 you can adjust that as you want like if you want a really dramatic difference between those and all these values are adjustable but these are the ones that I thought would were best and so now that we have that we need to call animation frame once every uh well sorry to say it but frame and and the way we're going to do that is at the end of Animation frame we're going to say request animation frame that is a


browser function that we're going to tap into and and we're calling this rather than you know uh some kind of set interval or some other timebase thing because this will sync up with the browser's um update or the browser's refresh rate and so what we're going to do is just pass it animation frame all right so now we need to call this in the first first place cuz animation frame is still saying hey yeah I'm not getting called you're calling me here but uh there's nothing to call me in the first


place so we're actually going to call it up at the top of this use effect but we also want to assign it to a variable so that we can cancel it later so const frame ID equals request animation frame so now this is going to be used in our return object uh or sorry our return function so come down the return function underneath window. remove event listener we're going to say cancel animation frame and we're going to pass it our frame ID we are responsible programmers we clean up after ourselves so let's check out our animation going


to reload the page and now that's moving pretty slow but it is moving so I think I might have a typo here ah yes I didn't mean to say uh 01 I meant to say 0.1 save that reload and there there we go much more responsive you can see how all those values uh change the way that this acts but cool we have our Parallax skater Guy moving all around and it even works uh you know in a vertical alignment like this but I mean on phones uh Mouse position isn't really a thing but you get it just showing you that


this is a responsive component that you've built and uh yeah great job on this so next what we need to do to make our uh sticky key part here work is we need more slices so go ahead and take a couple minutes and build in these slices so copy the text here and here use that guy and choose orange all in our prismic page builder here so go ahead press plus and I'm going to choose that and go through and build this out I'll see you in a sec all right that took me just about a minute or two and I've got all


these pasted in and now if I go ahead and publish I should be a to come back to our site refresh and there we go now it's not sticking I'm not sure why that's not showing I did have to fix this I had a typo but that should have updated so we are using turbo pack here and after a little bit turbo pack might um not work great basically because it's still pretty new it only works in Dev mode right now so if you ever have an issue like that just try restarting your server and there we go so that's a lot


better but now here's what we need to do we need to wrap all of these slices just the text and image slices in a div because they all need to share a parent a parent to uh have this stack effect applied to just them and then have them leave right so they they have to have a shared div parent but that's not really something that is built in present that's not something that's just like simple to do where you can just add a div you can do a really hacky thing of like making a slice that is um the


beginning you like the the opening of a div and then the closing of a div never ever ever do that right it's just not it's it's a solution not a great one though and it sets up your content team to make a lot of weird errors and stuff so what we need to do is we need to handle this actually in the page so actually going to log out this page. dat. slices to show you exactly what we're getting back because we need to actually uh modify this array so if we open up our terminal we see that we have this array


it's like the end of the array and each object is a slice so it says uh what the slice type is and this is a text and image and we get our heading is an array so like these are uh not just strings but our theme is is a string so it shows there um you can see the one before it is another text and image text and image text and image and we get our product grid and our hero and that's all of our slices and just an array of these objects and those get passed into the slice Zone it figures out which


component to uh pass this data to and then the component renders out that data it's really that simple so what we need to do is we need to change this array and basically look through the array and if the slice that we're getting back is a hero or is a product Grid or just basically is anything besides a text and image we're just going to say okay you can go on through but if it's a text and image slice we're going to open a div and then we are going to see is the next one text an image okay keep the div open


keep the div open keep the div open and then once we get our last text and image slice like you know the slice after it's something different then we close that div and so it just gives it a little wrap and if you inspect the final site you will see that in fact we have not there not there right here so here is our hero here is our product grid and then here's just a little div that holds other slices and then we we eject out of that div and come back to the video block team grid and so on so we need to


edit that um the slice array and basically pass it back or or pass a new array to the slice Zone that will render that div and to do that we're actually going to uh create kind of a new slice so uh come down underneath your page just at the very bottom we're going to create a new function called bundle text and images image slices bundle text and image slices and this is going to receive slices and we're going to type that by saying content and make sure you import that from prismic iclient if it didn't


automatically do that for you and we'll say content period homepage document data slices slice that's a mouthful but that's what we are bringing in and that is going to be an array of those slices so make sure you put the uh square brackets afterward so array cool open up the curly braces and first we're going to go ahead and uh basically create an empty array that we will return and that will be our new array of slices so we'll say con res or for result res equals empty array but we want to type


this result or res as I'm just calling it here so going to say colon and then parentheses because we need to have a union here and in typescript a union just basically says hey it could be this or this so we're going to say uh I'm going to open this up I'm going to use the pipe operator here it's uh right above your return key if you have a query keyboard um but it's it's that it's just that pipe go ahead and hit pipe and we'll say content. homepage that same one document data slices slice so it could either be just one of our


standard slices and then next line or it could be a text and image text and image bundle slice so you might be saying okay what what is that well we need to Define that that is a type that we are going to make up because we are making up this bundle slice so just above our function go go ahead and say type text and image bundle slice say equals curly braces we open this up now we want to define the three things that this takes so say ID is a string slice undor type and this is like like a standard thing that the sceo


needs to see uh we're going to have a string that says text uncore andore image bundle just like that and last but not least we'll say SL colon content. image and sorry text and image slice as an array so so the slice I I put slice make sure it slices and yeah an array of text and image slices so now we are getting our uh slices well we we will be getting this array of slices we need to Loop over each slice and basically check hey is this a text and image slice do this if not just put it back on the stack


like put it back into the the result so we're going to say four and then parentheses const slice of slices and we're going to open this up and first we'll say if parentheses slice. slice type is not equal to so exclamation mark double equals text and image then open up that that and we're going to say res. push parenthesis slice so if it's not a texted image just put it back just put it back right and then we're going to say continue ah I made a typo here let's uh come back to my my defining of res um


and you put a parenthese around that and this is an array nope not inside I'm not sure why I yeah there we go that's what I wanted to do so uh make sure you have parentheses uh and then a an the array brackets on the outside of those parentheses so sorry for that typo but now uh push is happy again because that isn't right now and what continue does is it just moves onto the next slice in this for Loop but if it is a text and image then we want to do some stuff right so we'll say const bundle because


we are saying okay it's a text and image let's start our bundle is equal to Res do atg1 and what atg1 here does is just grabs the last item in an array no matter it's length and so this is basically how we um keep a essentially state or we are able to see what's the last thing that we did as we went through this Loop we want to check was it a text and image bundle so we're going to say if parentheses bundle and we're just going to say question mark because if this is the very first item there is no pre previous thing and so


this would be undefined so we want to check and make sure bundle exists first we say do slice type equal to it's a triple equal uh text and image bundle if it is you know if that's the slice type then we want to just say okay we already we are already inside um a bundle creation part of this Loop so we're just going to add our current slice we'll say bundle do slices. push uh my autocompletes messing with me do push I can't see it sometimes and then we're going to just push the slice just like that and now we need to handle if


it is not currently inside a text and image bundle but it should be because we've checked that hey uh the the current slice is a text and image slice so else going to handle if this is the first text and image slice that we are seeing so or or at least the first in a series I say res. push parentheses open an object and this object needs to have an ID and we're going to make that a string with back ticks and we'll say dollar sign curly braces slice. ID hyphen bundle I'm going to give it a unique ID based on the current ID


already then we'll say slice type is text and image bundle and we're going to say slices is is slices is slice so here we are creating the text and image bundle and adding slice to the slices array and then here this has already been created so we're just pushing it onto this array right here so it's essentially creating a nested array and with all that logic just before the very last bracket there we're going to say return Red for result and we can save that and it's not doing anything just yet because we


are not using it but let's go up to the top I'm going to back that up and right after page we're going to say const slices equals bundle text and image slices call that function we just made page. dat. slices and that will change what we get out so let's see let's go ahead and log that I have a little um console log plugin that just lets me do that real quick and I'm going to open up the console let's see what we're getting and there we go so we have here as our uh last object in our slices array we have a


text and image bundle with one two 3 four objects in it that's exactly what we're looking for and then everything else is the same we have our product grid and we have our hero and that's it right so we just bundles it up into this one uh slice essentially that has these slices on it now we we need to change the way that we are rendering this out remove this console log and to render this out I'm going to get a little bit tricky here first we need to change what we're passing the slice Z so no longer passing it uh the untouched


slices we're passing it this new slices array for our components we actually want to pass more components than we we we have inside our slices so we want to create that text and image bundle slice but I don't want to put it in our uh slices folder we're just going to put it right here so instead of just passing this component's object I'm going to create a new object and spread components inside that object and I'm going to add another uh object inside this so we're going to say text and image bundle remember that's the slice


we need to create and it's going to take a function and make an arrow function right there and do an implicit return with parenthesis and here we're going to destructure slice and inside the parenthesis we are going to actually return some jsx uh to to show what we want to render and you'll never guess we want to render a div just like that and then we want to do essentially the same thing as the slice Zone does we we have an array of slices that we would like to render so what's better to use than an actual slice zone


so let's go ahead and just use slic Stone again we're allowed to uh and for slices we'll set say slice. slices cuz that has that slices array on it and for components we're passing it the same thing we're passing it just the components because um text and image slice is on there so it it it will find our Proper Slice and just the last thing I want to do is I want to type this slice I going say uh put a colon outside the curly braces and say slice component props and then inside here is we angle


brackets and we will say text and image bundle slice so it knows which props that should be getting okay I've saved it let's go ahead back to our page and reload we shouldn't see any um pinning yet like it it shouldn't be pinning but let's check the domum see if this has worked check at the top here and there is our div is holding all of our SE if you close the div it's on the same level as our other slices so well done I know that's that's a lot but um this is a great great technique that you can use


for lots of different things if you have like a scrolly telling website where as you scroll down certain things happen and you want to still use slices within that um but not like eject to a different document and do it you can handle that with some logic inside of your page and you can even like um you know if if you're doing this several other places you can bust this logic out of this page and put it you know in like a Libs folder or something or a utils file um so yes kind of tricky a bit more


complicated than just the basic Sone but now you know that you can Nest slicon it's an advanced technique well done now that we have that container div we want to go ahead and add our sticky Behavior so let's first just make this sticky so go ahead into our CL s x inside the text and image slice we're going to say sticky and then top is zero and be comma and then hit save go back to our version that should stick that sticks that sticks cool so they're all sticking at the top but that's not what we want


right we want them to stack but keep the previous one visible so how do we do that essentially here's what we need to do we need to say top instead of zero we want this to be a little bit more Dynamic now type this with me let's go C in square brackets because we need to do a little bit of math and we'll say um essentially what what we want to do is index times two two R like that so and I'll remove the spaces because you don't want to have space entailment but that's essentially what we need to do so if


it's zero we don't want any space if it's one it'll be two REM right and so on but we can't do this like this well first off where do we get index from well luckily the slice Zone actually passes us an index so we can say index and because this is inside its own slice Zone this uh slice will will have an index of Zero the Hero up here will also have an index of zero but that's a you know that's the parent slice Zone and then we drop into this slice zone so it's going to go zero one and so on so


we get our index from here and you you might want to do back ticks like like you might be thinking this don't follow me here but you might be thinking okay we'll just do index and then put that in a Tailwind class and boom we're we're good to go right not exactly because well actually just definitely not because you can't have Dynamic Tailwind classes like that every Tailwind class has to be searchable so that as Tailwind uses this uh where is Tailwind this content as tailn searches through all of these directories and


files it needs to be able to spot those classes and then create those classes but if it's Dynamic it's not it's not going to be able to create a class that it can't tell what it's going to be so instead what we need to do is basically say calc and then VAR we're going to use a CSS variable and we'll say D- index and then on our right after the class name we'll say style is equal to double braces because we're making an object quotes D- index and that's going to equal index and if we do that let's see if


that works yeah so there we go that is working perfectly it's exactly what we wanted to do and the only thing we need to do is now make Tailwind happy because right now it's saying uh yeah I know all of the Styles dude and that is not one of them so uh fix it and so basically we need to say okay yeah yeah we are we are creating a variable here so we need to come up above our props and say declare module and we going to say quote react open those brackets we're going to say interface and we'll say CSS


properties there we go spelling is not my for sometimes and open up another set of curly braces and we're going to say index D- index uh is optional and when it is there it is a number and we save that and it is happy again it's like yeah I know what that is that's a number or it's undefined because it's optional right so we have our sticky positioning typescripts happy I'm happy let's move on to our video component because this one is done so with the video component we really only have one thing that we need here uh in


terms of fields and that's just the video ID the rest is going to be the same no matter what so let's go ahead do our slices uh go to page types into homepage click add here and create new and I'm going to call this video block just like that Camel case sorry Pascal case um and we're going to open this up and I'm going to go ahead and update the screenshot and where's my video block here it is drop that in and looking good we only need one field and that's going to be a text I'm GNA say YouTube video


ID just like that and that should be your API ID let's hit done now go to review changes push that up to prismic and that looks good now uh in your course resources we have a YouTube video ID right here go ahead and grab that that is the video that our editor py put together to uh represent the Suburbia Escape brand I'm going to go to the prismic page builder hit refresh go all the way down down and I'm going to add our video block there it is and paste that in hit save and publish head to our local host and hit


reload a couple times to bust the cache and we have our placeholder component for video block so let's open that up video block right there and we see that it's exactly what we expect so let's start by changing section to bounded just like that and now let me break down this effect for you kind of visually you see over top we have um a a uh image texture with like 50% opacity just adds like the the dust on top of that you can see it there uh and then underneath that we have a video player and then


underneath that we have uh these divs that are getting a mask and it's the same mask that we apply to the video player and then in the background we have a different texture and just the background so if we build our component up just like that we will start by adding a class name to bounded and saying BG texture and then BG zinc and that's 900 and I'm not going to save it yet because we need something in here uh the first thing we're going to put in here is a little bit uh of texture accessibility so I'm going to say H2 I'm


just going to hardcode this video real and that needs a style or sorry a class of Sr only and that makes it so that it is only picked up by screen readers it will not be visible um on on the page at all but there's some text here to explain what this component is because it's coming in as a section it should have a heading to explain it now after that we need to create a div with class relative so I use period relative open that up I'm also going to add aspect video to that so it keeps a 16 by9


aspect ratio the whole time and if we save that I think we might be able to see something yep there we go so I already have my my video shaped slice here I'm going to open that up again and inside here I'm just going to comment out the the things that we talked about so I'm going say masks and I'm going to say video and then texture overlay that way we can just kind of have a visual uh idea of where we're going with this I want to do the video part first just so we see it show up and then we can do


things around it and for that we're actually going to need to create a new component I'm going to call that lazy YouTube player. TSX and that's how we're spelling it and we're going to get the start of this component over here in our course resources so we're going to do more to this but there's an an iframe here that I'm not going to have you type out right like that's that's not fun to type out but I still want to show you how to uh use intersection observers and build this out into uh a custom component so


let's go back to our page and right now this actually should work so if we import lazy YouTube player it's taking a YouTube ID passing it to this uh URL string and it should render out a YouTube video so go ahead in here and I'm going to say lazy YouTube player and then what is the CL or or the property we need to pass YouTube ID I'm going to say slice. primary. youube video ID close that and hit save and there we go so if that's all you needed we're done but there's a couple of things that we we we want to


do there primarily we don't want this to load until it is close enough in the viewport that uh the user is probably going to see it right I think I explained that a couple times so let's go into our lazy YouTube player and add that functionality now we're going to need some JavaScript uh happening in the browser to observe where the uh user is on the page and if they're about to scroll this into view so we need to say use client otherwise we're not going to ship any JavaScript with this and so to


keep track of whether or not this is in view yet let's go to the top of our function here we're going to use both uh use State and use ref so first we're going to say const Square brackets is in View and set is in view equal to use State import that from react and we're going to give that a default of false because we just it's it's not in view yet right so the thing the default pce for itself next we'll say const container ref and we're going to say use ref like that and we want to type it as an HT HML div element and going to give


that a default of null and then we want to put that ref on our div here and say ref equals container ref nice so that's being used now we need to use a use effect that runs when this is added to the Dom so we'll say use effect and they're going to pass that an arrow function and inside there we need to um do some work on this container ref uh but I don't want to keep typing container ref. current so we'll say const current container ref is equal to container ref. current just pull that out there and then we need to create an


an intersection Observer so there's a nice demo here at webdev simplified.svg you get you're going to go through each entry and if the entry is intersecting then we can do something with that right so like here we're saying we're changing the background color uh from Blue to Orange and we see this right here where as we scroll this into view it's going to go from uh sorry from Orange to Blue I I read the turnery wrong so that's what happens if it is intersecting that's if it's not um and so as it


Scrolls into view as soon as it just is like one pixel into view it changes color so let's create this intersection Observer we're going to say const Observer equals new intersection Observer right there and we're going to pass that for its first argument an arrow function so go like that and in here remember we get entries and if we want the first entry because this is in an array we only want the first one we'll just say square brackets and then entry and that will pull that off of the array for that first item and here we


want to check if that entry is intersecting and we just do if parentheses entry that is intersecting so if that's true then we want to set is in view to true because it is now in view we could so like if you wanted your element to um do something when it's not in view again you can say else and then handle that but we don't want this to um unload from the Dom and then reload and then unload and then reload right once it's there just keep it don't keep um Deering it essentially so we're just going to set that once it's set it's


done and now for the second argument to intersection Observer we get to pass it a little bit of config for the intersection Observer there's two properties we're going to be working with here um is the threshold property and this is a number between zero and one the default is zero so as we saw above um if it's just one pixel then that is a true right so so it it comes back true but if we change the threshold so here it's set to one that means the entirety of this shape needs to be visible there we go see like just


everything so has to be 100% And then it is set to true we want ours set to zero and I believe that's the default but let's just be explicit about it and then we are going to be using a feature called root margin and what this does is this makes it so that yes this is like the official window of of uh what should trigger it but you can add some margin around that that root element to make it so that once that is touching the element then we turn to true and that's what we want to do because we don't want


it to only load this YouTube player when it's like you know one pixel in our view Port we want to load it a little bit before so that the user doesn't even notice so we're going to say root margin of 1500px you you could go a little bit less than that but I found that that is like a good height both for mobile and for desktop um that once they're at that scroll point it's pretty much like yeah they they are serious about seeing the the rest of this page so now we have our Observer and our current container ref


but you may be able to see that uh current container ref and observer are not use this Observer does not know what to observe and that's kind of a problem so we need to check first and make sure that there's a current container ref and that exists if current container ref and then if it does exist then we want the Observer to observe it observer. observe current container ref so hey keep an eye on this and if it comes back run that logic there and now at the end of a use effect you always want to clean


up something like this so we'll say return we'll pass an arrow function and we will say Observer un observe do unobs serve and oh man typing all over the place I'll say current container ref just like that uh we need to check if it exists see so that's why that's where we're checking uh that that could be null right so copy this and then close those braces so now it knows what to observe these are both visible and inside here just to make sure that it's working let say console blog and I'm going to say it's in


view so scroll away I'm going to scroll all the way to the top I'm going to open my Dev tools and as we scroll down we should see there we go it's in View and if I scroll back up it's in View and if you're confused like wait no it's not once again that's that's the root margin so if you want to check it without Root margin you can go ahead and comment that out we'll re reload and now we're not getting the it's in View and it'll only happen when it's in view yeah three four five six so it is working that's awesome bringing


back my root margin and now we just need to use this is in view variable so pretty simple we're going to come here and just say hey is in View and parentheses and let's put our if frame in there and now let's test this out now yeah it's it's tough to test because uh you know we we shouldn't see it the the way that we have it set up but what we can do I just reloaded the page and we can look at our Network and we see all this stuff coming in and as we scroll down you actually see that nextjs is lazy loading images


so these skater guys they don't come in until they're probably going to be used and oh right there see all that video playback that's where we now have um called for that video and if you scroll down quick uh you see that that's that's it so it's working exactly how we want it to great job on this video player but now I want to style it because uh it's kind of boring right like the lazy part is good but uh the the the style kind of stinks so let's go ahead and bring in our masks what I'm going to do is I'm


going to comment out the lazy YouTube player so we just get our black background and inside here or just underneath the mask comment what we're going to do is we're going to create a div and we're going to give this a class name and this is going to be a clsx usage so open those parentheses and I'm just going to self close that div and in here I'm going to uh have a string we're going to say absolute inset zero remember that's a shortcut for up down or or top right left bottom zero and now we're going to


say quite a few things that are in square braces because Tailwind does not have um like native mask properties so we're going to say mask hyphen image and it's use colon URL parentheses SLV video mask.png parenthesis square bracket next one is going to be uh mask mode that would be Alpha then we're going to need position our mask so mask position that's going to be centercore Center and then mask repeat say no repeat with hyphens and last one is going to be mask oh in square brackets mask size it's going to


be 100% And then underscore Auto and then close those brackets and if we save that we don't see anything just yet oh and I should show you the video mask uh video mask right there so this is the image that we are using the shape looks familiar because it's you know the video mask uh and the the detail about it is that all of the white is solid and then everything outside of it is transparent in this PNG so that's how that's working and we are specifying that with the mask mode alpha that we want to uh to use it


that way now we just need to add a background here and I'm actually going to kick that outside of that string uh so we're making a second string we'll say BG brand lime you'll see why we're doing that in a second but there we go so that is applying our mask uh to a div and then just making the background line it's really that simple folks so we're going to go ahead and create two more of these to create this uh stacking effect that you'll see here see how it's got the white and a couple layers of that and


then the green so we're going to create two more divs but um they're all going to use this string so instead of having a lot of repeated um text there we're going to go ahead cut that out remove that comma and so right underneath our Imports here let's make a little space we say const mask classes it's equal to that string you know what I'm actually going to pull out the absolute and the inset zero and you'll see why in a minute so pull that out and we're going to put that back on the div itself here it is so say uh BG


brand lime and then absolute inset zero that will be repeated but uh we're going to say mask classes there and now it's going to combine the all these classes that that we've um set up there with our specific classes for these divs so now that we have that I'm going to uh shift it around because we we need to actually use some transforms to move these um off of each other otherwise they're they're just going to stack as we create more divs so I'm going to say fluid like that translate and that's going to be X 23


just like that and then we're also going to Translate Y so we'll do fluid translate and it's going to be X sorry y say that uh 2/3 so going to be the same thing on both of those let me just make this a little bit bigger so now we can copy this div and paste it twice and instead of BG brand lime for these I'm going to hit command D and just say white uh the absolute and the insect can stay but we're going to trans change these translate values this is going to be x 1/3 this is going to be y 12 and then this will be the


X12 and we're going to put a dash or a minus sign right in front of the translate so that it's actually going to be a negative 13 and if we save those go back uh this is the final version there we go so we see that bit of Separation we're getting that cool effect and that's looking great and now what we can do is we can put a uh div around our lazy YouTube player and use these mask classes again all right so I'm going to create a div and inside that I'm going to say class name and I'm going to make this brackets


because we're going to be using clsx on this and the first thing I'm going to pass it pass it is mask classes and then after that let's open up a string and first let's put our lazy YouTube player inside this div and in this string we're going to put relative that's why I had to pull the absolute and the inset out and then height is full and if we save that there we go we are getting our YouTube video masked and if if we didn't have the mask classes you can see what this would look like it would just be the square right so the


mask is helping us out there didn't save it right and that's really all we need for uh our lazy YouTube player but inside this mask I want to add this texture overlay because this is actually going to be inside there otherwise it'll it'll be square and it'll not look great so we're going to use the built-in nextjs image component because this is a local image that we have image texture right here see it's just this grungy noisy cool little thing uh so go ahead and say image capital I and we're going


to import that from next image hit enter and we're say SRC for source is going to be slim texture. PNG and we need alt text of empty quotes because this isn't something that should be uh announced to screen readers we're going to say fill for the positioning of it and class name is going to be pointer events none because we don't want this to capture the mouse click or anything in in any way we want to say object cover right there and last we're going to say opacity 50 I'm going say I was going to save it


but I need to close it first so if we save that we now see and if you want to crank up the opacity to like really see the effect uh right that's like that's like too much you can't even see through it um but yeah pacity at 50 and that looks really good now the last thing we we we want to do here is uh not send anything to this lazy YouTube player if we don't have a YouTube video ID uh input in into our field so we're going to first check to see if it's filled so open up curly braces say is filled and import that from prismic


client and this is a key text got tell it what it is and then slice. primary. YouTube video ID so if that's filled then we we want to use a turnery I'll open up my code a little bit and I'll put that underneath cool so we want to use a turnery and say so if that's filled uh parenthesis around this great that's going to be returned otherwise return null and if you save that that should work just fine so here is our video block we've got it added it's going to uh lazy load it's going to Loop because of some of the um


video or uh YouTube there we go because of the settings in here we have Auto playay um but also Loop is set to one and the playlist is set to itself so it keeps looping on itself and it starts in muted so just a nice way to have a video play in the background now for the last of our slices we're going to create the team grid this is going to uh show skaters which is going to be the their own custom type and when you hover over them you get this cool scribble effect and there's a couple of other cool things


happening in here that we're going to get to so to create this slice let's go to our page types homepage add a new slice and we're going to call this team te grid and we hit create open that up and we're going to update the screenshot with our team grid looking good now the only thing this is going to take is a heading so go ahead create a rich text and that's going to be an H2 and we're just going to say heading hit done and now what we need to do is create the skater custom type because that's really what we're going


to be doing with this slice you could do it one of two ways right you could have a group here a repeatable group uh say group I'm just going to show this as a demo and you could do a Content relationship just like we did with the skateboards right so you could say skater and then have your editors choose which skaters to display and that works but um just for sake of ease and like we want to show all of our skaters and and not make it too much of a of a hassle we're just going to not do that and we're just going to fetch all


of the skaters within our component and just display them so let's go to our custom types create a new custom type reusable called skater we're going to click create and now we start off with the uid we explained that before and we're going to use text for for a first name and text for a last name then we are going to create an image we're going to call this photo background and then another image photo foreground and the last thing we're going to have here is a link field and we'll say customizer link just like that


and this is going to be what um allows us to link to their specific boards uh once we have the Builder up and running or or the the customizer up and running so one thing I'm going to do is I'm going to drag the uid beneath the first and last name and then this is set so we have several changes our homepage has a new slice that slice is team grid and skater is a brand new custom type let's go ahead and push all of that up and now we want to head back to our page list I'm going to refresh and create a new page I want to create a


skater and so I'm going to look at my content here I have Sophie Castillo I'm going to copy that and here I say Sophie and Castillo I'm going to put it here oh okay that page didn't work so you Castillo just like that and we're going to choose her photo background so select image I think I used her her name yeah Sophie back and Sophie front so you see that the the background is the actual picture background but um using generative fill in Photoshop to uh you know where she was now there's actual like it it looks like it's just a


photo of nothing right so we have that for the back add and then we have Sophie front and we're going to add that you can keep the customized link empty for now and go ahead and save and publish that so we can work with just her for now um the the rest of it just going to be uh us adding I'm going to put Sophie Castillo like that cool um the others you'll just add on your own time and I'll I'll let you know when to do that and now we want to go ahead and add that slice to our homepage at the bottom so


scroll scroll down we see all our previews looking good our videos looking good and now we have this team grid go ahead and push that and what's our text the team very original of me to think of that the team all right going to hit save and publish and now let's find our newly created slice uh Team grid here it is right here and I'm going to open up slice machine to get uh Team grid here you are and show code Snippets just going to copy that and I'm going to pop it in here but I'm not going to import prismic Rich text I'm


going to import prismic text you know why and so we have that let's see what our uh content says here the team really small hope you can see that but it's all the way down there the team and so now what we want to do is uh first let's do some of our uh clean up here so we'll say bounded so that it's nice and centered let's just see oh where did it go oh there we go so it has some padding too and we're going to need to put a background on this so class name is equal to see BG texture and I believe


that's BG brand Navy if I'm not mistaken is that not reloading my uh like I said turbo pack is still in beta uh so sometimes it just kind of dies on you and you need to restart it there we go that's looking good well not good yet but you know uh make a heading here from SL components heading great and then pass it the prismic text let's make sure it's an as in H2 with size LG and class name is going to be margin bottom 8 we're going to give a little bit space between this in the skaters text Center where did I go text Center and


text white save that there we go the team looking good now let's actually fetch all of our skaters so here I'm going to say const client equals create client from the local one and then with that client I'm going to say cons skaters equals await client do get all by type there we go that one and we're going to say skater so give me all of the skaters and now we need to say uh that this Con team grid equals it's an arrow function so we put the async right before the arrow function so async like that and now this is no


longer returning a jsx element is returning a promise that will resolve to a jsx element so put those angle braces around it I'll show you like that all right so that's how ours should look and now with this skaters array we want to map over that so let's come beneath our heading and we're going to create a new div we say period grid and hit Tab and add a couple more things to that so we'll say grid calls one Gap 8 and then on medium and above we'll say grid calls 4 great and inside here we want that


skaters do map and then that is going to take an arrow function uh that has an implicit return so we use parentheses on both sides and in here we're going to get skater and index and in here what we're going to do is return a react fragment and I'll I'll explain why in a moment so uh and we also need to pass a key on this react fragment so normally you could just do that for a react frag M that's the shorthand but if you are doing it inside an iterator you need to pass a key so we say react. fragment and we might not be importing


react so go ahead add import from react there we go react fragment and the key we're just going to set this to index it's not that bad for uh something where it's it's not going to be shifting around this is going to be uh shipped as a static uh component and now inside here the reason why we are uh set back a fragment is that we want to do a check and you can't return um a check like this you need something around it and I don't want to add an extra div just for the sake of adding a div so say skater


do dat. first name and and remember this is a string uh or it is nothing right so it it it can either be null or it can be a string and we just want to check and see if it is if it's there before we call for our skater so we'll say skater and oh right we we haven't created this component yet but we can at least uh leave a comment here and just say skater um and or you know what let's go ahead and just make a div at just a skater and then is that everything we need for right now yes I believe so so


if or you know what let's uh yeah that's good so we have a single skater great that makes sense and now we need to create that skater component so inside team grid new file skater TSX open that up and going to do tsrf c just like that and then we're going to remove the export default part just export function skater and we're going to set the props up here so first prop is going to be skater and this going to be requ ired and we're going to say content import that from prismic uh client we shouldn't need the react


because it were in nextjs I'm removing that import and then content. skater document just like that so now it knows what it's what it's expecting and then index is a number and we'll be using that to change the color on uh the squiggles so that they get different colors now that we have that let's p pull those props in here so we have skater comma index looks good so let's open up this div get rid of that skater bit and we're going to render out the images that we have as well as the name uh that that that we've got so let going


to say prismic next image we're going to utilize that we're going to pass it a field and that field is skater dat. photo background and we're going to say width is 500 that way we don't get a massive uh image this tells image X the image CDN to shrink it down to that and we're also going to say image X pams we're going to say we want the quality oh that's just be a q quality actually to be pretty low because this background doesn't really matter um just at 20 because most of these are blurry it's


it's it's all good if this is not not pretty we'll save a little bit of uh resources there so we'll say alt is equal to just quotes and then last we'll say class name and for now let's go ahead and trying to think yeah let's just keep that empty for now but we will come back to it I assure you now copy and paste this instead of photo background we're doing photo foreground looks good uh we'll keep the width we remove the image exp perams we don't need to uh reduce the quality there the the default quality is good


enough and if we hit save we should on reload oh we are not using this skater component yeah okay so uh let's go ahead and just finish with our um data here and we'll say skater do dat. first name and then copy that and say last name cool save this head back to index and instead of this random little skater div go ahead and import skater from period SL skater and now it's asking for an index and we'll pass it index it's also asking for a skater and we will pass it skater and it is happy so we know we're


passing it the right thing and here we see we have uh in very small type we have our background we have Sophie with the cutout and we have her first and last name all right let's add some styles to these divs now in at the top of the root div let's go class name and we're going to say group relative Flex Flex call center and GAP is going to be four and now we want to have a div inside that I'm going to say period stack layout it's not a Tailwind class that's something we're going to add and I'm going to drag that div all the way


down and here we're also going to say uh overflow hidden because as we hover we want um Sophie not to overflow the the thing right so all right so this stack layout we actually have it in our resources in the CSS file so here we go Global CSS and we want to come down here to stack layout actually we can grab everything here so stack layout and skater scribble path and skater hover skater scribble path grab these four CL es and we're going to open our CSS and we're going to paste those underneath just down here hit save and


now this stack layout actually well we can look at it right here um this is actually from a small CSS a thing put together by my friend Steph and it has this great little well it has a a lot of good helpers but um the stack layout is right here and that's space this a more complex version of it but all it does really is it creates a grid and it adds uh a a single grid template area and that's just stack and then it places items in the center and then everything inside stack layout at least one level down gets the grid area


of Stack so they all just you guessed it stack on top of each other really simple little thing but it is really handy so now stack layout if we save that we immediately have a working thing there so now in our background what we need to do is we need to start with it scaled up so that we can scale it down uh when we zoom in so we're going to say scale is 110 transform that un unlocks all of the transform things you just need that on anything you're transforming we'll say transition all like that so that it um will tween


any kind of change say duration 1,000 ease in out group hover is going to be scale 100 so when this element gets hovered we're going to scale it down uh and then group hover again and brightness 75 so this is a nice little filter we're going to uh actually change the brightness and you can do all kinds of things with filters check it out if you're not uh too familiar uh group hover is going to be saturate and we're so we we're going to desaturate just a little bit and I'm going to use a custom value here so 08


and that's going to be in square brackets if we save that we see that yep it it is working but why did it go on top of Sophie well because the zindex changes once you have these transforms put on it so we just need to do a similar thing for Sophie I should just say the uh the foreground right so here we're going to say transform transition transform and the re reason we have uh all here is because we're not just transitioning the size here we're also transitioning the saturation and the brightness so we we needed more than


just the transform but here we're only zooming her in so we'll say duration it's going to be the same it's going to be 1,000 uh ease in out and group hover it's going to be scale 110 so it's just the reverse essentially and so boom that's how we do it now we're going to put our skater name in an H3 and inside that H3 uh well each of these going to be a span so I'm going to open that up and put first name inside and then span open that up put last name inside and then save to have it formatted for me and inside this H3 I'm


going to say class name is relative grid Place self end and justify self start padding of two so P2 font Sands text brand gray and um fluid text 2XL remember it's a little curly and 3XL so 2XL 3XL and then there we go we have Sophie Castillo right there now we're going to change a little bit of the styles on these spans so I'll say class name is going to be margin bottom and we put hyphen and then in the square brackets we're going to do.3 em and that is a relative unit to what the text is so as the uh text grows


and shrinks uh this will still have the same gap between the first name and the last name that's what we want and we'll say block just to make sure it stays on its own line and that it is movable um and then for the second one we just want to say block also perfect but now while that is readable on Sophie's black shirt we actually uh don't know what's going to be underneath and on some of them they're not as uh you know like we we just don't know so we're going to put this little uh dark gradient that you


see that or that you might notice now it's hopefully a little bit subtle um we're going to above the H3 add a div I'm going to start with relative and I'm going to add some more classes to that so we'll say height is 48 width is full Place self end BG gradient to T now if you're not familiar with Tailwind gradients this is how you declare first off that you want a gradient and then you see how it has this uh CSS variable for gradient stop so now we're going to declare those we're going to say from


black so that is the beginning and then we're going to say via transparent to transparent so this essentially creates a gradient from with black and then via means is going to be in the middle and then transparent at the end as well so if we save that we don't really notice it too much on Sophie once again but that is working is just taking up this space and then at the bottom let's go ahead and use our button link and we're going to pass it a field and that's going to be our skater data. customizer link and we'll say size


equals small and inside that we want to say build their board and this is pretty much all we need here but we want to bring that scribble effect in and you might have seen in our CSS we also copied in this skater scribble path and if you remember the stroke Dash array and stroke offset uh techniques that we did before we're going to be doing that again uh in order to draw in a spiral we need to grab a component from over here I think it's skater scribble at the bottom so go ahead and grab that and we're going to


let's see it says uh slices team grid skater scribble so create it right there here's our team grid new file skater scribble TSX paste that in and we can hit save let me just open it up to show you that once again there's not much to it it has a couple of classes on there already um and yeah there's it's just an SVG but we are going to animate that in and so we I went to check if it was there it is not yet we need to add it to our scene so right in between the prismic next images here so it's going to go in


between the background and foreground it's going to be skater scribble import that class name will be curly braces cuz we're going to say clsx and we're going to say relative so we saved that um but if we look at our CSS we have here uh skater do hover so on Hover we then push the stroke Dash offset so right now there is no period skater it's essentially us doing the same thing as like group uh so ahead of group we say skater and hit space and then we should see some there we go so have that little thing come in right now it's just


taking the dark text that is the default um and it's animating that in but now we can give it uh so if we do text white that'll change the color because um our skater scribble is using current color for the stroke color so we want to actually give it um a brand color though we don't want it to be white and we don't want them to all be the same that's why we have relative here but at the top of our skater function we need to uh Define an array so at the top of our function here we want to create an array of colors so


we'll say const colors equal to array oh that's not an array array there we go and it's going to be text brand blue just like that I'm going put a comment at the end and I'm going to just copy that a few times in this one I'm going to say lime then orange pink and purple and we could add Navy and all all the others but this is good enough and we don't we don't even have five skater so it's it's not even that big of a deal um but then we want to say const scribble color equals colors index um and you could make it so that


it Loops back through uh by using like a modulo but for our purposes this is fine but if you intend on adding a lot more people to your your uh skater team you'll have to do something like a modulo so that you don't get to the end here and uh don't have a color to add so here we're going to say comma uh scribble color and now we should see that yep she gets blue next one will get lime orange pink and so on all right so we are done with styling this now just go ahead and create Dylan Jordan and Carter's little uh profiles within


prismic and I'll see you on the other side of that all right I am done adding all my skaters uh make sure they are all published and then at the top you might just want to add uh Belle or you know like their last name cuz most of them going to come in with just the the single name and this isn't super important right like it doesn't really matter these aren't people that we actually have but it just looks a little bit tidier that way but now if we go over to our page and we reload double reload there we go so have different


colors they're all loading in they're all looking really cool and yeah that Zoom effect is just one that I haven't seen many other places so I think it's a pretty neat effect that you can bring into other things so we're finished with our team page let's build our fun physical footer so to create this footer we're going to first start by creating a footer component TSX footer. TSX and then tsrf C ahead and create that remove the default and we can just save this I'm actually going to change these Dives to


a footer like that change them both and I can save that and if we go to our layout in app layout. TSX we have header here and we're going to put footer right there and if we check our page we have a little footer at the bottom there very small but very much there so now we can start working on our footer so what do we actually need in our footer we have a background image here the logo we're just going to get from um our SVG component we need to add this background image to prismic as well as have all


these Skateboard images so let's head to slice machine and we're going to go to our custom types we need to edit our settings custom type and we're going to add first an image here I'm just going to call this footer image uh like that and hit done and then we need a group a repeatable group and we're going to call this footer skateboards hit done and then inside footer skateboards we need to create an image and this image is going to be skateboard like that and now let's push that up to prismic so that we can make those


changes in our settings file as soon as that's done cool uh we're in our settings file so let me refresh it a couple times and here we go we have a footer image and our footer skateboard so we're going to select image we want this orange background uh picture choose that one and then for the skateboard well for the skateboards we're going to select about eight skateboards so go ahead and choose your favorites make sure it is from not these uh but from the I think if you just type complete that's there you go so any of


these choose your eight or so favorites and I'll see on the other side all right I've picked out eight that I like and I hit save and then we're going to publish and those won't show up just yet we're going to have to go and edit our footer let's go back to our Local Host 3000 and our footer component here and we're actually going to start by giving footer a Class A Class name I'm going to say BG texture and BG zinc 00 and text white and you might be wondering uh where are we using that background texture not here but down


here this is still part of the footer here and so that's where we're going to be seeing that background texture I think we're getting a little bit of overflow to from the skateboards moving around so let's say overflow hidden there and if that comes back to bite us we can remove it but that might be a little optimization there so inside here we're going to have a couple parts I'm going to map it out with comments hitting command for forward slash and a image here uh and then we're going to have uh


physics boards or board physics whatever and then underneath we're going to have uh the list of links so that's uh how we're going to map this out I'm going to wrap the image and the boards in a div so I'm say do relative open that up put our comments inside and we're going to add a couple more styles to that starting with a height and we're going to create this value so square brackets 75 VH for view height doing fluid p1016 and MD aspect Auto right so first for this uh prismic image go ahead and import that prismic


next image we'll say field is equal to settings oh we don't we haven't called for the settings yet all right let me go ahead and comment that out let me just leave that there for now uh we need to call for our settings here this uh footer is not getting anything what we can do is we can go ahead to our header and we can grab this exact Fetch and the cool thing is um next CHS is smart enough that it's not going to fetch this twice it's going to add the first time to the cach and then it'll just get it from there so uh this is not


hurting our performance at all so make sure the import's coming from the local prismic iio move that down a little bit and then export async function footer and now everyone's happy now we can open this up again and say settings dot data. footer image and I'm going to close this but we're going to also add alt equals empty quotes fill class name object cover and right after that we're going to say width is going to be 12200 we save that we not seeing anything yet oh there we go okay so we have our image that's


looking good um we can get rid of that comment physics boards we're going to wait on for just a second uh let's put our logo here so I didn't pop that there but we are going to import logo from from logo it's in the components uh actually let's get it from at components I like to do that even though it's in the the the local folder because if we move this footer anywhere else this will still work where the uh relative one would break so that's why I I still like to do that even if we are uh in that same same folder so we're


going to say class name and pointer events none because we want to be able to click the uh skateboards right through this logo say relative H20 mix blend exclusion and I tped something and MD h28 so if we save that after closing it we save that we get the logo right there and the exclusion part is what makes it kind of like a photo negative where the blue and the orange are opposites and it's creating the opposite of that line so it's just kind of a cool effect there feels a little bit grungy like a


skateboard company might do now underneath this div we're actually going to use our old friend bounded like that I'm going to open that up and inside here we're going to say UL for an unordered list and inside that we are going to actually Loop over the settings uh navigation array so we'll say settings. dat do oh dat now navigation map and inside we're going to have an item and we're going to have a arrow function that returns in Li and let's put a key on that so key is going to be uh item. link.


text and prismic next link you need to say field equals item . link close that and there's no Styles here but uh we'll fix that in just a sec so there we go team customizer about and that's what we see at the very top as well so that's working well now let's give some uh extra details to each of these so for bounded we actually don't want this to default to a section this is a nav so let's go ahead and say as nav and we'll say class name is equal to BG texture oh wait uh we have we actually already have that so we don't


need this again we are in good shape there so just nav for now cool now for the UL we'll say class name is going to be Flex Flex wrap justify Center Gap 8 and fluid text LG XL if we save that there we go that's looking really good and that's all we need for that bottom part oh but actually I don't like that if you hover it uh it doesn't give any kind of indication that it's clickable besides the uh the hand so let's go ahead and give this a class I'm going to say hover underline and now there we go much


better cool so we've got that all out of the way now we want to create a physics component so in your components create a new file and name this footer physics p h Ys I cs. TSX open that up and now uh this would be a very long section of the course and I really like this is not a matter JS course I really want to get into the Gap and the 3js stuff and so we are going to paste this in but uh we have a lot of comments here that so I'm going to walk you through to make sure you understand it think there's an error here that's


fine um I I'll explain that in a second and ah we do not have MJS installed so that is step one here so go ahead open up your terminal I'm going to say npmi matter hyphen JS and at types slatter JS like that because this will allow us to use some typescript types and not have to uh type all that stuff ourself so go ahead and install that looking good now it's happy again and our warnings went away and everything so that's looking pretty good um now this is a react component and at the very bottom


you see that we have very little jsx there's literally just a div with a ref and uh a class name to render any classes that we pass into this footer physics component and as I said it's it's a big component it's say 200 lines and uh yeah so let's kind of cover it quickly um we create a use ref for the scene so we need to reference that div so we can inject things into it uh the engine this is what handles the physics simulations in uh MJS you'll see that we're we're importing a few things from MJS we have the world we have the runner


the renderer the engine um those are kind of the the main things that uh run matter JS and like every every scene needs those things other stuff are like good helpers uh bodies are pretty common because that's like the actual like physical things that you're using and so we create our engine and then we are using an intersection Observer remember to make those uh skateboards load in so this is the same stuff that we had before and uh this is just to see if it's mobile because we want to show fewer boards on mobile so here's a use


effect we have several use effects here and this one just handles your mobile detection and it sets this and also uh creates an event listener if there's a resize so that if you know they turn it from landscape to uh what's it portrait or something happens where they resize it uh we will recalculate that that uh resizing and if it is on mobile then we only show three boards otherwise um we go ahead and show them all we have our intersection Observer to uh start and stop we've looked looked at this already


the only difference between what we made and what is happening here is that uh we want to re-trigger false every time you leave the viewport so uh if we go here if we leave and come back we we we want this to happen so that's why we're just saying hey set in view to whether or not that's true or false just set that each time right and then our threshold is right between 0 and one because we want to trigger at 50% so that the users see the boards drop because if it triggered only like like like right now the boards would be


already dropping but I want it to be about here so that then they see it all right you you can change that as you like but uh it's a lot more fun if the user sees the board drop rather than just seeing this right um more intersection Observer stuff and then we are doing a little bit accessibility here so if they prefer reduced motion we don't run the physics uh we set the gravity just point 5 it's not too strong but you know and it's on the Y AIS and then we need to create the renderer and we need to to


tell it what element to attach to we hand it our SC div we give it our engine and then there's just a couple things here where like the device pixel ratio matters um and you can do wireframes or not like if you look at a lot of the matter JS demos they're all in a a wireframe style we don't want that we want to look kind of real with our skateboards and no background ground then we add some boundaries to the scene so we have this function that we made called create boundaries and that is down here and that takes a width and a


height and you can see what we're passing in is the actual width and height of the um of that element so this the scene is that div and so we are passing it that so we'll say hey uh that's our bounding box please make walls on the top left bottom and right for uh that scene so that basically these skateboards hit against that wall on on the left that's how we create those let's go back up to where we call that um and then we go ahead and make those boundaries and then we need to add those boundaries to the world the world


is where everything's happening and uh you just every time you create something you have to then pipe it into the world um the mouse interaction for dragging boards doesn't come just out of the box we actually have to uh use this Mouse uh class I guess yeah exactly class and uh we need to pass it to Canvas and here the matter JS has some wrong types so that's why we're saying this because otherwise it's going to yell at us and say whoa Mouse wheel doesn't exist it does uh there's just something wrong


with the matter JS types so we're ignoring that and then we pass it a couple properties for the mouse constraint and the stiffness just is determining how much or or rather how responsive the the drag is um and then this is whether or not we hide the indicator for dragging we then we then add that to the world and we have our event uh event listener and we handle the on resize and this is where we just update these various um parts of the renderer if the uh client width and height changes and yeah not not too much here


we we recreate our boundaries because the sizes have changed we want our floor and our ceiling and everything to uh move to adjust to that right um and then yeah we've already gone over the create boundaries and then the runner is really important that manages the animation Loop so this runs like 60 times per second and it updates the engine so this calls the engine over and over and over again and says hey what's the state of these things and then the engine reports back and then the runner sorry the yeah


the runner will uh run the renderer render run render so yeah it it gets a little dicey but um there's lots of good demos on the MJS site um that you can check out and then here's our uh return function this just cleans up everything that we've got going our event listener our renders and Runners and all that good stuff and here we need to actually add our boards to our scene cuz so far all we've done is create our uh boundary and the drag ability with the mouse and a few other things but we haven't added


any of the boards to the scene so we get our world we get the sizes of things because we want to render them within this area uh and then we want to randomize the board position and rotation so you see that we're using math. random times that and math at random uh times the the height uh but we change it a little bit so that it's not like poking through the ceiling uh then we give it a random rotation and then we uh go ahead and create a rectangle with rounded Corners so it's shaped like the skateboard UHC for Collision purposes um


we set the bounciness of it we give it minimal friction and we scale these textures down and as long as there are boards we go ahead and add those boards to the world and that's I like I say like that's it but um that's how we create this component so if we save this and go to our footer let's go ahead head and remove that comment and say footer physics slash and then we want to pass it our uh board texture URLs and we could just go settings. dat data. skateboard or sorry footer skateboards like that but actually I want to


manipulate these a little bit first um so if we go up here just under our settings we're going to say const board texture URLs is equal to settings. dat. fo. skate sorry foore skateboards map I'm going to open this up and inside here we're going to pass an arrow function we're going to get item and going to just say as image SRC so that is a function that we get from prismic let me just make sure that we Yeah Yeah from the Pres client I'm going to shift these around real quick and move that up cool and as image SRC gives us back a


URL when we pass it a field see uh but by the way all the prismic um SDK functions and everything have great great comments so you'll see as image SRC we pass it an image field uh and then we do something to it with the imageix properties and what it does is it gives us back this um URL with that built into it so it's a really really handy um function to use in times like these so we're going to do just that we're going to say parentheses item. skateboard and then we're going to have a comma we're going to pass it that


object we say h is 600 because we do not want to pass in like that full Big Image uh that'll make rendering a a little bit more taxing and then at the end we're going to say filter and we just want to really make sure that this comes back as a string not undefined or not some kind of error uh from the as image SRC C and so we're going to say filter parentheses URL and we need to type this first and say URL is string and then Arrow Boolean parentheses URL so put this on a new line so we can see it and yeah so


this is using typescripts type guard syntax to filter out any non-string values and make sure that this is just an array of string and so now we can pass this board texture URLs right here and if we hit save there let's see I think we still need to add some classes to it but we okay that's not ours this one's ours and yeah we need to position this so in our footer physics I'm going to bring it back to the left side say class name and this is going to be absolute inset zero and overflow hidden if we save that and reload our page


there we go all right nice so I'm going reload mine again and you should have a nice bouncy little skateboard footer now you can change any of those values that we covered uh you can make it more friction less frictioning more bouncy you can reduce the gravity um you can make it so that so that it's like a negative gravity and they actually float up um and like they stick to the ceiling maybe that's pretty cool um play with it as you wish uh and then if we are on on mobile so if we go all the way down let


me try to do that um yeah we only see those three boards and that's plenty for a phone cool we just finished the footer okay I promise we just have one more thing to do before we start working on the actual 3D skateboard and using Gap and all that good stuff we on the site over here have a nice little effect that you saw at the beginning where as we scroll down uh stuff appears ear and we're using a little intersection Observer for that boom boom boom um there's no button on that one oh well uh so for that we need to do a couple


things first we're going to make a couple CSS classes at just at the bottom of global. CSS we'll say period slide in Hidden and inside here we'll say opacity zero and transform is going to be translate X 100 pixels and then we'll say at Key frames slide in we're defining a animation here and then we'll say two brackets this is where the animation will end say opacity one and transform it's going to be translate X and that'll be zero I just want to bring it back to where it should be now with these classes we could go adding them to


each thing that we want to handle but it's a lot easier if you actually create a component for this I'll show you how we do that go to your components create a new file we're going to call this slide in. TSX and in here we're going to do a tsrf c go ahead and remove your default there we're going to start off by saying at the top use client it's going to be using some JavaScript to tell if it's in the viewport now let's open up our props because we need to Define children and that is going to be a react


node next we'll do a delay and that is going to be optional that's a number and then last we'll do duration also optional and that is also a number great now let's spread that inside our props here so we'll say children and we'll say delay and we will give that a default of zero and duration will give that a default of 6 so like I said we're going to be using an intersection Observer so in here we need to make an a ref so const element ref equals use ref import that and this is going to be an HTML div element great


and then we're going to say null it's going to be the initial value and we're going to have a use effect very similar to the other um intersection observers we've seen and this is going to say const element equals element ref. current and if no element ref sorry just element uh return so get out of here if if we don't have that we're not going to run our Observer const Observer Define our Observer new intersection Observer there we go I'll get it I'll learn how to type someday and then in here we are going to pull


off that entry like we did before and open up our curly braces and we'll say if entry do is intersecting open up these curly braces for our if statement element. style. animation equals back ticks slide in space and then we're going to have our durations sorry our duration and then s and then e and dollar sign delay and then s right after that for seconds and then forwards now this is not a class just to make this clear this is actually we are we are setting an animation and we're using the slide in animation


and those are the animation properties as as if we were to say animation and then putting slide in right all that stuff so that is what we are doing directly on the element and then once we have it in let's say observer. un observe element because we don't need to uh pay attention anymore we don't need to have it watching anymore so uh right after our function we want to use our config object say threshold is going to be Z and root margin is going to be in quote so -150 PX and so normally the root margin extends past uh what what we


are seeing so if it's a positive value it goes past so that it it loads before you see it but we want it to load a little bit after um so once it's 150 pixels within the viewport then we we we want it to load right so that's why we're using a negative root margin so then after we create our intersection Observer right after that we want to actually tell it what to observe so say Observer observe and pass it The Element and now we need to put that ref on here so what what you call it uh element ref works for me and then here we need


to make sure we clean up after ourselves so return an arrow function and we'll say observer. disconnect and actually I think we just used un observe in our other part so we're going to go back and clean that up because the the right one to use here is disconnect now the difference here it's kind of subtle but unobserved is specific and it says hey stop watching this element right but disconnect you don't actually pass it an element because this is more like we don't need this Observer at all we just want to stop all of the


observation please stop existing right but this is just like hey stop watching this thing so to truly clean it up we we should disconnect and then at the end of this use effect we actually have some dependencies here so we'll pass in delay and duration and down here we just want to add a a starter class of slide in Hidden now instead of the word slide in we need to say children and that should if we save it that should work so let's go ahead and start wrapping things in that so I'm going to go into our uh product


grid product grid there we go and all we're going to do is just call slide in and we're going to wrap our heading just like that and so it's a really simple implementation you just saw it fire off that's great let's go ahead and wrap this div and slide in also and now if we save it that'll do the same thing perfect and that's really it for this we we're just going to have the skateboards stay as they are but if you go to our team grid it pretty much has the same setup where we have a heading and then we have


our uh actually we don't we don't have a body there we can just say so slide in import that and we can wrap our heading in it but here we can go ahead I'm going to put parentheses around skater and I'm going to hit enter and give it some space around it and I'll say slide in and there we go if I save should format nicely now if we go down to our team section we should let's see there we go the team and they're all going to come in at once that's good enough for now we have lots of other cool things on the site we don't need to


uh polish that animation too much more and last let's go to text image text and image there we go and we're going to bring it to this component as well we're going to put it around our heading our div here and our button link go ahead and do that and when you're done yours should look just like this with slide in around button link div and heading all right it is the time you've been waiting for we are going to be working on the hero and bringing in this skateboard first thing that we're going to be doing is really just bringing in


the 3js and react 3 fiber elements and then we'll be adding G app and animation everything after that but the very very first thing we have to do is create a new file at the very root of our project called npmrc and inside here we need just one line so say Legacy Pier depths and that's equal to True save that and what this does is this lets npm skip strict checks for matching package versions so it avoids any errors that we would get uh when some packages don't totally support each other yet and the reason we're doing


that normally we wouldn't but right now as as of this recording next is on 15.03 and it's using a react and react Dom release candidate so these aren't like fully out to the public but next is using them and uh says that you know they they are stable enough for them to go uh react has just updated to version 19 like even with that the things that we're going to be using specifically react 3 fiber and react 3 fiber dry uh are not uh compatible yet with 19 or or or rather they don't have a pure dependency


of 19 they they will work with 19 but when they list their dependencies they're saying react 18 so that's that's the reason so with that saved we can open up our terminal and I'm going to make this big I'm going to say npmi we have couple things to put here say three this is the 3js package we'll say at react hyphen 3/ fiber and at react hyphen 3D REI and last We'll add gep now gsap and we go ahead hit enter and now let's close up our terminal and head into our hero folder so Source slices hero and in here I'm


going to create a new file called interactive skateboard. TSX going to do a tsrf c like that remove the default and I'm going to save that and then I'm going to open up the actual index. TSX and you see how we have a skateboard here I'm just going to go ahead and call in interactive skateboard and just close that up it shouldn't take any props just yet and we see little interactive skateboard text right there so we are piping that in well let's go back to our interactive skateboard and like I had in


my comment in uh our index file we need to Absolut absolutely position this so we'll say class name is equal to Absolute inset zero uh Z is going to be 10 Flex items Center and justify Center all right save that so we have a nice container for the 3D stuff we're going to be doing and inside here I want to create our react 3 fiber canvas so c anvas s like that and import that from react 3 fiber and I'm going to open this up because this is going to contain everything we're doing so the canvas is both what it sounds like yes


it's it's going to render an actual canvas element in our page but it also gives us a lot of things built in this is more than just a standard canvas um this comes with a camera already built in that we can then customize this comes with a a a whole bunch of stuff that normally if you're doing regular 3js you have to set this up you have to add it to the world and all this stuff but it's a lot easier with with with react 3 fiber so we are going to just give this a class first to make sure that it's


showing up so we'll say class and we'll say Min H and then brackets 60 RM and width it going be full so that's just going to make sure that we are actually seeing this canvas and then inside here we want to use react suspense which helps us manage the loading of uh any assets like the 3D skateboard and its textures and it can show a fallback while everything loads and it's just a much better experience we're going to say suspense and we're going to open that up and now react 3 fiber comes with some


great hooks that we can tap into the only caveat there is that we have to do that inside the canvas so if we were to call one of these hooks right here it would throw an error and say hey that only works when you're inside the canvas so how do we call a hook inside here well we need to create a new function in in the same file is where I'm going to do it um but you you could call this anywhere uh but we're just going to say function we going to call it scene and we are going to uh not pass any props just yet we


will soon and then we're say return parenthesis since we're inside the canvas element we actually have access to different elements that you can't use in regular HTML this is another one of these weird things where like now that we're inside the canvas it's like a different world and so I can say group and this is understood uh once it's passed into the canvas that this is kind of like a div if you think about it um in in in that way of like when you need to group things into a grid or you need


to have a bunch of elements that are all in a flex box you put them in in a div well this is kind of the same thing where like I want these elements to uh be moved in in the same way or kind of just be bundled together I'm going to wrap them in a group so it's I kind of think of it as as like the div of 3js um and you can just return a group like this and kind of have that be your parent element uh but inside here the first thing we're going to do is we're going to try to render out a cube just


to kind of give us the base basics of how uh rendering things in 3js with react 3 fiber actually work so everything that we actually see here is technically a mesh and so like if we look at this wheel that wheel is made up of two things geometry which tells uh 3js where the points like where all the the vertices like what the shape is of that mesh and then the actual material or like the the the texture and how that reacts to light and everything like that so we need to add geometry and material to every mesh


we create so we're going to say mesh just like that once again these are these custom uh or not custom but specific 3js kinds of uh components and we'll say mesh basic material and this is one of the several materials that we have at our uh disposal and then we will say box geometry just like that and now we want to import this into our scene up here so we'll say scene guess not import but just use it and then one key thing is that this is all going to be running on the client side so let's make sure we


go up here and say use client and if we save that and check out our file we see that or at least I see that I have an issue it says cannot read properties UND defined and this is kind of a tricky one to troubleshoot this doesn't really point to anything but what this is is it's that version mismatch I was telling you about where um our react 3 fiber is not expecting react 19 it's expecting react 18 and so it's it's kind of freaking out and going I I don't know what to do luckily there is a release


candidate available right now for react 3 fiber if if you already are using react 3 fiber at 99 like if it's already come out and is the uh is the default by the time you are seeing this you don't have to do this but if you got that error and you're on 8.17 or something like that go ahead and open up your terminal and we're going to say npmi at react 3/ fiber and at 9.0.0 d rc. one just like that if we install that you should see it change here in your package Jon and then uh if we are fortunate


enough yes there we go we have our Cube so once again that will be gone eventually uh hopefully sooner than later once everything's caught up but for now we're on The Cutting Edge and that is the only uh downside right now so we have our scene but this looks just like a it's a square div it's not like a 3D right like where's the 3D here that's because we're looking at it straight on and in order to kind of see some directionality or some I guess dimensionality we need to look at it from more of an angle so I'm going to


say here inside our canvas we're going say camera I'm going to pass it position and that's going to be an array of 1.5 comma 1 comma 1.4 like that and we're also going to uh say fov is going to be 55 and that's field of view and that's kind of like where with your phone cameras how you have uh you know the wide angle lens and then like the zoom lens that is a similar thing where the higher that goes the more like Zoom it's going to be the lower the more of like a fish it's going to be so now that we have that I'm going


to reload the page and there we go we have the dimensionality but it's still like very flat very plain that's because mesh basic material does not respond to light so it's just going to give you that solid color back we're not setting a color but it's defaulting to that like gray uh but if we say mesh standard material this will respond to light and guess what there are no lights in our scene so cool we can go ahead and add one just inside this group I'm going to say Point light and I'm going to say position is going


to be uh 1 comma 1 comma 1 and we are uh we we have our camera at pretty much the same position so when we save that we see that it it it it looks like um kind of like when you have your flash on uh with a camera right so it's just like the light is coming from us and we can change the intensity and make that like five that's going to be very bright in that spot and this we can keep doing this we can keep adding Point lights and stuff and we're going to get like you know some mixed results to go like -2 and we'll you know


we'll have it it'll look better but you know it's a pain in the butt to get right and I think at the end of the day it it rarely looks realistic unless you're really good with it uh I like to use what a lot of game developers and movies and CG um artists use which is called an hdri um which use is kind of like a a picture of a room in order to uh provide the the the lights for our scene so we're going to go ahead and use something from uh react 3 fiber dry which is a bunch of helpers I'm going to


say environment and here we are going to use one of the presets and we can uh hit control space and see that ah we got a few presets to work with and we can kind of play with those and we save this there we go we have you know like okay so not super re realistic right now but we can see like okay there's more interesting lighting happening than what what we had before and you can go through the presets and change those as you want and the light will be you see how that's a bit of a warmer light um yeah so what's happening


here let's say background that will show us actually the scene that we are working with and if in here I'm going to say uh orbit controls this is a great helper from react 3 dry that we will actually be using something similar to this in the Builder later but now you can click and look around and you see like okay that's the scene that um we are lighting this cube with you see how like it's brighter on this side uh it's because that's where the sun's coming from right so a really great way to get


realistic lighting and shadows and everything well yeah I guess Shadows but uh for our scene so we're going to keep orbit controls in there but we're going to change preset and Sunset and all that stuff we're going to gut the en M and say files and that is going to be quotes SL HDR and then let's actually open up that folder because this is a local folder um HDR we have several here uh we have Warehouse 256 512 and just the full version uh the smaller it is the quicker it's going to load and the uh less


intense it's going to be so if you're doing something from far back using a uh 256 HDR like a small one is probably the the way to go and I already forgot the name of it Warehouse 256 HDR cool so let's go uh Warehouse 256 HDR if we save that cool we we have our lighting it's kind of subtle right now but when we get our skateboard in there it'll be good and got rid of our background and so now we actually need to bring our skateboard in and the way that that works is we have uh this skateboard. bin and the skateboard.


gltf right here and I'm going to right click and say reveal in finder show me where this uh is and what the gltf file does I'll actually open it here uh what the gltf file does is it is just one big Json um object essentially that goes through and lists all of these different things so like uh these are all the different nodes that uh are assigned to like the wheel one wheel 2 and the deck and the trucks and the grip tapes like all these different parts you can see grip tape is its own node and wheel one is its own


node and this just basically tells uh our file or or sorry our computer where to go find the um like the vertices and like the the actual geometry for these different parts so this doesn't have all that much information in it this just points to the information that's in the bin file but we need them both uh one is kind of like a a a map for the other right so we want to go to our resources because we need to take that gltf file and convert it into a react 3 F A react 3 fiber file and luckily uh the great


Folks at panders I think that's how you say then then yeah panders um they have created a really easy converter so if you go ahead and grab skateboard bin and skateboard gtf at the same time you you you can't like drop them one after another make sure you're grabbing them both and I think I feel it grabbing it grab them both and drop them in boom we see our skateboard and it is not textured that there's no materials on it and that's intentional and then we also see the uh the jsx the actual react component uh that we're


getting out of it and all it does is uh well first let's going to the settings and and that'll help so we have some great settings here that are really helpful we don't have to our own types it'll take care of types for us that is oh it's wonderful um and then we're also going to keep Nam so we know what we're looking at we'll keep groups and that's about it there and then we we can uh copy the clipboard I'm going to go ahead and do that but um first let's just see like we have mesh name grip tape right


that's handy to have the name there that's why I put it back um and it then points to the geometry for that and actually puts it into the right position for us so this is a great uh tool this would be a in the butt for us to do on our own you see how like handling the rotations and all that stuff I don't want to do that I love this Tool uh definitely definitely use this don't don't try to do this by yourself unless you have to for some reason I don't know but I'm going to copy that to clipboard


and we're going to go back to our uh interactive skateboard and I want to create in our components folder because we're going to use this skateboard in a couple of different places where the interactive skateboard like scene is only going to be in the hero but let's go into components create a new file called skateboard. TSX and we don't need to do our TS RFC shortcut because we are pasting in what we autogenerated and so we just have a couple of things to tweak like here we have uh this props that it's


trying to give us we actually don't want that I'm actually going to create some or or a new type up here so type I'm going to say skateboard props it's going to be equal to just an open object and we can put past that here so skateboard props and now it's happy and now let's go back and actually put it into our scene so uh in the interactive skateboard component we're going to say skateboard and did I not oh hold on one sec there is a thing you always need to do I always forget um the default it


just calls it model and so when I try to go to autocomplete here uh vs code is not going to find a skateboard but if I type model see how it finds it in component skateboard so make sure we rename this to you'll never guess skateboard and now we can go ahead and say skateboard and it'll import from the right place it's a self- closing uh component and now if we go to our scene we see our skateboard in like a chunk of ice um it's right inside that that square sorry the cube that's not a square you got learn your geometry in like


third grade right uh so now we can get rid of the mesh CU that was just kind of to render out something simply and show you that um every mesh needs a material and a geometry all right so we're going to remove that that Cube and uh there we go we have our skateboard now we're going to go in just a sec and uh add some textures and everything to this skateboard but before we do I want to uh use another little helper from the dry D REI uh Library this one is called Contact Shadows right there and that if


we just save it is going to give us a simulated Shadow uh but that looks awful right so we need to go ahead and say opacity is equal to uh 6 that's looking a little bit better and we're going to be moving this skateboard in a little bit so let's let's let's set the position for this contact Shadow we need move it down slightly so we'll say position I'm not sure we're not getting uh um autocomplete for this but that's going to be an array we're going to say zero uh comma .08 very small uh movement down on on


the Y AIS which is the up and down vertical axis and then zero so that's all we're doing is just moving it down slightly because we're going to be moving this in a little bit and now with that said let's get into our skateboard Let's uh start to add materials here because right now uh it says that it has a material but I I exported this without any material so it's just kind of a standin and as you can see we're not using any of the materials that we're importing from it and yeah let's let's get into creating those materials


because we have all the geometry in the right place and just real quick I I want to show you that um we're using this use gf. preload at the bottom that will help uh with our performance so that it it will preload that file um and then we use this hook to pull it in and we pull the nodes off of it which once again is is like the geometry and the materials and everything and that's coming mainly from the bin file but the gltf points towards that and now we can do pretty much whatever we want with these objects


like for the wheels we will be spinning these in individually um and right now we're going to be swapping out these materials for something better So eventually this will have uh a bunch of props because it's going to need to take in uh textures for the wheels and for the deck and colors for the truck and colors for the bolts and whether or not the wheel is spinning and all kinds of stuff but right now let's just build it out in here cuz uh handling the textures by themselves is work enough right uh


but the one thing that will not be changing that we can uh work on and kind of have finished now is the actual grip tape the Sandpaper stuff on top so if we go in here just make a bit of space between the return and your constant nodes we need to pull in a couple of textures so we say const grip tape diffuse and the diffuse is really just the color of the actual object and then we can do other things to it to change the way that it it appears like if it's rough or bumpy or whatever um so the diffuse is going to be use texture now


this is a helper that has to be called within a canvas element and luckily skateboard is right here and that's inside scene and scene is inside a canvas element so this will not throw an error but if you call if if if I to call the used texture hook uh here outside of a canvas I would get yelled at and you don't want to get yelled at so we're going to say use texture and pass this a string of for/ skateboard SL grip tape hyphen diffuse web p and we also need a very similar one so go ahead and copy that over and


this is called roughness instead of diffuse r u g n s and same for the diffuse here roughness great let me show you these two files real quick grip tape diffuse so this is the actual like color that we want to show on the skateboard and then grip tape roughness this is what's called a bump map and each uh like each shade here is information for how much the material at that point should be like raised or put down so uh White basically means all right that's all the way up and black means all the way down


a middle gray is like somewhere in in the middle we'll see uh the effect of this in in a bit but this is more information for how light should affect this material where this is just the color of like the the base of it so once we have those we're going to say const grip tape material is equal to use memo and this is the first time that we are using memo in our project make sure that's imported from react get rid of react because we're inside an xjs project and and now the reason we're using use


memo is that without it the grip tape material here would be recreated every time the component renders what we're about to do is create a new material we want to do that once and not do it over and over again uh because that would be really uh expensive for our performance so use memo and we're going to pass it in Arrow function and in here we're going to say const material equals new and all caps three and we have imported that already because of uh it came with it right like as as you pasted this in mesh standard


material remember the standard material takes or it responds to light and that's the one we want um and then in here map is going to be grip tape diffuse and the map is uh if you think about it like in CSS you can have a background image that's a map we we can also set color and and we're going to um and that's more like background color all right so map is uh our our image our texture back there and then we don't want to bump map and this is going to be our grip tape roughness and then we also want a


roughness map and this is getting a little bit confusing I'll I'll break it down roughness map and that is going to be grip tape roughness as well we're using the same one and then I need a comma here and then bump scale we're going to say 3.5 roughness it's going to be8 and color I I for that we were using it in in like 5 seconds 1 2 3 1 2 3 so I'm I have six fives here so 555 55 five and now the roughness map here oh and uh hold on use use memo needs an array at the end of dependency so here we're


going to pass grip tape diffuse and grip tape roughness and now I use my most happy uh so here the bump map is as I said like is it up or down um what what does this look like when it gets hit by light and then the roughness map is basically how shiny is it and so the overall roughness is set here but this is the same way where white is going to be very rough I I believe and and and then the the the black is going to be like not rough at all so uh we we can also combine maps and just the actual roughness property


there and now what we can do is we can return material all right and if we save this we can grab our grip tape material and I'm going to move this over and right here at the top you should have grip tape and here material we going to get rid of nodes. grip tape. material and paste our own in and then we save it uh that is totally normal that is just because we are making such a big change it's going hold on what like it just kind of it'll break uh but that's not going to happen when we actually are


like swapping in our Builder don't worry uh and yeah not great right but we see the idea we see what's happening so down in like the recesses you see how like um like in in in The Valleys it's shiny and then up top it's not shiny right uh and that is because of that roughness map if we were to remove that roughness map let's see did that I might have to refresh um but you see how like it loses kind of like all of its interesting parts right so because the roughness is now very rough and it's not shiny in any


places so we want to bring back that grip tape roughness I'm going to reload my page but what we need to do here the reason it looks so terrible is because we are putting this one uh texture across this entire board so we need to repeat it and we do that by editing a couple properties that are are on this uh three. texture object so first we want to check and make sure that we actually have the object if we didn't create this we don't want to throw any errors so I'll say if grip tape diffuse and then we're going to say grip


tape diffuse do Wrap s and if we look at that that is how the texture is wrapped horizontally and corresponds to the U in UV mapping right so wrap s we're going to say we want this to be a repeat so say three. repeat wrapping and we're going to copy that line because we just need to do the same thing for wrap T I know the S and the T might not make any sense uh but that is is what they are and then uh grip tape diffuse do repeat. set now here's where we say how many times we want it to repeat on each of the axes on S and T


and we're going to set it to 99 now I just saved it and nothing seems to have happened but it actually I think it did um actually I think we we we need to do one more thing let's go ahead and say grip tape uh diffuse do needs update equals true and there we go so that just tells the renderer hey uh stuff has changed here please in your next pass uh update this right so if we zoom in we see that the diffuse has changed that that that's the the little colors and so like we have all the uh small grains of


sandpaper but the big ones haven't changed and that's because we haven't changed the texture of the roughness at all so give a little space copy everything over and change diffuse in the second part to roughness hit save and boom look at this that is looking so much better right much more like a skateboard top now the only thing I really don't like is as we get to like this like side angle it loses a lot of detail there right like a a lot of textures kind of like clumps together we we still get some here um


like there's still some texture here but everything here is just like smooth and that just that doesn't look right we need to uh change a setting called anisotropy an anisotropy I don't know let's say grip tape uh roughness do anisotropy doesn't give me a a uh a way to say it but um yeah this basically talks about or I should say that it controls the sharpness or the blurriness of textures when you're at these like glancing angles right like if if you're looking kind of from headon or 45 it's not a problem but uh setting a higher


anistropy uh anistropy let's go with it um will make this better so if we change this to eight so go ahead and set that to eight we immediately see a lot more detail there um so that's looking really good and it actually touched on something important um it's actually a it's it's usually a power of two so it's always better if you do it that way but yeah you've added your first material to our skateboard so that definitely uh is caused for celebration and let's get the rest of this whole thing fleshed out


next up let's jump to a simple one and just handle the bolts so the screws and the bolts there um so I'm going to go underneath the grip tape and I'm going to say const bolt material equals use memo and we're going to uh open that up and do an arrow function but I'm not going to use parentheses or anything I'm going to do an implicit return of a new 3. mesh standard material and we're going to pass that our config object and this is going to say color is going to be uh let's say bolt color and we can go


ahead and set that as a variable up here so const bolt color is equal to quote and let's do the same color again I think there we go so that color looking good we also want to uh set a property called metalness so metalness is going to be 0.5 and roughness is going to be3 the lower this roughness value the shinier and smoother it is the higher the the less it like does anything um and then the metalness so like you can play with that and see uh the different effects and use memos reminding us hey


uh I need that array please and so we're going to pass it bolt color because that's all we use in here now if we copy this bolt material we want to go down and I'm scrolling a little fast did I pass it no cool uh go to our bolt and paste in this nodes. bolts. material and just want to see if there's anything else that needs it nope our base plates are getting something else so if we save it it should Oh I thought it was going to break the whole thing but it didn't it just did the parts that we wanted so


that's looking pretty good you can zoom in and check it out as you like but that is doing exactly what we intended it to so now that we have the bolt color and the bolt material uh let's go ahead and copy both of these and let's take care of our uh trucks so we're going to create a truck material and it's going to select all the bolts and say truck but the truck actually needs something in addition to uh just this so like we can go ahead and save that and you know yeah let's actually apply this and then we can see


the difference um of our next step so come down to let's see wheel bolts wheel base plates so grab the base plates and then the truck one and then truck two so you should have applied truck mat material to three things base plates truck one truck two and when you save it there you go whole thing broke but we can reload and nice so we're seeing that we are getting uh like a metal-ish kind of material but in fact I want this to be even more metal where is it uh so I'm going to say metalness is going to go up to8 and the


roughness I'm going to bring it down a little bit to uh 0.25 shouldn't change it too much but you see it just gives it yeah bit more of like a chrome kind of feel to it um but now we need to bring in what makes it like bumpy uh and that is called a normal map so if we look at the texture we're going to be using so normal uh if you open the metal normal. AI this is going to be the normal map we're applying here and this is information on the way that light hits our object very similar to the the


black and white bump map but because it's using using several colors it can give more detailed um information where the bump map is just like uh a up and down kind of value this can say all right this actually like shifts a bit to the right and it it's just a bit more accurate and it's kind of like the the gold standard but we we we didn't need this for um something as simple as this so um we actually have normal map online this will kind of show like that concept if it loads so you see how uh that is


like example of a a bump map this is the normal map and you see how like the different colors kind of show how the the the light should interact with it and then here is an example of applying that to a cube now why do we use normal Maps because we get to save on polygons where this is just a cube but it has a lot of detail and that's a lot cheaper for us to render a normal map and figure out like the the way the light's going to hit that then it would be to create geometry with all of that stuff


especially here because these are little little details that we we don't want to have actual polygons for but we want the light to interact with it and for that to be rendered well so that's how a normal map is going to be used or that's how it works and that's how we are going to use it uh so let's go ahead and start using it so I'm going to say const metal normal equals use texture again and we're going to import that from SL skateboard slm metal normal. aif that's metal hyphen normal. aif and what we need to do here is also


um wrap it we we did that yeah so same sort of thing but what we are going to do is a slightly slightly different values right so metal normal dop s we're going to set this actually to a thousand to have it uh repeat a bunch and then we're going to do the same thing for WP T and then our metal normal. anisotropy is going to be eight so that we have uh a good look from pretty much every angle and then we want to have the metal normal metal normal uh repeat. set I'm going to say 8 comma 8 and if we save that


um I don't think we're using metal normal yet we're we're editing it but we haven't added it to our truck so if we come here and right after color we'll say normal map and set that to metal normal and normal scale set that to new 3. Vector 2 and we're going to pass that 3 comma 3 and this Vector 2 is just an object that holds uh an X and Y value and there's also Vector 3es which also hold a zv value and this is um what 3GS you know likes and it's also a very common Concept in working with 3D and any kind


of like blender CG stuff so we're going to hit save there and we see that yeah it's looking pretty good so that that uh is telling the light how to reflect off of it right so it's looking pretty darn cool looking pretty legit oh and just super quick um I forgot that I had done the thousand and then the uh 3. repeat wrapping go ahead and grab three. repeat wrapping and uh page that in for the Thousand if you look at three. repeat wrapping it is a th right um but it's just better to have something like this rather than actually


like hardcoded numbers and if we look at what it what it says oh bring it back uh the texture will simply repeat into Infinity right we just want it to repeat forever so that's what that does cool so we are done with the trucks we are done with the bolts we are done with the grip tape now we want to do the deck and the wheels are the two remaining ones so let's scroll underneath our truck material and you know I'm going to grab my truck material here and we're just going to bring it down and I'm going to


just change this to deck uh with no color no normal map and we want the roughness and that's just GNA be drop down to 0.1 it's a very shiny board but we need a map for this so we have have a local file here say const deck texture equals use texture parentheses quotes slash skateboard I believe it's skateboard let see deck that web page yeah public skateboard cool so capital D well first skateboard and then capital deck. webp and we can pass this deck texture in here as a dependency and we'll say


map it's going to be deck texture let we save that uh oh we're not using the deck material yet so now grab that and find deck paste that in and let's see if reloading it does it it does so we have this nice like blank uh deck that like needs to be painted on right uh there's there is an issue with this but we will uh it's it's not obvious is here so we'll point it out and we'll fix it once we do the wheels and we're doing that right now so uh go ahead and copy the deck texture and we're going to instead


say wheel for all of this um like that but that is not the file here so let's see skate wheel 1.png I didn't name this great but it'll it'll work for us just getting set up so skate wheel one PNG and we need to put this wheel material on all of our Wheels um I'm going to do something tricky so nodes wheel one that's not going to work I was going to try to grab everything but the geometry would stop us all right just going to go ahead and paste it in wheel two paste it in wheel four and there's just one more and you can tell like the


the order um we can move these around like we could shift the wheels together I just don't care enough to like like it's it's not going to matter all that much so feel free to um because moving this around doesn't change anything because it's really the position and the rotation and all that stuff that matters um when we do that that's not broken because I just moved that that's the uh error we expected um and yeah so the wheels are messed up or at least the texture is uh what's going on cuz it


seems like it's looking good but look if you look closely you'll see that it says Suburbia but it says it like reverse like mirrored and that's a hint so if you see something like that you're going what what the heck is going on I thought it it looked so good in blender what's going on well when you go from blender to 3js sometimes the texture needs to be flipped on the Y AIS you can also flip your UV in blender and you know kind of like preempt that but it can be kind of a pain in the butt so uh we want to go


ahead and say wheel texture uh. flip y equals false so please don't do that please don't flip it and then if we reload there we go and it's go okay fine I'll I'll leave it the way it was um that is way too shiny for the skate wheel though we want a roughness of three at 35 so that's better so it's a little bit shiny but not like super super shiny Like It's Made It Glass you know um great and we need to do the same thing to the deck like I said you can't really tell right now because it's just this like wood but if it had some words


on it it would be all messy so find your deck texture right here and we're going to say uh deck sorry deck texture. flipy equals false and that won't change too much at all like do you notice the difference I don't but you will later but look we have this entire thing looking great like we have all of our textures on there we we used a couple new things like bump maps and normal Maps roughness metal like we we hit a bunch of uh little concepts for our materials here and that's just looking really


slick all right next what we want to do is actually bring in uh all of these textures except for the grip tape from prismic so let's go ahead and head to our our slices and we're going to go into hero and we're going to add a couple things here we need to add two images and two colors so first we'll do the skateboard deck texture just like that and we'll hit done then we're going to add another image for skateboard uh wheel texture and now let's add a color field which I rarely use use but in this case


it actually is uh kind of appropriate um and here we're just going to call this skateboard truck color and another one skateboard bolt color and if we go ahead and review these changes push that up then in our uh prismic page builder we going to refresh that and there we go we have this here and let's choose your favorite skateboard deck texture um make sure you choose one of these with the wood on the sides cuz that's for the um the like side of the board uh I'm going to go ahead and choose the green and


blue one here I make a slightly different one than the one we have on the homepage choose that and this skateboard wheel texture going of go with lime as well and for the color I'm actually going to grab one of the colors that we're using here see color pick color grab this and I'll show it to you in just a sec you don't have to use this uh in in the regular one I'm using 555555 uh but here we're going to use 34495 copy that again use that for both the bolt and the truck collar save that and publish it


and now we shouldn't see any change here I'm just going to re reload the page that um yeah shows no change but uh we now can access that in our hero be index it's going to open this up and we should have uh some new things on this slice so we go const deck texture URL is equal to we're going to use that as in image SRC function from before say as image oh that's not what I wanted what did I import something there yeah as imgsrc from prison client there we go and we're going to say slice. primary.


skateboard deck texture just like that but we have an issue what if this doesn't exist we still want to have a fallback right well that's where the local textures come in handy so up here above of the props right here let's set a couple of constants we're going to say const say default we uh deck texture and that'll be equal to SL skateboard slash deck. webp webp um let's go ahead and make one for the wheels too so say wheel oh wait not not texture I changed the wrong word default wheel texture and this is going to be uh


skate wheel one and that's a PNG and let's make some default colors too say const default uh truck default truck color equals and we'll say uh 6f6 e 6A just the default that we have I don't remember how I got that but it's it's a good one um and don't worry too much about these these should never be seen but it's really good practice to have a fallback so now we're going to say or default deck texture and we're going to do essentially the same thing for the wheel so go ahead and do wheel I just need to make it caps


over here um and then we want to have a truck color on a bolt color equals so we would need to pull that again so slice. primary. color see uh that's the truck color or default truck color and last const bolt color equals slice. primary. skateboard bolt color or uh if I can type it or default um bolt color did I okay truck truck truck bolt bolt bolt okay pH got them all that is handled now and now we want to pass that into our interactive skateboard scene so let's go ahead and say deck texture URL


equals deck texture URL wheel texture URL equals wheel texture URL truck color equals truck color and bolt color equals bolt color and we're going to yell it at here because it's like yeah this doesn't that that doesn't exist there I don't know what you're talking about uh I'm going to copy all of this and go over to interactive skateboard and we're going to put this into the props uh I'm just going to go ahead and say this is going to be a string and going to copy that several times and now we're expecting four


strings and that's what we are receiving so go ahead and destructure that deck texture URL wheel texture URL truck color and bolt color now normally we could just call for this stuff in here but remember we attached it to our slice so we do have to pass it in as props otherwise like fetching it we could fetch the document again and get that slice and everything but this just makes a lot more sense and so now unfortunately we do have to pass it one more time or kind of two so in your scene here uh if you still have it now I


have the string let's go to here copy this because we're P pasting the exact same thing in and it's going to say that you know it doesn't it's not expecting that we are going to use the exact same props and I'm going to copy uh essentially this whole thing here from that bracket all the way to props and we're going to go to our seen I zoomed or I scrolled way too fast and now everyone's happy we just aren't using this here yet and we have one more step of Plumbing I know this is a lot uh but stick with me we're almost there and uh


this will make a little bit more sense when we're using it in the Builder as well because right now what we're going to do is we're going to say wheel texture URLs equals curly braces square bracket for an array we're going to say wheel texture URL because we want our skateboard to take an array of wheel textures that's what we're going to be passing it when we are using the the uh the customizer but here we only want it to show that one texture that that we chose so we just pass it on an array and


it's going to take the first one and run with it uh then and then we're going to do something you might not expect and but I'm kind of guarantee you won't expect it so we're going to say wheel texture URL and we're going to pass it the wheel texture URL why are we doing that I'll explain in just a moment let's just uh get this all typed out first so next we need to say deck texture URL oh and this need to be a lowercase s so change that URL capitals and then lowercase s same thing we're going to


have an array that just has deck texture URL in it and you can go ahead and copy that remove the S and remove the array here and we're doing the same thing twice I'll explain then we want truck color this one's straightforward we don't need two of them and same with bolt color equals bolt and we want one more thing uh that says constant CS T N T wheel spin just like that it's going to be a Boolean property now once again our skateboard is not happy with us it's saying I don't I don't want any of this please you know like tell me if


I'm getting that and that's what we'll do uh I copied all of these and we're going to our last stop we're going into the skateboard and I will explain why we grabbed an array and the individual texture all at the same time there um but first let just paste these in uh let's get rid of this and that's going to be a string or sorry an array of strings so string and then uh braces after I'm going to copy this and paste that for the URLs as well and then here I'm going to say string and yeah basically these are all


strings except for the constant wheel spin that's a string that's a string that's a string and this is going to be an optional Boolean like that now it's much happier and we want to uh actually destructure this stuff here so instead of just props let's have curly braces and open that up and once again we want to pull in pretty much everything so wheel texture URL wheel texture URLs uh deck texture URL deck texture URLs truck color uh bolt color and what else uh so it's it's saying like hey you already defined that


so that's okay let's see what else we have available oh and constant wheel spin cool uh but now we can get rid of the truck color and bolt color down here so if we uh get rid of that and get rid of that we should already see a difference the rest isn't being used yet um but let's go ahead and save that first and just see if uh is not defined ah we can pull that off of our group that just is a default thing that the gltf converter does and if we save that I don't see any other errors in here so here we go you see that we have a bluish


um truck color now so that is working that's getting passed in from prismic hopefully whatever color you chose is uh also showing up on your trucks and bolts and the rest we we haven't done anything with yet but now it's time for me to explain why we are doing this silly looking thing of wheel texture URLs and wheel texture URL so wheel texture URLs we are going to be calling all of these and and fetching them all as the page loads um and that's going to matter in the Builder not so much here CU we we


only have the one texture but we don't want um you know there to be like a a pop or like a white flash or anything which is what we would get if we load it as the the user changes uh things where we just want it to be a smooth thing right so like that's clearly already in uh the browser's cache right like it's it's already there we want it to be instantaneous so we have to pass it all of the URLs to fetch and all of these images to fetch uh ahead of time and then we also need to tell it which one


should I be showing right now um and this this fetch has to happen within the element uh so that it has access to it when it goes to use that texture well not that one but um yeah like this so now that we have all of that set up let's go ahead and fetch all our our wheel textures using the Ed texture hook and then um get the index for the specific one that that we are using by matching this to uh that array so let's come down right underneath our nodes here and we can say uh or con wheel textures equals use texture parentheses


wheel texture URLs all right so now we have an array of textures because uh used texture can take this uh it can either take a single thing or it can take an array and it returns an array of 3js textures so the first thing we want to do here is say wheel textures. 4 each and this is going to take an arrow function that has texture and here going to open this up and we're going to do a couple things with our texture first we're going to say texture. flip y equals false right we know why we're doing that


and we also want to do something else we going to say texture. colorspace equals 3. srgb color space now I'm not an expert on color spaces um but and and yeah it doesn't even really explain this or it does here so um this is all about color data and really how like uh the computer should interpret like what this red looks like when you're displaying it for me I just kind of think about it like um with different monitors things appear different and it's the same kind of thing of like um the they have these


different color spaces and some are like more realistic and some um work better I don't know this looks so much better just set set this for these textures and uh you'll be glad you did and later if you're like what was he talking about comment this out and you'll see uh the colors are much more muted they're they're they feel faded without this now we want to get our wheel texture index for like where is our selected texture inside this array so we'll say const wheel texture index I need type that better TX Ur


index is equal to wheel texture URLs doind Index this is an array method that we can use to get this index and we're going to pass it a function that gets URL and it's an arrow function and this is going to return true if URL is equal to wheel texture URL so it will give us the index at where this URL is in this array great now we want to use that index to get our wheel texture so const wheel texture it's equal to wheel textures there it is and then uh square brackets and we're going to paste in


that wheel texture index few so now at the end of that uh we oh and it's it's yelling at me because it goes hey dude we we already have a wheel texture going to go down and find that and just get rid of this that was for us setting up and now we have this wheel texture and it is a 3js texture see how with with typescript it like we we only had to type it actually we we didn't type it because it it got created but then it follows it through all this stuff and it says yeah that's a 3js texture really


handy and it makes sure we're not making mistakes so let's go back to our project and check it out I've got my wheels here the ones I picked in prismic and it's working great awesome the uh it's flipped on the y- axis and everything like it's just it's it's exactly what we looking for perfect now let's do the same thing with deck textures the best part is uh I think all of this pretty much Maps over so I'm going to grab all of this down to wheel texture this whole part and going to I I'll even make a comment here so uh


wheel textures and I'll say deck oh if I know how to make comments deck textures I'm going to paste that in and just wheel and then command d a few times until I get all of them and say deck and that's looking good but it's saying hey you already have deck texture right same problem go ahead uh nuke that and you can also get rid of deck texture. flip Y where where was my um yeah we can also get rid of this one it's redundant it's it's it's not going to flip it back it'll still say say set to false but we don't need it anymore


because we took care of that and now check it out we've got our Suburbia skateboard right there it's coming through beautifully all right we've got our textures rolling and now the cool thing is yeah this feels like Overkill when we're just passing in one texture but we are set up perfectly for the Builder later so we're we're not going to have to change much in here I want the skateboard uh component to be as versatile as possible so we can use it in lots of different places and not have to pull in um all this mesh stuff over


and over again and have repeated code throughout our project so that's why we we went a little overboard now so that we're set up well for later now the only prop that we are not using right now is this constant wheel spin so first off we're going to go ahead and give this a default of false because you know typically you just don't want it to be constantly spinning all the time but yeah this is going to do exactly what we would uh expect the name to to do uh it's going to make these wheels spin just like it's


doing here right that's the effect that we want how do we animate these wheels like that well it's react and we want to manipulate an element so we need to access it and we're going to use a ref for that I want to put that at the very top of this component so I'm going to say const wheel refs and we're going to put an S there because we're going to put all four of our wheels on this one ref I'll show you how we do that use ref import that from react if it's I I think we already have it yeah it came as a


default if you didn't remove it you should still have it there uh use ref we're going to type this as a three doob 3D array and then we're going to give it a default or sorry not a default a initial value of just an empty array and then underneath like all of our texture stuff right let's say right here um let's just say add wheel refs and what we're going to do is we're going to create a for a function since a formula uh const add to wheel refs and it's equal an arrow function and this is going to get a ref


and you'll see why and that ref is going to point to a three object 3D or null just as a you know fall back to make sure that we're not throwing errors just in case something goes wrong we're going to say if parentheses ref and and exclamation mark wheel refs do Curren do includes ref and I'll explain this in just a sec then we want to say wheel refs current. push ref just like that so if we are getting a ref when uh this function is called if if if we get that and the uh wheel refs that current array


of 3D objects uh does not yet include this then we we we want to add it right so this is us just saying hey if it's not on the array already let's put it on on that array so that we will get uh our four wheels on this this array now uh we need to handle that so come on down to wheel one and we'll say ref is equal to add two wheel refs and what that's going to do is that's going to call this function and pass in the ref and this will take care of the rest go ahead and grab that add that to wheel two and


wheel four I don't know why it's in the wrong order I'm just going to I'm going to move mine you don't have to but you know some things just worth the extra extra second uh but yeah they should all have add to wheel refs on them and now for this skateboard we want two types of spins uh we want the kind that is just constant rate spinning at the same rate uh the entire time and then we also want this little spin effect that slows down every time we change the wheel so to handle both of those we are going to


come in here and for the first one we're going to handle the constant wheel spin so we'll say use frame and this is a react 3 fiber hook and this gets an arrow function and we'll say if we have to check first to say uh if exclamation mark wheel refs current or exclamation mark constant wheel spin then we return so we if if there's no wheel refs or if uh this is set to fall false then we don't do this but if those are both true then we want to rotate the wheels forever so four const sorry for parentheses const


wheel of wheel refs current do a little for Loop over our Wheels we want to say wheel. rotation dox plus equal point2 so we are affecting the rotation property on each each wheel as as we Loop through them on every frame so 60 times a second optimally right um and we are rotating it on the x axis and so if we save that do we see this nice we see it working and if you want to see why we're doing the x-axis uh go ahead and change that to Y it's a cool effect you you can't say it's not cool uh and then Z I mean if


this is how you want to make your skateboard brand by all means uh but for accuracy s and and and and now because it's grabbing it just as it was now it's going to be broken right so like it's catching it at a different angle but if you reset it it'll it'll fix so now that's just constantly going and that's what we want but we also want to handle that other um use case so we'll say use effect and pass that an arrow function and in here we'll check I'm going to do a going to grab this and paste this in


we Al we we still want to check if wheel ref. current exists but we want to do the opposite so if uh so yeah we we want constant wheel spin to be false for this one so we'll say four const actually are we copying the same thing yeah we can go ahead and grab this too it's pretty much the same thing um but we're going to be uh just kind of stubbing this out right now and just saying uh Gap rotation because we want to um handle that that little uh slow down so like see how it kind of slows down uh there instead of


like the the the constant speed is easy to do just with 3js by itself but for that one I want to use Gap and I don't want to just rush into Gap just yet but I do want to stub this out and then here we need to pass this a dependency array uh that just has constant wheel spin on it and this use effect I don't think I imported it there we go update import from react and that's good so remember like a second ago when I said we're not getting into Gap right now now we're getting into Gap so it is time it is everyone's Favorite


Time honestly uh everyone in the comments always says more Gap we love Gap we want more Gap courses and here we are so in our resources we have an animation uh bullet and going to go ahead and open up all of these and uh this right here is gap's Wonder ful intro and I will take you through it Gap is a JavaScript based animation platform that allows us to animate seriously anything we can uh from from divs to svgs to images to 3js elements like we can make that wheel spin with gap um and so yeah let's go through this tutorial


like intro so all you have to do here is call Gap and then you get to choose between sever uh methods you tell it what to Target and here we're going to be targeting this uh box element and that's a class so a uh an like any element with class box and then we tell it what to do and it just moved over by 200 and we'll see it again there it is and that X200 as it says here is like transform translate x 200 pixels I'm make my screen bigger so I have to zoom like that all right so and it breaks this down so here's our


method here's our Target and here's our variable and we can animate lots of different properties by passing them in here uh and there are four types of twins we we use two of them primarily uh so we have gsap 2 and this is basically wherever the item is so like wherever the box is I want to move it to this thing right so I I want to move it to there uh from says uh yes so like it's it's like a backwards two so if this were gep from with the same values it would start on the right and then move to its uh


default position so like where wherever the Box should be in the Dom it it'll it'll finish there um and it ends at the element's current state and then from two allows us to pass two of these objects and so we could say where it wants to start and or like where we want it to start and where we want it to end um and then set is like an immediate two so it's just like hey uh move it IM immediately to 200 no animation don't do anything Fancy with it uh so here we go we can uh I'll toggle this so two there


we go it ends at x40 and it has a fill of Blue from means you're going to start blue and then finish red see x-40 and it started at Blue and went over from two has us defining both so we passed an object first and then a second object and then set is just boom as as soon as that JavaScript runs it it applies those uh styles to the element this just touches on that uh you can do all kinds of um CSS selectors and everything you can pass it an actual variable so like box and that's what we're going to be doing we're going to


be passing it some refs uh to animate uh for our wheels and then the variables object like I said you can have a lot of different properties that you want to animate and you also add things in here like the duration does it repeat are we doing a yo-yo effect is there any kind of a delay and guess we can animate almost anything and that's enough there for now um I have a simple demo here that you can go ahead and play with and all I want to show you right now because a lot of this is um stuff that we've


just seen in the uh GP example there so like there we we have a from two capacity zero right so this is stuff that we just saw but the one I do want to uncomment and show you is this run timeline function so inside this run timeline function we create a timeline with gap. timeline and then we set some defaults on it so we're so if we say repeat negative 1 that means it'll repeat forever and we have a 3 second repeat delay so every time it ends it'll count to three and then it repeats so it's not going to repeat automatically


um but you see we have uh this timeline and we can chain these uh methods on there and these will happen one after another after another so it's a really nice way to uh animate sequence so if we see we have a square that gets a background color and that'll delay by just a little bit and then we're going to move that square and then we're going to rotate that square and that'll take two seconds to be a slower rotation uh then we have a circle and that's going to scale down just a little bit and then it's going to move on the Y


AIS and it and it's going to move down and we're giving it a special ease and the eases are really fun um and that duration is going to have a well it's going to be 1.5 seconds let's go ahead now that we kind of see what we're going to get let's watch it in action wait for it there we go changes color spins shrinks drops there it is wait for the delay three 2 one and it repeats so timelines are really really useful and uh it's just one of the many powerful things with gap and for us uh these tricks are going to be done using


timelines and I'll show you how we do that um but you know I I have to animate like the rotation and then the position everything and I want to happen at specific times so we're going to be using timelines in this skateboard so let's add that bit of Gap to our scene here I'm going to move this to the side this going to be our first animation it's going to be a small gap. two just a single tween and we're going to say Gap and import that from Gap say 2 parentheses wheel. rotation and then we need to open up


that object so we are targeting oh I need to put a comma here we're targeting the specific uh I guess object on Wheel uh we we don't just pass wheel here because we need to dig in a little bit so we need to get to the rotation of that wheel and here we're going to say x is going to be quotes plus equals 30 so wherever it is we want to add um 30 units I forget if it's radians or degrees but um we we want to just you know spin it more uh we don't want to turn to a specific like degree because then it can uh look kind of funny so say


duration is 2.5 and ease is going to be cir out now I've opened up the eases here and let me uh make this full screen uh this is one of the most fun parts of Gap or just like the most powerful I don't know you can get a lot of really cool um feels for your stuff uh if you change the ease like you can go from it being very professional to very playful and the Circ is just it just felt the most natural of like the wheel slowly losing Steam and just kind of dying down so that's why we're using the


Circ uh one so Circ out if we save that what we can do is we can kind of reverse uh these really quick and see how this works so I'm going to uncomment that or sorry I'm I'm going to remove the exclamation mark there add it there and if we save I'm going to refresh and there we go now it's going the wrong direction so it's actually do minus 30 and save that I'm going to refresh and there we go cool that's exactly what we want and and so now uh we also need to add here the wheel texture URL I think I removed that


before uh the reason we need that here is because I want this to spin every time uh this changes so if that changes we want this to trigger so that's that's that's why we have that so congratulations you have your first uh gep animation in your project so for now we can close our skateboard and any other stuff we have open uh CU we need to work in this interactive skateboard this needs uh a lot because we're going to be doing some pretty fancy tricks and to pull these off uh we need to not not get hacky but we we need to add quite a


few elements to this uh actually before we go uh skateboard let's turn those values back where were they here we go uh exclamation mark there and remove it from there there we go we want our Wheels spinning now for animating uh it's usually a good idea to not animate this mesh directly because this will sometimes have its own positioning set like um yeah can get a little hairy so like I said before we're going to be using groups to help us with animations and help us just like kind of like Target that instead of the skateboard


and we're also going to use nested groups and you'll see why so group we're going to put one around this skateboard move that down and then inside this group we need to create a ra so say ra equals and we'll just call this one container ref like that and let's go and make that ref um inside our scene it's way too much uh so con container ref is equal to use ref and that's going to be a three. group nope not 3 FM is that not in here okay um so we need to come up to the top and say import Star or asterisk as three from


three like that and that just Imports everything user reference not the okay uh I was getting to that one too so update import from react that's looking better we don't want to do less than three uh three. group and then the default is going to be null or the starting value will be null and if we save that looking good not sure what that flash was May it's been something and now I want to animate this um container ref if skateboard is clicked on right we'll handle the specific positions of like front back


and middle later but instead of giving skateboard like an onclick uh Handler we're actually going to add a mesh and have that handle the click so we say mesh and inside here we can say Bo box geometry and close that and here we'll say mesh standard material and close that now we get this box let's start to change it a little bit first off I want to change the position of the mesh when you're doing uh position or rotation or on click or anything like that um you add that to the mesh so we do position


and this takes an array of 0 comma. 27 and zero just like that and we're going to give it a name and that's just going to be middle we will make this the middle uh of the board later but for now uh we're going to go and add something to our box geometry we'll pass it args AR args equals it's a fun word uh and this going to get uh 6.1 and 2.2 just like that if we save that we see that it stretching out to cover the entirety of the board and uh the cool thing is when we want to hide it we're going to say


visible is false and then it just goes away but it's still there so I'll put this to true for now so that we can edit it later but yeah now we want to actually add an onclick Handler so right here I'm going to say function on click and this is going to be an event and what kind of event it's be a three event from react 3 fiber types help and specifically a mouse event like that and then we need to open this up and inside here the first thing we want to do is we want to stop the mouse from clicking through things so by


that I mean if if if I were to click this box right here um 3js is going to say okay he clicked this box and he clicked the grip tape underneath and he clicked the board underneath it just drills through all of the things if I click right here it'll say I clicked the wheel and the bolt because it like shoots through it um what we need to do is stop that from happening by saying event. stop propagation it's you know similar to how we handle events in in uh regular JavaScript with uh web elements but just


because of the way that sometimes um if you kind of like catch both boxes you don't want it to do both tricks at the same time it'll it'll mess it up so we St the propagation now we want to say const board is equal to container ref. current that's good and we want to make sure that there is a board so say if no board then return and for later we're going to pull the name off of it so const name in curly braces because we're D structuring event doob uh that's the middle name that we pulled off it and and we're not going to


use that yet but it'll come in handy to to determine which trick we do and starting out we're going to start with the simplest one that kind of lays the foundation for the other two and that is the Ali so we are going to have two Gap timelines here so I'm going to say gap. timeline parenthesis and now I get to chain my uh methods to that so I can say period to and I'm going to start that on the next line so it's a lot easier to read and I'm going to say board. position and comma I'm going to pass an


object and in here we're going to say Y is going to be 08 so I wanted to go up on the y- AIS and then we want it to have a duration and I've worked these numbers out pretty specifically so that the rotations and the positions all kind of work together uh we're going to go 0.51 now it's like a why so specific it is just I had to like fine-tune um this and just kind of tweak the the numbers a bunch there there's no like math to it it's just kind of like that looks best and now we're going to have an ease of


power two. out and if you look at the easings that looks power two out it's that so the reason we're doing that is because we we we wanted to jump up quick and then kind of hang in the air before gravity pulls it back down and here we go so EAS is power two out and we want a delay of first delay of0 26 and we'll understand the delay in just a moment and then after that make sure you don't have a semicolon here because we want to chain again say two parenthesis once again board. position and yes we we


have to unfortunately animate the position and the rotation separately even if you want to do them at the same time uh there's just a way with gsap right now that they uh that we we kind of have to do it because we need to get this object we can't get that separate object off a board at the same time um but we open this object and we're going to say y zero so we want to bring it back down to earth and we say duration is 43 and ease it's going to be the reverse I'll just copy this actually the reverse


will say power to in so it goes up and it comes down right and so let's just see how this works Let's see we have our onclick just add the onclick to this mesh so onclick is equal to onclick just like that now let's see does this work it doesn't what do we what's our error gp's not defin that's a good error that's a see I don't know why sometimes it doesn't catch that gsap isn't defined like why I don't know it it happens just for gsap I don't know why import Gap from Gap there we go let's try it a second


time here we go had a little bit uh of a delay and you'll see why in just a moment but goes up it comes down it looks very you know not real but this is what we're looking for and the the like gravity hang feels pretty good now we need to rotate it at the same time so we're just going to put a gap timeline let's see where's our last thing so right here and I'm going to to say I'm going to grab this part gap. timeline do that again and we'll say do2 parentheses it'll be board rotation sorry that uh autocomplete


keeps popping up and then we need an object to pass it and this is going to be X so we're rotating the x-axis by .6 and it's going to have a duration of 26 and ease oop sorry ease is going to be quotes none and you'll see that like we actually get help with types here so that's really nice none and if we just want to play that and see how this goes let's see so I'm going to click so it it it doesn't come back but if we re reload real quick you'll see it rotates back and it's trying to hit the ground um but it doesn't work great


right not yet but don't don't worry we we will adjust I'm going to reload um I just want to show you like what what we have so far and that's why the delay is there on the other thing because the way a skateboard has to move is that like it has to the the way you get air is by the tail hitting the ground and then the kinetic energy that comes from that pops the board into the air so you see the first thing that happens is the board you know the back of it slams into the ground and then that's what launches it so that's why we don't


touch the position yet we we first rotate all right now we uh have another you know what we can copy this two more times so just like that and so for the second value X is a positive point4 and the duration is 82 it's a longer duration and then for The Last One X is just zero we want to return it to where it was and that is a quick fix cuz it's like Landing um and that is just .12 and this one has an ease the other two are none so it's just a linear um ease so like it's not that it doesn't you know it it still animates um but


here's here's nun see how it just goes at a constant rate the whole time that's that's what nun does uh where everything else changes the rate of Animation so that's that's the difference now um yeah we need to give the middle one a power 2. in and now if we it's looking better right but what's what's the problem here well it's going through the like fake floor right so the first thing it's doing is it is um rotating from the wrong axis and if we rotate it you'll see what I mean where where does it need to rotate from it


needs to rotate from right here but it's rotating from like the center and so that's always going to mess it up we we we need to Pivot right from like uh I guess like the bottom of the wheel right and so for that we honestly have to do some uh group trickery or or some strategic stuff here so we're going to kind of Nest uh groups within groups here so inside the container ref go ahead and create a new group and it'll make sense once we have it there and that group can just um go all the way down


to here so we can you know we we want to move our uh onclick Handler box with it so this group's in here and we're going to move this group and we're going to move it by uh the same amount that we're going to move the the parent group you'll say so position is going to be an array of0 comma 0.0 86 it's very small but we're we're we're having to to move down to get at that axis uh and then we want to move shift over by 635 and now what we're going to do is we're going to grab that same position and we are going to


shift this back especially by this value but negative so we're going to shift it back it's it's a little strange but trust me on this uh and then this is actually going to be zero because we brought it down to exactly where we need it and the first value needs to change to .25 and so we shifted everything forward or I guess to the left with this group and then the parent group shifts it back right into position and the amount that we shifted by the 635 is the distance from the center of the board to that


axle and so when when we pushed everything forward the center became uh that axle and then we we moved the parent group all the way back to the right so that um our board is still in the middle but now its axis it's it's like Center pivot point is right here so when we click boom that's exactly what we're looking for so it gets a little hacky a little bit weird because we can't do what we do in CSS of like saying exactly where we want the transform origin to be we have to do stuff like this where we move uh nested


groups around but now the effect is really nice so I'm going to reload and just like that we already have our Ali set and ready to go so what we can do here is actually pull out this gap. timeline 2 thing because this is going to be consistent across all three tricks they all are going to take the board the same amount in the air and come down at the same rate and everything so we can cut that and we're going to create a fun down here that just says or rather it's called jump board and it's going to take a board and


that is going to be a three. group and in here we're just going to paste our gsap timeline and that should work just fine and now that we cut that out we're going to paste jump board pass it to board and if we save and reload just to make sure we're working with new stuff there we go it still works just great and we don't have to repeat um the same Gap timelines across all three tricks but now for uh like the cleanliness of our code we actually want to uh take the Ali out so this is the you know the


entirety of the code for the ali uh which is that it's that trick that's called the Ali in case I didn't mention uh we're going to take that out and make that into its own function as well so we'll say function o i e and that takes a board and that is a three. group and in here we're going to paste what we had jump Board gets the board so this is everything we need to do to perform an Ali and then here we can say if name is equal to uh back then perform an Ali with the board and So currently that's going to


effectively uh break our animation because this is passing the name middle so yep not not going to do anything let's go ahead and create a couple more um of these onclick handlers first off let's bring this one back down to size we want the middle to just have a uh z um value of 1.2 so it takes up the middle part there so I'm going to copy this whole mesh and I'm going to paste it above to handle the uh the the front we want to put the middle element in the middle I'll say front is the name the


position is going to be 0 0.27 and 0.9 so only the Z value changes and for the Box geometry we need a slightly different value for the uh y it's going to be at0 2 it needs to be a little thicker to handle the fact that this ramps up it's not as flat and then this Z value is going to be 58 if we save that you see how we have like a chunkier element for that part of it and that still won't do any tricks because that's the front but now if we grab the front one and we put it underneath the middle and we call this


back and our position is going to be just the opposite of this we'll say negative .9 if we save that we see that in the back there and if we click boom we got our Ali back and now what we can do is we can uh change these visibles to false and we can go ahead and keep making our tricks and only the back one well they all work but only the back one kicks into a uh an animation our next trick is going to be a kick flip and that is going to have us rotate the board on another axis as it goes up so it's an oi combined with


rotating the board around like that so we just need another animation so first let's uh find our if name equals back and then else if name equals uh triple equals middle then we want to perform a kick flip and we'll pass it the board and now we need to Define our kick flip I'll do it uh after the Ali let's do it in here I'll push jump board down and we'll say function kick flip I'm actually going to just copy copy this part should we just copy all the yeah let's copy the Ali entirely and let's see how much we can


uh utilize that so we have Ali but we're change it the kick flip we are taking a board we want to jump the board that's perfect and yes this first rotation to uh you know smack the board down on the ground that is going to stay as is this next rotation where with the Ali it it it goes back and then it kind of evens out it comes forward a bit you see how it comes forward like that so we're keeping that as well we don't have to change any values there but at the same time that that's happening we need to rotate the


board on this axis we need to have it spin around this way so to do that we are going to squeeze a DOT two in here and we're going to pass it board. rotation and then we are going to pass it an object and this is going to instead of rotating the x- axis we're going to rotate on Z so Z and we're going to use back ticks here and say plus equals dollar sign and here we're going to say math. Pi * 2 and what this does is this gives us a 360° rotation um from wherever it currently is and we're going to have that duration


take is uh 78 and with no ease because it should just yeah you get it and if we play it now if we save now right we can hit save the middle should give us a kick flip let's see what happens I'm going to move around and zoom out a little bit so we can see not great right I mean if you can do this trick I think you get like a thousand points in Tony Hawk Pro Skater but um not what we're looking for we need that rotation to happen a bit sooner but we're using this timeline which says you know this happens and


then this happens and then this happens and then so how do we get this to happen a little bit earlier but still be dependent on these values where that's where a uh a a a parameter called the position parameter comes in so after our object we can use the position parameter and here I just pulled up the docs on it and you just pass it a value here and this says to insert exactly 3 seconds from the start of the timeline so if we just give it give it a number it will start that amount of time after the


beginning of the timeline we can also use some labels we're not going to do that you can have it start at the same time as the previous animation so if we wanted to start this with this at the same time we could use the less than sign um and you can pass it all kinds of strings here like plus equals 1 all these it's a very very very powerful um parameter and we are going to use it just in a small way we're going to say here right after our object we're going to say three so this will start 3 seconds if sorry 3 seconds into uh the


beginning of our animation so if we go back and I reload there it is let's see how this works now so oh that's the Ali I I clicked the wrong thing I'm like what here go kick flip there we go so it's happening not right away but3 into our uh animation so it's looking pretty good we've got two tricks down we need one more now the last one is a bit more complicated I will admit um the reason is uh check the rotation here and see if you can figure out what is tough here did you catch it I know it's it's


tough uh let me me zoom out a little bit are you seeing what the problem might be so think back to the Ali we have it rotating on this axis here because we've set the origin of that group to right there on that axis so we can do that that little animation but this this has to rotate from the center again and we can't move the axis back like that so how are we going to rotate this board by the center um when it it's it's also rotating back here you see like it's still doing that same first move so what we need to do is add


another group and it gets a little hairy but uh this is going to be I believe the last one so come down uh under your environment and above your container ref we're going to say group and we have a ref that we're going to call origin ref we need to create that first I'm going to wrap everything in that group just like that uh not the contact Shadows though we don't want to toss those into the air um but this group has a problem because we origin ref does not exist come on up here copy container ref and just say origin


and we should be good is that all happy now yes save it structures it okay now we have another ACC to rotate around so if we go into our where's our on click here's our on click uh we need to grab the origin so const origin equals origin ref. current we need to add that to our check if no board or no origin then get out of here cuz we we need both of those now and here we'll say else if name is equal to front then we need to do a was it front side 360 so uh let's call that function 360 and we need to pass this a board and


the origin all right and we have Ali we have kickflip let's do our function uh we should be able to get away with copying at least some of the kick flip let's find out so copy the kick flip bring it down here this is a front side 360 we have a board and we have an origin that is also a three. group and we still just need to pass the board to jump board we don't need to pass anything more than that and yes we do keep this first two the same as well as this second two for the rotation and then here is where it's actually going


to change a little bit uh so we we're still going to do uh a rotation but not on board we do it on the origin and instead of the Z axis we want to do it on the Y because the Y goes like straight through like a kebab there on the board and so we will rotate it that way or let's move it so it'll spin this way because like looking right down is is the y- axis whoop I clicked it uh cool so we want the Y to go around so that we can keep that value and the duration I I have it changed just to 77 I don't know if that's just uh typo or


whatever but yeah and then the duration here is up to 0.14 I'm just going to put it there maybe I I tweaked it a little I don't know how much of a difference it's going to make but that's all we need to do to get our front side 360 working so let's see if it is pretty cool and let's see like where is that rotating uh from yeah see let's actually go like right above it is this the back yeah it's actually working like for like there I think yeah it's still pretty good uh we could always shift it a little bit but I


wouldn't um because our future animations are uh assuming that it's in this position so congratulations we've got three pretty sick tricks and uh now you know how to um chain them together so any tricks that you want to do you could absolutely do like if you want it you know like you you could add more uh spots here and we'll we'll add the hot spots in in a moment you can have one where like you know it it like does a grind or something I don't know you can figure it out but uh this is pretty great to begin with so now that we have


the board doing tricks which is pretty sick uh we want to encourage people to click it because they might just look at this and go all right cool skateboard uh but not know that they should be clicking on it and playing with it so we want to make uh what we're calling hot spots which a little clicking area so inside your hero go ahead and make a new hot spot. TSX and in here I'm want to say tsrf C we're just making this from scratch delete the default and it's going to be a pretty simple uh component


so we're actually going to say interface here interface Hotpot props and in here we don't need need the equals and we're going to say position and that's going to be a an array of number number number and that XYZ semicolon then is visible it's going be a Boolean and we need that to determine once they've clicked it we want to hide it and color is going to be optional uh optional and a string and then in here we want to change that from props to hotspot props and we're going to uh destructure position uh is visible


and color and for color we want to have a default of hash e6f C6 a all right and inside here we need to use a ref so we're going to say const hot spot uh oh no hot spot ref equals use ref and we're going to type that as a three dot NOP 3. mesh and we need to import three so at the very top here I'm going to get rid of the react but keep the used ref and we'll say import Star which means everything as three from three and now we have our hotspot ref it's going to be uh typed as a three mesh we need to give it a default of


null and also call it now what we're going to do is we need to create um some circles and we want them to kind of like expand right I'm going to close all our Gap stuff for now and then um we're actually going to pull open the dry docs and here I want to go to billboard so if we check this billboard it adds a group that always faces the camera and that's what we want we want uh to create some circles that are always looking right at the camera and so here we're going to return R the div let's say


billboard and react 3 dry it's exactly right and so we're going to say in here say position it's going to be position that we're passing in and we're going to say follow is equal to true so we have to follow the camera and you have a couple of properties here that uh you know we're we're going to keep the defaults there so inside there we want have two meshes and the first mesh is going to be the one that gets the ref ref equals uh Hot Spot ref and visible is equal to visible sorry is visible and we need to close that and


inside we're going to say Circle geometry now note that there is a sphere geometry this is going to be a 2d thing um and because we don't want any light to hit it we just want it to be feeling like a UI and not like part of the the the 3D scene so Circle geometry I'm going say args it's equal to 02 and 32 so 32 uh is how many points around the circle there are to make it smooth uh and point 2 is the actual like radius or uh diameter it's it's the size of that Circle right and we're going to close that and we're going to say mesh


standard material color equals color and transparent and opacity is going to be one now you might be wondering why we're using a standard material we're going to use a basic material in a second but we can't get transparency with a basic material and you'll see why that uh is important in just a moment but for now let's copy this mesh and going to go down a little bit and here we want to get rid of the ref but we want to keep the visible is visible on there and for our Circle geometry we're actually going to just make it a


little bit bigger uh at 003 and here we're going to use a mesh basic material so that it doesn't respond to light it just keeps its solid color and we're going to keep the color there but this doesn't get a transparent or an opacity um and the visibility handle by the is visible property and for this we actually want to handle um if you look and we might not have any hot spots right now but it's subtle but you see how I have I have the cursor pointer there and it goes off when I'm not there so it


kind of encourages that click so what we're going to do is we're going to say uh on pointer over where is it there we go on pointer over we're going to pass it an arrow function and we'll say document do body. style. cursor equals quote pointer and go ahead and copy this whole thing and then on pointer out we're going to say uh default and so that's what sets it on its way out and do we have everything here that we need at least for now yeah we're going to animate this in just a second but let's go ahead and add this


to our interactive skateboard scene so right above the front mesh we're going to say hotspot import that from hotspot and we can close that but pass in a couple props first we'll say is visible and this is going to be changed with a little bit of logic but right now we'll just say true we can see it uh position is going to be curly braces and then an array zero comma 38 comma 1 and we have a color is uh hash bhf c39 if we save that there we go there is our front little hot spot we see that our little cursor thing works and if we


click there you know it it does the thing it it makes the trick go but the thing is we want to make it so that it disappears once we've clicked there we don't need to don't want that to hang around just need to be there to encourage that first click and and once that's been clicked uh we still want to keep the other ones right we don't want to get rid of all of them so we're going to use a little bit of State here so let's come up to our use refs and instead we'll say const show hotspot comma set show


Hotpot and we're going to say use State make sure you import that from react and then here our default is going to be an object with three things on it so front is true middle is true and back is true and so that is going to be how it starts and we'll check to see uh do you know like is is that value sorry are are we showing the front one based on that so for is visible instead of just true we're going to say show hotspot do front Okay and right now we're not doing anything to hide that so it's still


going to stick around even with the animation uh so let's go up and right after we get the name here it is so after this we want to say set show hotspot and we're going to get an arrow function and that's going to get the current value so that object as it is right now current with an arrow function and it's going to implicitly return an object to to set the value back right and so we we we we want to spread current so whatever the other values are right now we're going to say current and then after that we want to


um change the one that we are currently working with so say name and then we're going to say false if it's already false that's fine that will just stay the same but um this will set it so that as we click on this it disappears and it's just not there anymore because we did this set show hotspot all right let's add two more hotspots uh let's go right here and for this one we need a different color and a different position so our color whoops clicked uh our color is going to be ff7 A51 and our position is is going to be


zero on the Z so I'm going out of order uh and that's going to be uh 33 so 033 and then zero let's see if that works oh and hot spot is going to be middle there we go I'm going to reload so we can see both of them uh there we go don't don't worry about the camera angle right now we will be fixing that and down here for the back go ahead and change this to back and we need the uh position to be 35 and then negative n like that and so we have the three dots but for the color we want that one to be


46 acfa all right we got that nice blue so there's our three hot spots let's check to make sure that they work so if I click back there that works gets rid of it that gets rid of it and gets rid of it nice now you might have noticed uh it looks weird with the hot spots like there when it's doing tricks in the air I don't like that either so we want to be able to tell when we're animating oh and here's another issue that we have uh right now if I click and then click and then click and then click and then click


and then click and then click oops right we don't want to do a trick while we're doing a trick while we're doing a trick um we want to make it so that it we we lock out if we are animating so let's use a little bit more State up here so right after or actually before we go const animating and then set animating man typing is getting rough uh equals use State and it's just going to be false and now what we can do is we can check here so if board or or like if if we don't have a board or An Origin or if


we are animated so if that's true we don't want to take another step right but as soon as we do start to animate we want to um make sure we set that to true so the first thing we're going to do in Jump board which gets called by all of the functions is we're going to say set animating to true and then we need to then set it to false once it's done and so to do that just in one place we can actually uh hook into a function here where we say on complete and we pass this an arrow function and that's just going to say set animating


false so when our jump board finishes it's going to call that function and set it back to false let's reload the page see how that looks oh uh first we need to before we go any further hotspot is visible needs to be not animating and show hotspot front so go ahead and copy those or copy that into your other two hotspots and now we'll see I'll zoom out a little bit and you'll see that when we do the Ali the dots everywhere will disappear and they come back when we land really nice and I can't do the the


tons of clicking I'm clicking all over the place but it's not doing anything so it is working perfectly we've got our animations working really well and we've kind of like safeguarded ourselves from getting this into a messed up state next we want to make sure that our camera is set up well and that's in the right position because right now we can use these orbit controls and move all around but that's not what we want we want it to be centered on the skateboard and uh not movable right so we first


need to get rid of these orbit controls right in our uh scene component go ahead and delete that and if I reload cool it's back and I just can't move it it's not in the position we want but that's a good start go all the way to the top and right above our props here we're going to create a const and all caps initial camera position uh with underscores like that and we're just going to basically grab the camera position that we have here grab that and we are just going to set that as a constant at the top


because we're going to use that in a couple places we'll say as const just to type that and now we want to use it so instead of this we're going to say initial camera position like that now down in our scene component we want access to that camera so we're going to use a hook that react 3 fiber provides we're going to say const we're going to destructure camera and we're going to call the use three hook and this has to be called within the canvas I'm going to import this from react 3 fiber and we are


inside the canvas so it works out and now we're going to use that camera uh object inside a use effect so use effect and we're going to pass that an arrow function and inside here we're going to say camera. lookat we want this you look at function to tell uh the camera where to aim position tells the camera where to physically be in the scene but the look at is going to tell it where to aim so we're going to say new 3. Vector 3 that one and you're going to a.2 comma .15 comma 0 so that is the location we want the camera to look at


if we go ahead and save that we already see a little bit of a change so it's already uh yeah it it shifted just a little bit because it's it's looking in a New Direction but now the thing is uh while the spot that it's looking at is good the actual position of the camera should change based on whether or not we're on desktop or mobile so for instance if we go here we want our uh camera to kind of move back you see how it's zoomed out a lot more and then as we widen it we can zoom in a bit on that


skateboard so that it's it's bigger so that works really nicely and we are doing that with a little function so under here we're going to call uh call function set zoom and that's not going to take any arguments but it's going to say const scale equals math. Max parentheses math. Min parentheses 1,00,000 divided by window. Inner width and then the second value is going to be 2.2 and then outside of that first set of uh parentheses we're going to say one so if we make this larger so we're going to multiply this scale times our


position values and this value is always going to be between 2 . 2 and one and this code right here ensures that if the window is wide the scale is going to get smaller and if the window is narrow the scale gets larger so here we're going to say camera. positionx equals initial camera position and then we're going to use brackets and say zero with that first number and times scale going to update our camera position based on the scale and our initial position let's go ahead and copy that twice and we're going to


change the Z to A one 0 to a two going make this Y and of course Z all right now we want to call this function as soon as the component loads in so we'll say set Zoom right here in our use effect but we also want to call it whenever the window resizes that's how I was making it work earlier so I'll say window. add event listener and we'll pass it a string of resize and then we'll pass it the set zoom function like that and now at the bottom here we're going to say return and pass it an arrow function that uh returns


window. remove event listener going to pass it resize and set Zoom like that so that will clean that up and last we want to pass it the dependency of camera and there we go let's move this back over and let's check ours and it is looking good let's see if it is responsive there it is very nice so that's what we are expecting now is the time to bring in the little uh swirly curvy lines the wavy lines underneath the skateboard that kind of show that it's going along a path and so what we're going to be


doing is we're going to be putting a plane down that is just on that exact Dimension and we're actually going to be putting an SVG over time top of that so this is an animated SVG using the same trick that we used um down here to draw that um line in so we're doing the same thing uh just over several lines and we can actually use svgs within 3js with a little caveat with a trick where we're not actually using it but what we are doing is we are tying HTML content to any object in the scene and then we can


project the object's whereabouts automatically so we're actually projecting a div onto where this plane is in our scene so for example in this demo here this is actually a website that uh is like real and working within this 3D laptop but it's just projecting that div and using CSS transforms to make it match perfectly so like it works really well it feels like this is actually like within the laptop but it's just over top so we're going to be using that same trick and using this HTML element that dry gives us and so in our


Suburbia resources we're going to go ahead and grab wavy paths just like this copy that and put that in the hero folder so here say wavy paths TSX paste that in hit save and we will get a little uh error at the top here that says I don't know what GP react is so copy that we're going to install that now go to your terminal hit npmi and either paste that in or just type at gsap react let that install and what this provides is a use Gap hook that the fine folks at gsap have created and basically it is a drop in for use effect when


you're just doing Gap based stuff we haven't had a use for this just yet but in this component it is uh it's it's called for so basically it automatically cleans up the GP context and it just makes things a lot easier so with that installed let's go ahead to our interactive skateboard. TSX and let's head down to the bottom of our component and right below the contact Shadows here go ahead and create a new group and inside that group let's import the HTML um element from dry not from next document but from dry like that and


let's just go ahead and close that inside let's put wavy paths import that from slash and we shouldn't really see anything I'm actually curious what will happen oh there there we go never mind so we do see it working we see it coming in from the outside right okay cool one thing we are seeing though is that the uh lines are pretty perfect and what we want to do is we actually have a clsx command here and we come in at the end of it this makes sense later but we're going to come in and add a second string and type animate squiggle


and if we save that we should there we go now it's a little bit ripply uh hopefully you can see that um it'll make sense later why we're doing it as a separate string because uh Safari doesn't play nice with this stuff so we'll have to go through and check the um like each element and and make sure we're not in Safari and if we are we don't want to run this otherwise the pant won't show up at all but we'll get to that in a little bit now if we just wanted this element to act as like part of our UI and you know face the camera


no matter what uh and and and not really treat the camera as like a 3D object but just uh it's kind of like a a HUD in video games right um we could we could leave it like this but we actually want to transform it and make it part of our scene so if we go to transform if I can type and save that we'll see now it kind of comes in right in the front here and so we we're able to move it but it's not really sure where it should be so we have this group here that's wrapping around it so let's move that group in


order to manipulate where our wavy paths actually go so we're going to uh affect the rotation position and scale first rotation say rotation equals curly braces and then an array say negative math. Pi / 2 comma 0o for the Y and then uh for the Z we'll say negative math. Pi / 2 for the position we're going to say we're going to have another array I'll say zero .09 and then .5 and that's just positioning it you might recognize this Nega 0.9 that's where the contact Shadow is uh well close it's yeah it's it's a little bit


underneath that which makes sense and then our scale is going to be uh 22.2 so we're scaling it down to that and there we go so now we see those paths are going the direction we expect but you probably notice uh yeah it's going right on top of the skateboard what's uh what's up with that right so we need to affect the zindex here because once again this is actually a a div that is being um projected and transformed on top of our scene so it's not actually part of the scene the the way that this wheel and the truck and


the board is like all actually part of the scene this is kind of Faking it as part of the scene so what we need to is we need to change the zindex range so we'll say zindex range this is on our HTML is equal to and we need to pass it an array of 1 comma 0 and that's just basically saying we want it to be between uh 1 and Z let's see if uh oh and then we need to uh change the occlusion here let me see in the HTML um olude yes so here so uh HTML can hide behind geometry as if it was part of the 3D scene using this mode it can be


enabled by using blending as the olude prop so let's go ahead and do that going to say uh olude equals blending we save that now there we go see it even gets darker thanks to the contact Shadow so now it Blends in with the rest of the scene and we're going to do one more thing we're going to say wrapper class and we're going to say pointer events none and that's just using a Tailwind class putting that on the so that um we can click through that div otherwise you wouldn't be able to do the tricks anymore so that is important


there and that's really all it took to get our wavy pths going um if you look at the paths they are just um some vertical wavy lines and we are just doing the same stroke Dash offset trick as before but we're doing it with a with a smaller Dash so that there's a tiny Dash and a big gap between each Dash and that's why you get one little line and then you don't see another line on that in that same spot for a little while so that's it we got our wavy panss in there all right we just have two more things


to do on this hero and the actual page itself then we can get into the customizer one we need to move the skateboard back and forth like it does in the final version and two we want to check for Safari like I said and uh and make sure that something shows up for Safari uh so let's go ahead and write a above our first use effect let's make another use effect so use effect and that's going to take an arrow function and here we're going to make two Gap twns that animate both the container and the origin ref one is


going to rotate the board a little bit I'll show you on Final copy um the board a little bit it's it's subtle but like we want it to kind of like lean back and forth as it would if it were actually like moving right if if if it were real and then the other one is going to move the entire board back and forth so we're going to rotate on one and change the position on the other so let's go ahead and first check to make sure our container ref and origin ref are there so we're going to check and see if they


are not there we're just going to return so if parentheses exclamation mark container ref. current or exclamation mark origin ref do current then return so now we know that we have both of those so I'll say gap. 2 container ref there we go and we're going to say do current position and pass down an object with X at Point 2 duration it's going to be 3 seconds repeat will be Nega 1 yo-yo is true and ease is going to be sign. in out and now we can go ahead and save that see how that looks and now that's moving it


back and forth you see how like it just is obviously sliding like that so that's why we also want to change the rotation and that has to come from the origin one because that's the one in the center that we're using for is it this one yeah that's what will rotate it around the center so if we go ahead and say gap. 2 parenthesis origin ref current. rotation and pass this an object with Y math. pi divided by 64 so very slight rotation very very small rotation but it's it's there uh duration three and we can actually grab uh the


rest of here so go ahead and just grab duration three repeat negative 1 yoyo true sign in out and then at the end of this we want to have an empty array because there's nothing here that it's actually de depending on for changing so that's pretty fun let's see there we go that's better and will the trick mess it up no okay good it seemed to mess it up earlier but now it is working again so that is our skateboard kind of moving back and forth as it swirls along and that's looking great all right now let's


make sure that this works in Safari at least to some degree we don't need uh the exact thing to work perfectly uh we just want to make sure that the logo in the background shows up that the paths show up even if we can't do this same jittery effect uh perfectly across all of the browsers so what we're going to do is we're going to go and grab our uh lib sluse is Safari hook that we have right here copy that and we're going to create a new folder called lib it didn't work there we go lib and then we're going to create a new file in


there called would use is safari. TS not TSX because it's not a uh jsx file it's just going to be typescript so basically what this does is this just goes ahead and checks if the user agent includes Safari and to see that it's not Chrome and that's Chrome or chromium uh and then it will return if it's Safari or not right it's going to be a Boolean so with this saved we need to use this in our wavy paths our wide logo and our tall logo I think they might all be inside the hero let me see app slices here go slices


hero and we've got tall logo W wavy paths and wide logo so I'm going to go ahead in here let's do wide logo first so inside here we actually want to turn this into a use client because we need to use this hook and we can only use this hook if it is a client component so I'll say import use is Safari from at lib uses Safari that's perfect and then here we're just going to say const is Safari equals use is Safari and we're going to give that a default of true just to play it safe because then it it


will definitely work um everywhere and all we're going to do right here is just say is Safari question mark and we're going to say undefined that's what we will return and if that is false we will return our animate squiggle and we're going to do the exact same thing over in our tall logo so I'm going to go ahead and copy that line over going to remove the class name here paste that in going to import uh no it's not helping me import it so go ahead and just copy the import paste that in and say use client and then copy over


the Declaration of is Safari and that should be good so make your tall logo look like the wide logo and last we're going to head to our wavy path it's already a client component because we're using Gap inside it now I'll copy the import over copy this put it at the bottom because it's our own thing going to copy over the const is Safari and last but not least we we we can't copy the last thing because it's different here but we're basically going to do the same thing so down here where it says animate squiggle


we're going to have an exclamation mark is Safari and and animate squiggle so if it is not Safari then we animate the squiggle or we we pass that class right if you save that then we are set up well and if we check it out on Safari it does work it just doesn't have the cool animations um on the background that's fine at least it still shows up if you remove what we just put there then you would have some issues either here or in Firefox or in iOS Safari so this is going to make it so that this works in


pretty much everywhere so we are set here well done we have got an awesome site up and running and uh yeah this is looking really really slick let's get into the customizer it's going to be a really fun time now all right it is time for us to be getting into creating the customizer now there's a few things that we have to do to set this up one of those things is we need to put the um different values for all these different colors and board textures and everything into uh actual prismic so we're going to be loading all


of that in but the other thing is we also need to create a different layout setup because this page doesn't have the header and the footer that our uh actual page does so like we we don't have that and we don't have the footer here for this building customizer thing now if we look here at our layout file we have the header and the footer locked in here so if we were to build uh or or or I guess create the file of like uh SL build right we would automatically have the header and the footer built in there so


what we want to do is we want to actually create a more specific layout that is just for the homepage but we don't want to redo the rest of this document like I I shouldn't have to redeclare all of these files like I I don't want to repeat all this code so what we can do is we can use a nextjs group or I should say a route group so this route group actually won't affect the URL or or the the path that our page has it's just going to allow us to create a layout file for it so if we go ahead into our app directory here say


new folder and we're going to say parentheses with hyphen header and this name doesn't really matter uh but that's what we're going to be calling it and then inside here we're going to move our page. TSX right in there yes we'll say move and then what we want to do is we want to create a new layout file say layout. TSX and inside here we are going to make this big we're going to go ahead and Export a default function so say say tsrf C like that and I'm going to capitalize layout here it's a copy I


didn't mean to click that it's copying the lowercase L of layout but keep that lowercase change that and in here we're going to create just a fragment so just angle brackets like that and we're going to say children we actually need to uh destructure that here so we're returning our children and we're actually going to bring in header and footer here and footer these don't need any uh props pass or anything and here for our props we're going to say children and that is going to be a react. react


node like that and if we save that we can get rid of the react import we don't need that and if we look at our page it doesn't look like there's a change but you can actually see there is because that button Shadow uh it's it's actually duplicated you can really tell with the footer the footer is doubled up so that's what we expect because now the children is getting passed through two layouts so it's going through this layout second and this layout first and so it's getting header and footer here


as well so we're going to get rid of the header and footer in our layout within the app directory remove those and now we should see only one footer down down here and that allows us to create our SL build page without the header and footer but without redeclaring all of the fonts and stuff so that is our first step now before we create the actual build page let's go ahead and set up our custom types we have settings skateboard skater let's create a new one this is going to be a single type and we're going to call this


board customizer sayit create and what we'll do here is we'll really Leverage the tabs feature of uh prismic where we can rename this main one we'll call this Wheels this will make a little bit more sense when we have it all laid out and we'll create a second one called deck and a third one called Metals all right so Wheels decks and metals and inside there we want to put either a texture for the wheels and the decks and for the metals we want a color but we also want something that can um use for the URL so you see up here says


wheel equals cream and deck equals Oni mask right and these each have names to them um and we don't want to just use like the texture name that's going to be ugly it's it's not going to look good uh and so we need to also have a uid for each of these so oh didn't mean to go there right so the first thing we're going to do is create a group so that these can repeat so repeatable group and we're going to call this wheels and inside that we need an image call this texture and we also need a uid but this


is just going to be a regular string I know prismic has a uid type but we don't have that available to us with within a group um so we just going to say uid and we're going to do the same thing for decks so go ahead create a group deck that and then add a field image texture add a field text uid and last is the metals go ahead and create a repeatable group uh Metals you can say colors whatever and inside here add a field we're going to say color and add a field text uid so these should all look pretty similar uh


texture texture and color if we go ahead and review those changes we can push that up and once that's set we can go and create that doc so create a new page and here's our board customizer and now we can start adding our textures and colors so I'll do the first couple ones with you and then I will leave you to do the rest but uh select image I think we should say cream is that I yeah so if you choose wheel cream it's the first one I go with but uh even without that if you just scroll to the wheels there


you go wheel cream yellow green want make sure you know how to find them on your own we don't need alt text here and go ahead add to page and the uid is going to call it cream and you'll add the next one and you'll just choose your next wheel and go like that black and let's do some decks now you can continue on the wheels your on your own so select image and we want to scroll to these with the uh the wood texture on one side uh I'm starting out with the cooler designs uh Oni mask.png here add to page


and it's called this oi hyphen mask like that add another one and going to do the uh grid streaks one I called it yeah grid streaks and I'm going to call it just that and you can continue on adding those now for the colors we actually have over here uh I've added the metal colors here so if you want to go ahead and just copy um go the string for black and then bring it in so color black just lowercase and continue to add those um and also these are recommendations you do not have to add these colors you can


add more or less or different right like these are just the ones I went with uh so feel free to change these out but you can go ahead and add that color and say steel and so on so go ahead add the wheels add the decks and the medals and I'll see you here in a sec and I am set here so I have all my colors and I have all of my decks and I have all of my wheels and up here I going to change this to say board customizer and then I can publish I already saved it so hit publish and now we can reference that where we need it


in our board customizer so for this build page we're going to be creating four different files to handle all the different parts of it so that it's a lot easier to reason around and and to build and if we had to maintain it and add to it this would be the way to go so first we have our page. TSX that's just the whole thing it's going to be uh a classic nextjs page and that will be where we import prismic and we're going to wrap these two components that we also bring in in a context provider so that they


share some state that context provider will come from this context. TSX file and this will allow the controls to talk to the preview so that when we click on something in controls preview knows about that change State otherwise you it it if a state changes in controls preview wouldn't know about it but we're going to be keeping our state within context. TSX so when it changes here it updates here and then it gets passed down to preview so you can kind of see how this is broken out the context is


just kind of um you know this ephemeral state that will be uh managed within there so just want to give you kind of this overview and now let's get into building it back in VSS code let's go to our app directory and we're going to right click and we're going to say new folder call it build like that and we're going to create a new page. TSX in here like that and I make this big and inside here we'll do tsfc like that and I'm already going to make this an async cuz I know that we will be uh doing some fetching in here


in a little bit now I'm going to save that and let's just go ahead and see if we go to SLU we should just have page perfect so Basics but we're getting there so let's put a class on this div and we're going to say Flex Min height screen Flex call LG Flex row now on mobile we want the preview this part and the sidebar to stack vertically and on desktop we want the sidebar and preview to be side side by side like it is here now within the container let's create a div for the preview so we'll say uh period relative I'll hit Tab and


I'll continue to add to that aspect Square shrink Z BG is going to be a custom value so say # 3A 414a it's just this gray that we're using for the background then LG aspect Auto so that it's uh you know it it loses that square aspect on larger screens and LG grow so that it drops the shrink Zero part all right save that and there we go we have that part now we need our um div for the sidebar so let's go ahead and say uh. grow open that up and here I'll say BG texture BG zinc 900 text is white we say fluid P


hyphen 4/6 LG w96 LG shrink zero LG grow Z and that's it so we can go ahead and save that and we see that we have our little sidebar over there looks good next we're going to add some of the basic non-interactive content like the logo and the headings So within this first div here we're going to add the logo so open that up and we'll say link and that's going to be just from next link cuz we're just going to the homepage say href equals slash class name is absolute left 6 top six and we can close that and inside we


want to put our logo component add from at components logo class name it's going to be h12 text white and we'll self close that save that and there we go looks good and it links to our homepage cool and we're going to be adding the 3D preview canvas inside this div later but for the sidebar we need a build your board heading and an add to cart button so inside this second div down here go ahead and open that up and we're going to say heading import that from component heading say as H1 size is going to be actually SM


that's why we do the differing as and uh size properties class name is going to be mb6 mt0 and we will close that and then inside say build your board looks good and we'll go ahead and add our button link just underneath that say button link and we take an href equals just empty quotes because this isn't really like wired up but we do want it to appear so say color equals lime and icon is going to be let's see if what our options are there we go plus that's what we want and we'll say add to cart just like that and there we go we


got our little ADD to cart button we'll pull in the uh customization buttons later so as I said we're going to have the preview component that renders the 3D preview that'll go in here and then we're going to have the controls component that's going to go in here and it has all the customization controls and last we're going to have that context provider that stores the board's customizations like like its design and its colors and the preview control controls components are going to read from and write to that data in that


context so let's go ahead and actually create that context provider now so inside build we're going to say new file and we'll say context. TSX like that going to make this full screen and now this is going to be running on the client so we need to say use client and we're going to say import create context uh from react right there and then we'll say type customizer control context equals empty object we'll say const default context typed as a customizer controls controls context equals to empty object next we say const


customizer controls context controls context equal to create context there we go and we're going to pass that the default context like that right now we're leaving this empty we're going to add our data properties later but this is going to be what facilitates the data passing to and from those two components next we're going to create the context provider so we're going to say type customizer controls provider props equal to open that object say children as it optional and that's a react node and then underneath that we'll say


export function customizer controls provider and inside that we're going to destructure children and then type that as customizer controls provider props that type we just created perfect Now open up your curly braces and we'll say const value equals use memo we're importing that from react and we talked about uh earlier in the course what why we use use memo I'll say customizer we're typing this customizer controls context and then this is going to take an arrow function and we're going to say


return empty uh object for now and then that's going to have a dependency we're going to put after those parentheses of just an open array or sorry an empty array I put it in the wrong spot let me move it in here there we go empty array right there perfect and then what we want to do is we want to use this context that we just created and return a provider so we say create context we have this customizer controls context so we're going to say return parenthesis and we're going to have an object called


customizer controls context let's say period provider like that and we'll say value equals value that's coming from right here and we're going to close that object and that's going to wrap around children we save that now this component sets the boundary for which the components can interact with the data so anything inside of it all these children can access the data and we're going to put the preview and the controls components in that context provider uh within the page so we're exporting this


provider but we also want to export uh a hook that lets us read the data within other components like preview and within controls so we'll say export function use customizer controls and that will be a function that doesn't take anything say return use context and it will send back uh customizer controls context like that and so later in our project we're going to have this use customers controls and we'll be able to say like uh const selected deck equals that so kind of like how we use it with use state or whatever it's just


going to be a hook and we get to uh pull the selected deck and other things off of that so we need to store the selected wheel deck truck and bolt um information right so first let's just handle the wheel so let's go ahead up and first change this type so that it is instead selected or sorry that we add to it selected wheel and that's going to be optional and that'll be a Content we don't need to import that from prismic client there you go make sure yours came from there content. board customizer U let me just see document


data Wheels item there you go so board customizer document data Wheels item that's what you should have there and then we're going to also have set wheel and that is going to be a arrow function that takes wheel and that will be uh typed with content. board customizer Wheels item like that and that's going to return void so that just means it doesn't return anything and then inside this default context we're going to have a function say set wheel that's it's going to be just an empty Arrow function for now and then in these


provider props we want to bring in default wheel that's optional and we'll say content. board customizer Wheels item same thing again then we want to pull that into our provider because that's going to get passed in there we'll say default wheel and then just inside here we're going to use uh some Ed state so we'll say const uh square bracket selected wheel and then set wheel is equal to use State and that's going to get a default of default wheel and now we actually want to return both of these within this object here so


that's how we're going to get access to them later in our components and now the only thing we actually need to pass here it should tell us yep selected wheel we don't need to pass set wheel because that's not going to change it's a it's a function so let's just cover this real quick this Ed State hook uh is going to store the selected wheel Design This value variable contains the states value and Setter function and both of those will be available to the preview and controls components this default wheel


prop is going to determine the default wheel design selected before the customer interacts with the customizer so if they just go to like slash build then that's going to be what's there we're going to set a default wheel design as well as well as other parts in the page file in in just a little bit and now it's going to feel a little bit uh not not excessive or redundant or whatever but it's we're going to do the same thing for uh deck and truck and bolt now I'm going to do it fast here so you don't have to watch me do it so


that's set just check your work against me so we have selected deck that's going to be optional see how it follows the same pattern selected wheel selected deck selected truck and we use this same sort of pattern because that's coming from what prismic typed for us and then we also have the set truck set bolt that's going to be a function that returns void so go ahead and update yours for that and then we'll go to the next part great we're going to add more to this uh default context we have set


wheel now we have set deck set truck set bolt update yours to match and then you might guess uh for here for default wheel we need default deck default truck default bolt there you go and yes you're going to need more defaults here and we're going to need more State basically everywhere we did it with wheel we're going to want to do it with the others so I'm going to fast forward to that and there we are so we have our default wheel default deck uh coming in off of our type we have a use state for all


four and then we are returning both of these within this value and yeah and then we we have this selected ones for our dependency so yours should look like this and this is going to be what those two components use to handle their state well done now we need to make this context available to our component so we're going to do that by first importing that custom controls provider we can go ahead and delete the props that it comes with we're not this isn't taking anything in right now um so we're going to say


import custom controls Prov divider from do/ context then we're going to go right inside this top div and we're going to call that custom iser controls provider there we go and I'm going to move the second one all the way down so that this wraps everything has to wrap around our preview and our controls component and if we look at our contacts this uh customizer controls provider needs defaults for our stuff so we're already passing at children that's why it's wrapped around stuff but we need some


defaults so let's go ahead and first fetch that settings document that we created the uh custom type with all of our colors and our boards and all that stuff we'll fetch that and then we're going to pass it just the first um object off of each array uh as default for each thing so we'll say const client equals create client make sure this is from at/ prismic iio right and just going to call that next line we'll say const customizer settings equals await client. get single and we'll say board customize or


just like that and that's how we have the async so we knew we're going to wait it later and we'll say const curly braces Wheels comma decks comma Metals equals customizer settings. dat and these should be typed let's see uh yep Metals is assigned value uh yeah it's group field there you go just to check and make sure that that's correct now we'll say const default wheel equals Wheels braces uh zero so we're going to grab that first wheel what is it complaining about here ah sorry Wheels here I said just wheel decks Metals so


go ahead and do that same thing for the decks const default deck equals deck we're going to grab the first one off that and meta uh const default truck equals Metals Z and we'll say con default bolt equals Metals Z because those share the same um Source then in our provider down here we're going to open this up and I'm just going to say default wheel equals default wheel default deck equals default deck I'm just copying and pasting you can type if you'd like and default b equals default bolt and with that the


context is fully set up we don't have to touch that file anymore and it's ready to be used next we're going to create the preview component which will read the values from this context now let's add that preview layer so we're going to go into build and say new file preview. TSX inside here we can do T srfc and this needs to run JavaScript on the client so at the very top get rid of this input from react and just say use client and then inside the props here we'll say wheel texture URLs it's going to be a string of or in


in Array of strings just when I'm typing it it's always string and then the braces after and I'm going to do the same for deck texture URLs it's also going to be an array of strings great now we want to destructure those so wheel texture URLs deck texture URLs and I'm going to save it and I'm going to actually add this to our page we're going to put it before the link right inside here I'm actually going to give it another div in here say period absolute and that's also going to get an inset zero


and in here we'll say preview and import that from SL preview cool but you can see that it's not happy because it's missing a couple of things so we need to create the wheel texture URLs and the deck texture URLs so right below our default bolt we'll say const wheel texture URLs equals wheels. map and that'll take in Arrow function and inste here we'll say texture and that's going to return we're going to use as image SRC that's com from the prismic client so we returning the object the image object into um just a


string let's say texture. texture but now we want to check and make sure that we are getting a string back from that so we're going to uh chain on there a filter and this filter is going to uh have an arrow function where URL is inside the parenthesis but then we're going to type that and use typescript to help us out here so say URL is string like that we'll have an arrow and we'll say Boolean capital B Boolean parentheses URL just like that so if that returns true then we are good to go and we can do the same thing I'm


going to uh save that so it uh puts it onto three lines going to copy this and just change this to deck and deck anything else NOP the rest works so go ahead and save that now we just need to pass that to our preview so this needs a deck texture URLs say deck texture URLs this also needs wheel texture URLs wheel texture URLs save that and if we look over we should see preview right there I know that doesn't show any of our de texture URLs but we will be seeing those shortly so inside of our preview let's go back to this


inside our preview let's bring in just the basic react 3 fiber canvas so I'm going to change the div to a canvas like that and import from react 3 fiber get rid of this preview bit and instead inside here I'm going to have suspense and that is going to handle uh our loading so fallback I think for now we're just going to have null and then yep have that close itself make sure you're importing this for react and then we're just going to say preload it's from dry say all and that is oh it's fine but I'm going to self


close that so that allows us to preload all the textures and all of the 3D assets and everything in the scene um and it'll help us show our loading screen now we made that cool little uh hook that we can return all these different things with let's go ahead and use that so we'll say here const open curly braces selected wheel and I'm going to stop there and just say equals use customizer controls and that should help us type the rest of it so that we can just see what we have yep uh so selected wheel we want


selected bolt we want selected deck and selected truck that looks good I remember this is the preview so nothing actually gets set here so we're just uh showing what is selected in here we're going to import the other ones that you probably saw there uh of set bolt set de deck Etc then underneath we want to get the individual textures that are selected right now so we're going to say const wheel texture URL singular and we'll use as image source from prismic client and we're going to pass that the


selected wheel question mark mark because we're not sure if it's there texture but if that's not there we want to say default _ wheel _ texture and we're going to uh Define that up above so it's an to error for a little bit but that's fine we're going to do the same thing with the deck texture so copy and paste say deck just go ahead and change that and change that perfect and next we want to get the truck color so const truck color is equal to selected truck question mark. color and if that's not there then we're going to say


default truck color all caps last we're going to say const bolt color equals selected bolt dot uh sorry question mark .c color and if that isn't there we're going to fall back to a default _ boltor color always just want to make sure we have some kind of a default to fall back to now at the top we're going to put those defaults so come up here and say const default there we go wheel texture we'll start there and that's going to be quote slateboard SL capital S skate wheel capital W 1.png copy this


line and we'll say default TR sorry deck texture instead of skate wheel 1.png we're going to say deck. webp next line we'll say uh const default uh truck color like that and that's going to be in quotes # 6f6 e6a and we can copy that and we'll just change truck to bolt and last we have a const environment color and that's going to be uh # 3b3 a3a and that's this gray you see in the background here that we make the floor and everything else I saved so it's it's not going to like what we just did but that's fine


and I have an error here const Bol color equals there we go that's looking better and now we're going to add the skateboard component in inside the suspense component so I'll say skateboard remember we're reusing this that's why we made it the way we did and so now we get to pass it the props it needs so we'll say wheel texture URLs and we'll pass that wheel texture URLs I am there we go and wheel texture URL is going to be wheel texture URL just like that next we'll say deck texture URLs it's going to be deck texture


URLs and deck texture URL singular is going to be deck texture URL singular it's a nice one to matches up truck color will be truck color and bolt color is going to be bolt color and last uh it doesn't take this yet but it or or it might no no it doesn't yet uh but let's let's pass it and then go and change um the actual skateboard so it takes this say pose equals side and it's going to yell at us and say it doesn't exist so going to save this open our skateboard and go up to our props right up here skateboard props and at the


bottom here we're going to say pose question mark and we're going to say upright or side cuz it's upright in the hero and it's going to be on its side here and we will add some values right now to actually change the position of the skateboard depending on um that value so come down to right at the return and just above above that let's go ahead and create a new um object we'll say const positions equals use memo and that's going to take an arrow function that has an implicit return so parentheses again and that's going to


return an object and we'll say upright right so if the value is is upright here we're going to use this so we'll say upright and that's going to be an object that has both a rotation and a position because that's what we need to pass so operate is going to be an object and that's going to have rotation and that will be an array of 0 comma 0 comma 0 because this is the way it is right now this is the default and the position will also be the same so this is basically don't change a thing you're doing great skateboard stay as you are


but now for the side we need to change it so go ahead and copy upright and bring it down here we'll say side and for the rotation on this one uh we start out with zero and zero but for the Z value we're going to say math. Pi / two that turns it onto its side there and then for the position position the x value is zero the Y is 295 and then this is zero so that just is going to move it up a little bit and that's just going to rotate on its side so not too complicated there but we do need to say right


after this so so so we we we close side we close the object there and then we need to say as const to type it and then we're going to have a comma and because it's a used memo we just pass the dependencies and say there's nothing you ever need to change for never change stay the same now on the parent group here we are just going to say rotation is equal to positions and then Square braces and pose that's coming from oh wait we didn't bring in pose yet uh let's pull that in right here here there we go come back to where we


were pose do rotation and is it happy now type undefined right we need to give it a default so pose equal to Upright there we go and back down here now it's happy I'm going to copy this rotation and instead change this to position and there we go so we shouldn't see it yet U actually no we do I lied I lied right to your face uh so it's on its side if we go back we do see that it's still working here just fine so head back to our build we don't have any lights or anything so this is expected but yeah that worked so we can close out


of the skateboard we shouldn't have to touch it anymore after that now when we were building out the hero we used something called orbit controls and that allowed us to click and move all around and it's pretty similar to what we have here but uh dry actually gives us a new thing called camera controls very similar name but it allows us to do things like this where we lock in so we don't clip through the floor see how it like Zooms in it it won't let us do that and has a lot of other good benefits so


we're going to be using camera controls instead so right at the top here let's go ahead I'm going to move it to the side so at the top here go ahead and say const camera controls equals use ref import that from react we're going to going to type this as camera controls and we're going to uh just start that out with the default of null and I need to import camera controls from react 3 dry and then we add it to our scene I'll put it underneath the skateboard like that and we'll say ref is camera controls like that and we're going to


have a Min distance of . 2 and a max distance of four and that's going to stop us from zooming out too far or zooming In Too Close see how I can only go so close that's still pretty close but um I can only go out so far like like that's the Mac so that your user doesn't automatically or like accidentally get way far out or way close in so another kind of quality control aspect of it let's see didn't really change anything but it will soon oh I'm wrong it actually allows us to click and move around so


now we can do that zooming effect so very nice now in this scene for the lighting we're actually using an environment and a directional light and I'll explain in a sec first let's add these two our scene so we're going to say here uh environment from dry I'll say files equals curly braces quote SL HDR SL Warehouse 512 and we're doing the larger one because uh this like like this isn't the homepage we can afford to load a little bit longer here it's more of an experience and the environment intensity is going to be


6 and we can go ahead and self close that now we want our directional light also and yes you can combine environments and regular lights and we'll say cast Shadow and and look at remember it's it's a directional it's like a spotlight kind of thing and we'll say look at and that'll be 0 comma 0 comma 0 and position is going to be 1 comma 1 comma 1 just really basic kind of setup and then intensity is going to be uh 1.6 now if we save that there we go now we're seeing what we like that's looking good and the


reason we're using a directional light is for the cast Shadow part environments don't cast shadows in the same way and so to get this Shadow see how it's definitely coming from like that direction that's our directional light where it is getting lit from over here too not as like obviously but it is um but I I wanted to have a shadow cast and so to do that you need to actually bring in the directional light that's why we have that there there but the the majority of the lighting is happening from our environment it doesn't look


great if you go ahead and remove the environment um it just doesn't look as real when you just have like even if I up the intensity to like two it just it looks very video gamey right like like like old school kind of crappy Graphics but the environment immediately uh brings it up quite a few levels makes it feel better all right so enough talk about that that is our quick uh way to handle lights now it's just like floating in space though so let's actually create a a floor so we're going to create a new function down


here and call call it stage floor and inside here we're going to say const normal map equals use texture need that from dry and the reason we're using a uh separate function here is because I wanted to call this hook and I wouldn't be able to do that here cuz we're not inside the canvas yet so we're going to put this floor inside the canvas just to explain why we're doing this and here we're going to say SLC concrete normal. AV and that's just in our public directory uh let's find it public concrete normal yep right


there and that that that's going to work uh very similarly to how the metal normal worked on our trucks before and we need to do a couple things we need to say normal map. wrap s equals 3 dot wait have we imported three yet I don't think so we can do that in a sec repeat wrapping and before we go any further come on up here and I'm going to space this out context gets spaced out too react goes to the top just little organization and we're going to say import Star as three all caps from three like that and now it's happy very good


copy that change the wrap s to wrap t for the second one and then uh normal map. repeat. set not sure why I copied the whole thing but we can fix it uh is 30 comma 30 that's just the size that I like and normal map. ansot tropy you think I learned it by now I haven't uh equals 8 and we can save that nothing's going to change but I just wanted to format it and then underneath here we want to create that material with a normal map and a couple other things so we'll say const material equals new 3. mesh Shader sorry


sorry mesh standard material and inside there we're going to pass an object with roughness of 75 color of environment color there we go and I screwed up the roughness hold on there we go and a normal map of normal map and now with that material we can return a uh a a mesh so we want say return parenthesis mesh screwed that up try it again mesh and inside there I'm going to have a circle geometry like that and the args that we're going to pass it are going to be in an array say 20 comma 32 so the 20


has to do with the size or like the radius of it and then the 32 is the number of points that make up the circle so more points means more round fewer points means more like a a hexagon or like a triangle right if you have three points that's basically a triangle and now inside the mesh we want to say a couple things we want to uh first just give it the material this way so we'll say material equals material and I'll say cast Shadow receive Shadow that's really the important part here position is going to


be 0 comma negative 0.005 so it just goes down a little bit and zero rotation because this actually if we go ahead and save this you'll see why we need to do a rotation oh I didn't close this did I mesh what's wrong oh I didn't close the circle geometry that's what I didn't do so uh if we return stage floor or or sorry if we add it to our scenes put stage floor here like that you'll see why we need to rotate it because it's coming in uh vertically like that so down in our mesh we need to say rotation equals negative


math. Pi / 2 this is similar to how we rotated the skateboard in the first place and then 0 0 and there we go we now have it on the ground looking a lot better and you see that that's pretty much the right spot to put it Le I thought so now one thing I forgot to do up here in canvas was to say shadows and turning that on does that do anything there we go so now we have I said to reload the page now we have our shadow there so that's looking good um but I don't like this like hard Horizon it looks a little funky right like I


just I don't love that so we're going to actually use a uh 3js thing called fog and so underneath the directional light let's go ahead and say fog just lowercase f I'll say attach fog not totally sure why we do attach fog but that's what works args args it's going to be uh an array with environment color comma 3 comma 10 now this is is where it starts uh and and okay so I'll I'll show you first and then we'll talk about what what those values mean so fog is kind of what it sounds like where if you think of like in video games or even


in real life it starts to make it tough to see things in the distance and this is the Min like where it begins and then that's the max where it like cuts off so if we kind of go like from three to four um you'll see a little bit sooner a bit more dramatic there see and as you zoom out you start to lose everything right so I was like okay I can't even see the skateboard anymore um so it's it so just remember it's the fog from the camera position not from the center of the scene that's so we have it up to 10 um


and and I'm just trying to lose the detail in the floor as we go out there and kind of have it um disappear into that color but right now the background of the page is making that kind of tricky so what we want to do instead here or or not instead but in in addition to we'll say color and we'll say attach background and args it's going to just be an array but it's going to say environment color and that is it close that and with that we see that the uh yeah because we're using the environment color in two places the fog turns into


that environment color so we have this like light area going that way but as we go back that way it doesn't get as much light you see it just becomes um yeah just disappears into that and that's looking pretty good and let's add one more thing to our canvas um just add a default camera position so we'll say camera equals and we're going to return an object so we need double curly braces position it's going to be an array of 2.5 1 and zero and then we'll also say fov field of view will be 50 so if we


save that and reload our page nice so it gives us this just like Fronton uh view of our board so that's looking fantastic now the only thing is uh remember I said we don't want it to do this because that kind of like ruins the immersion if you can also just go through the floor right like that right so what we actually need to do is we need to create a plane to give to the camera controls to say hey don't go through this so underneath the stage floor let's make a little space I'm going to have a mesh Oh no just a


mesh there we go um and inside here we're going to create a plain geometry with args of an array of 6 comma 6 close that and a mesh basic material and it's going to say visible equals false and so that that creates a plane right in uh in our scene in a default spot or sorry in in at z00 do that again so that creates a plain mesh in our scene it's not too big but as big as we need it to be and we're going to say rotation equals curly braces array negative math. pi divided by two and that's because we're making a plane and


we need to can you know make it so that it goes that way if we save that we're going to need to create another ref up here so right after camera controls we'll say const floor ref equals use ref and then type that as a three mesh parentheses null for its default and then for the floor ra we're going to use that where did it go mesh I'll say ref equals floor ref and then we need to add a function right before the return here and I'm going to say function on camera control start and open up those curly braces we


say if parenthesis uh not so exclamation mark camera controls. current or not floor ra. current or camera controls. current. collider meshes do length is greater than zero I'll explain that in a second then return so if we don't have any camera controls set up or the floor ref then we don't want to be here uh and if we've already added the collider mesh then we we would like to return but if we don't have that we want to say camera controls. current. collider meshes there equals an array and we'll say


floor ref. current we want to just call that when the camera controls start so come down to our camera controls object in our jsx I'll say on start equals oh I didn't mean to paste the whole thing uh on camera control start just like that save that and now let's see if we can go through the floor we cannot so it will stop us now let's add those controls over here so inside our build folder let's create controls. TSX and we'll just say tsrf C like that once again this is going to be a client component so we'll say use


client so now we want to have a controls component that displays buttons for each customization option and when one of those buttons are clicked we want to update the context with the selected customization which is going to flow down into the preview component we're going to create an options component within this file to group all the options for each customization type and then we'll also have an option component that will be used within the options component to create a individual button for each customization option so so


let's go ahead and flesh this out first let's set up the props here so we're going to use something a little bit tricky so uh I should get rid of the uh object there and we'll say pick now this is a typescript utility and this allows us to create a new type by selecting specific keys from an existing type so inside angle brackets here I'm going to say content and we're going to import that from Prism client content. board customizer document data like that and then we going to have a comma and then we'll say


wheels and then a bar so for a union we'll say decks and we'll say metals like that so we want to pull those specific elements out of it we want to pull these three Fields out of it and we also want to add to it a final field so we'll say here and curly braces and we'll say class name and that's class name and that's going to be optional we'll see it's string so that's what that pick does if I hover over it says the pick utility type lets you create an object type by picking a set of properties from another type and


that's just a little helpful thing that I have there so now that we have our prop set up we'll destructure those we'll say Wheels decks medals and class name great in inside this div let's give it a class name and we will uh use curly braces we'll return clsx going to import that and we're going to say inside a function call here uh quote Flex Flex call and GAP six and then comma class name great we can go ahead and save that and let's pull that into our page now bring this over here and right between


our heading and our our button we want to say controls import that there and we need to pass this Wheels decks and metals that's exactly what you would think it is deck and metals excellent and we'll get this class name of margin bottom six like that hit save and now we should close the preview and close this layout uh I'm going to close that layout and now we should see controls over here just like that so now we can watch our page as we build this out now like I said we're going to create an options component so


down here underneath controls uh let's start with our type we'll say type options props it's equal to an object we say title question mark react node it's an optional title selected name it's be optional as well and be a key text field import that from prismic client I think I need to import this react node there we go make sure you import that and we'll have children also optional react node all right now create a function called options and that's going to destructure a title a selected name and children and we want to type that


with options props like that and inside there we have const formatted title equals selected name uh sorry selected name question mark period replace and I'll explain this in just a second so say forward slen SLG not in quotes we're doing a Rex and then comma and then empty quote with a space just like that now this is going to take in the uid that we set here uh with a cream black or especially in deck where we have yellow hyphen and hyphen black uh it's going to replace those hyphens with just an empty space


so that's why we have that that's the formatted title and then on the next line we're going to return and say div and inside that we're going to have another div and we're going to give that one class of flex and inside there we'll put our heading use our heading component from component's heading and that'll be an as H2 size extra small class name will be margin bottom two and inside there we're going to put our title and in fact actually I think I I this name isn't great I say formatted name um because this getting a little


confusing so change that to formatted name because we're formatting the selected name not not formatted title I had that wrong and then underneath heading we're going to have a paragraph and that is going to include inside it a span we'll come back and and style this later uh with a pipe and a space I put two spaces and then underneath the span we're going to have our formatted title or sorry our formatted name there we go and so now inside the paragraph tag let's have a class name and that will be Mar margin


left is three uh text going to be zinc 300 that's it for that now for the span put a class name on there and we'll say select none text zinc 500 and if we save that we shouldn't yeah yeah we shouldn't see anything just yet but so to make sure we have everything here uh down just below or sorry above the very last div you want to have a ul and that is going to wrap around our children remember I said we have our options and we'll have our option component this this is where our option component is going to go it's going to


uh list out those list items so let's style the UL we'll say class name is margin bottom one Flex Flex wrap and GAP two like that so we can save that and now we can go ahead and start putting the options component inside our div here so inside our controls component we'll say options and I'll pass this the title of deck and we'll just close it like that if we save you'll see we have our little heading and our vertical bar with nothing else which is exactly what we're expecting right now copy that three more


times Wheels trucks and bolts just like that and you'll see that it is looking very similar to what we're shooting for so we're making good progress now we made the options component which is like the title on the list now we need the option singular component so first we'll start with our type we'll say type option props and and before we build this type let's just think about what we actually need here so we need an interactive set of buttons that lets users customize the parts of their skateboard right and each


button might represent either a design with like the texture here right or a color so we need to account for both of those we also need to highlight which one is currently selected so you see how the Highlight changes depending on which one selected and yeah at their core they just need to be clickable buttons that have a little bit more specificity than just a generic button right so with all that in mind let's go ahead and we're going to start with a typescript utility omit I'll explain that in a minute and


we're going to use reacts component props import that from react and we're going to type that as a button comma quote children so all we're doing here is we are uh getting the component props for button and we're allowing everything except children so like like they don't allow children on this and I'm going to spread this out and open curly braces and we'll say selected it's going to be a Boolean and that's if the thing is selected or not and children here that's going to be a react node like that and the reason why we're


we're removing it and adding it back is because children is optional here we don't make it optional here we're going to say hey if I don't have children please throw an error so if we just brought in everything wholesale uh that wouldn't throw an error but now it will um that's just a good way to guarantee that we have some children now I'm going to say Ampersand and then open some parentheses we have some more typing to do so we're going to do a union and just uh to structure it in a certain way


we're going to start with the pipe and we're going to open up some curly braces and inside here we're going to first handle uh the possibility of this being in an image field for the texture so we'll say image field and that's going to be an image field coming in from prismic client like that next we'll see imageix mess with the spelling of that imgix prams question mark and it's going to be prismic next image props right there and that's going to be uh square brackets and then imageix params like


that make sure you've imported that and next we'll say color field question mark and it's going to be never we don't want a color field on this and this will be more clear after the next one so after your uh curly brace is there we're going to have another pipe and open some more curly braces this will be for our color and we'll say color field it's going to be a color field that's coming in from prismic client and then we will say image field and that is going to be a never and same with imageix params that


will be question mark and never we don't ever want to see this so if either of those are present when that's there throw an error if color fields on there with image field throw an error so we want to be very clear about um when this succeeds we know that it is it is working well if it fails then we're catching ourselves in kind of a screw up there great now we're ready to create our function so function option and that's going to destructure off uh so first let's type it I should have done that for the last one so option props it


allows us to destructure a lot easier because we see our options right here so we get uh children we get selected we get uh and then it gives us all the things for button so it's not as helpful right now but at least when we start to Type image field there we go uh image exp perams color field and that should and and then uh at the very end we want to spread the rest of our props so rest props and that's because we're allowing anything that a button can take so let's make sure we capture that in case we need to send


anything else onto these buttons or sorry this button because it's going to return a single button and just as I said return button and and inside here we want to say image field question mark and if so let's return a prismic next image component and that will have field is image field and imageix pams is going to be imageix pams and class name we're going to say pointer events none only because we don't want this image to to capture our click I'll say height is full width is full I need to spread those


out and rounded is full like that and we don't need any alt text for this so we'll say alt equals empty string so with that we then need to have the or and we're going to just return a div here so we'll say div and that that actually be a self-closing div so I'm going to do that again div and in here we'll say class name is going to be height full withth full rounded full so same as the other one but the difference here is say style equals double curly braces background color is going to be color field


oh or undefined so if color field is not there then we just pass undefined there as a fallback so if we don't have an image field then we make a color and then outside of that check for image field we want to handle screen readers here so we'll say span class name is Sr only and inside here we're going to say children and that is going to be where we pass like what this is going to say to screen readers we've covered that a little bit so not going to belabor that point but uh I missed something we need


to have an Li here this is going to be a list item on the outside so don't return a button return a list item with a button inside it and then let's style our button here so say class name is going to be clsx so I don't think we need to import that I think we already have it yeah uh we'll have a string size 10 and you can see that that sets the width and the height to the same value so you have to do W yeah you get it and we'll say cursor pointer rounded full BG black [Music] P5 sorry P 0.5 outline two and outline white just


like that and then we're going to add to that a check to see if it's selected selected and and outline now see outline two and outline white don't do anything unless this outline is set there so these will just kind of be uh dormant there until selected works and then we toss that on we could add all of them but this is kind of an elegant way to do it now we could go ahead and spread rest props here but now that I think of it the only thing we we really want to spread on here is our onclick Handler


so let's just go ahead and be explicit about this we'll say on click and then we can go ahead and change this rest props to onclick and we will go up just under children here we'll say onclick and then it's going to be an arrow function that returns void just like that and so now we're nice and explicit there but we need to use our option somewhere we have no errors here that's looking great but before we add that op option we need to bring in our use customizer controls hook so let's go ahead right


in in our uh controls function at the very top we'll say const and I'm just going to open up an object equals use customizer controls from period context and we're going to call that function and then come back here and destructure everything we got on that so we want set bolt we want set deck we want set truck oh didn't mean to open that uh there we go set wheel and selected bolt I keep hitting the wrong button there we go selected deck selected truck and selected wheel look at all that good stuff that we got


because remember this is going to be the component that not only sets each of these as you click but also needs to know which one to show as highlighted so that's why we need everything for this component now let's add this to our deck options component first so inside here we want to have selected name and we want to pass selected deck dot uh sorry question mark. uid just to check if it's there don't know if it's there and then we'll say Dex map and then pass that an arrow function that has an implicit return so


parenthesis I'll say deck what it takes in and inside there we want to return an option like that and this option is going to get a key be deck. uid we need to pass that because we're mapping over it right the uid is going to be unique we'll say image field will be deck. texture the image X param for this so this is what's going to modify the image and this is really important because we're doing something kind of clever here let me just point this out we are using the same texture for this um Button as we are for the actual deck so


if we are able to open that image there you go so you see it's it looks perfect for that button but if you look at the actual URL um you'll see all this stuff up here we have wrecked D all these numbers and width white right all these different things this is our imag exp prams and watch what happens if I remove all of that back to that question mark I'm removing all the pams and whoa we get the full board so we're doing a little little bit of magic to crop it right to the middle of the board so that


we don't have to upload and deal with two different images because that' be such a pain if your clients or your content people or just you had to upload two images for each of these boards one for a button one for the actual texture and all so we're just using some clever imag ex prams to grab a little cross-section out of the center and create these buttons so back to our code let's actually add those prams in now so this takes an object and we're going to open that up and say rect it's going to be an array 20 comma 1550 comma 1000


comma 1000 and that is a rect tangle that starts at 20 on the x- axis 1,550 on the Y AIS and it has a width of a th000 and a height of a th000 that's how we made that image I just showed you pretty cool little thing I I just manually kind of went like okay 20 30 right I I just moved this around until it looked good and then uh it works for all the boards CU all the boards have the same like texture coordinates and everything I'll say width is 150 because you don't need it to be that big and height is also 150


Great and then we are going to go beneath the image exp prams next prop we're going to say selected is equal to deck. uid equals equals equals selected deck question mark. uid so if those are equal then this is selected and you should treat it as such and then onclick equals just do an arrow function and this will be set deck remember that is one of the functions that we're calling in from our context set deck to deck because that is just this specific deck that we're pulling in and last we need to pass this some children that's


what it's yelling at us for so saying hey uh I need kids give me some children um and we'll say deck. uid question mark. replace and this is the same Rex we did before slen SLG comma quotes like that and so that is what's going to be read aloud uh for screen readers highlighting this button and just like that we have our option let me see if it's working there we go we have our Oni mask and look it's even working we don't have the camera set up to change yet but it is doing the thing it's changing the text here that's what


we expect with our formatted text text bit I forget where it is uh it's in our options here we go so yeah the formatted name that's the cting output there and yeah we have our buttons looking great so well done there let's keep going so we can get Wheels trucks and bolts and I'm going to open this up and we're going to copy over pretty much everything so dex. map I'm going to put this inside Wheels actually know I'm going to copy all of options for Wheels I'm going to get rid of Wheels uh I'm going to put deck in here but


wheels so just to be clear I I copied this got rid of wheels and now I'm just changing these things so it's always easier selected wheel uh Wheels this will be wheel right just going to be easier than typing the whole thing from scratch wheel I can just done this this set wheel wheel wheel selected wheel um but the image ex frams will be different let me check to make sure we have everything right here wheel uid wheel uid y all right so the Imaging params are a little bit different because it uh the the texture has a


different shape so it's going to still be 20 but then the next one's going to be 10 and then these two are 850 and if we save that let's see what we get there we go we have our wheels and it fits perfectly within the little circle just like that so it's it's using the same trick it's actually using the exact texture that's getting put on this 3D object but just displaying it in a different way and imageix uh through the prismic image CDN is taking care of it for us so we don't have to do anything


there next Metals is going to be a little bit different but I'm going to grab wheels and see if we can make it work anyway so um let's go ahead and change this one to trucks selected truck and I'm going to change that one here too and then trucks this be truck oh wait do we don't have trucks is just metal sorry metals and then this will be metal and then inside here it's key. metal. uid because right now we're mapping over the available Metals uh but we do need to handle the selected truck so if metal.


uid matches the selected truck. uid then uh that is selected and we'll set truck and that will be a metal we want to get rid of image field and image exp perams we don't need either of those we need color field and and it would have warned us if if we kept that metal. color just like that and then metal. uid and replace there we go truck metal let's see how that looks that looks great and yep it is working fantastic awesome we're getting there all right uh last and this one should be pretty easy because bolts and


trucks share a lot of things say bolts selected bolt Metals map key metal color field metal metal selected bolt and set bolt it's like that and now if we going to move over over to here and click the bolt thing and there you go we see the bolts change and it works great everything's changing even the spin Works already for us and yeah we've got the changing working that's looking so good I mean not this combination let's try a different wheel there you go that's looking so good and uh yeah really


coming together folks we just have two more things to do we want to one uh change the camera when you click on different things so it zooms in on what you're changing right we want to do that and we also need to change the url up here to change the parameters so that you can uh send this to a friend and and like hey I like this deck and it says deck equals thank you right or like check out this cool skateboard I just customized um what do you think of my design right and also uh we we're going to link to these from the homepage so


that is the last two steps so let's handle the camera motions first so let's go into our preview component right here in build and we are going to create a few use effects in here so under the bolt colar make some space we're going to set use effects for each of the things that are going to change so if the wheel changes then we're going to hit this used effect and it'll carry off a function but the function we're going to write first so function set camera controls and it's going to take two arguments so we're have a Target and


that's going to be typed as a three. vector 3 and then a position or POS and then I'll take a three Vector 3 like that and then open that up and we're going to check first to make sure we have our camera controls so if not camera controls. current then return once we're checked for that we can now say camera controls do current. set Target and we're going to have to uh spread this out like this we'll say Target dox Target doy target. Z and we'll say true at the end and that true is if you look at set Target it is to


enable the transition so otherwise it would just instantly snap there but we are going to uh transition to this position instead and we'll do the same thing just copy it and we'll say set position and instead of Target XYZ we'll see p and we'll keep that true so if we save that now we have a good function to go ahead and create our use effects with we'll do it above so we'll say use effect and this is going to take an arrow function we'll say set camera controls and we'll pass that a new 3. Vector


3 and that's going to be uh this one's for the deck so we'll say 0 comma 3 comma Zer and we have comma and make that second one and for this one we're it's going to be 1.5 comma point8 comma 0 and then at the end here this is Cru we need to pass selected deck so every time the selected deck changes we're going to fire off this function right here so we can test that out in our scene and if we go here and I'm going to move the camera around and the truck shouldn't do anything bolt shouldn't do anything wheel shouldn't do anything


deck does something so if we move it again click that again we do move into place you see the transition it doesn't instantly snap us there so that is working perfectly we just need to do that uh three more times so let's come back in here going to copy this and again make some space and just paste that a couple more times all right we have selected deck next one will be selected truck and we have wheel this isn't the order we usually do it but how I have it and bolt so for the selected truck one


let's go ahead and wipe out this first Vector we'll say .12 29 and .57 and for the second Vector 3 we're going to say 0.1 .25 and .9 and these of course are just values that I liked you can Target completely different values you can customize this however you would like I recommend it so for the wheel our first values are .0 8.54 and 64 and for the second Vector 3 there we're going to go 09 1 and9 and for this last one they selected bolt we're going to say. 25.3 62 and5 35 and8 so with those value saved let's


head back to our scene here and start to click around okay that shows our bolts that looks great uh we have our trucks we have our wheels and we have our deck looking great so as people click they move around are bored and they see the whole thing now note I I I clicked on the same thing if you don't change it it's not going to change and that that makes sense right so just a heads up that that's not a bug that's because uh this will only fire if this value changes so our camera is working great


last thing here is to connect the board customizer up to our URL so we want to have those designs sync up to the URL and we can use NEX js's built-in search pams uh to update our page. TSX to read that URL search foram so let's go ahead and right up here above our export default async function page go ahead and typ we're going to create a type we'll say type search params that's going to be wheel optional and that's a string and I'm going to just copy that four times this is deck this is truck and this is Bolt


great and then inside here inside the parentheses here for page I'm actually going to make that a capital P for page doesn't matter but looks better uh we'll say props not inside curly braces but we're going to type that and and say uh search prams and that's going to be a promise with angle brackets that return search prams all right so we're pulling the search prams off of the props on the next line we're going to say const search params equals 08 props do search pams just like that and now we're going to make our default


wheel default deck uh lines of code a little bit more complicated than this so we're going to say uh in front of the Wheels part we're going to say wheels. find parentheses and be an arrow function in here we'll say wheel and after the arrow we'll say wheel. uid is equal to Triple equals search params we and otherwise we're falling back to the first item in the wheels array so we can go ahead and do the same thing just copy that line for each of these and we'll change Wheels here to deck sorry decks and this will be deck


I'll change them yeah like that this will be trucks no sorry this going to be Metals I AP izee Metals I'm changing this one to metals and this will be metal and search ps. truck for this so once again it's the both truck and bolt uses Metals but we need to pull the truck off of search prams here and if not we're just defaulting the same metal uh this is going to be metal metal and this will be bolt all right so check your to make sure it looks like mine Wheels decks Metals Metals Wheels deck metal metal


and so on so if those values are on our URL it's going to pull them off and change the selection to that so the URL linking to boards now works but we don't have the controls changing that just yet so we need to uh change what happens in our controls here so as soon as the selected wheel or selected deck or anything changes we we want to have a use effect that then uh adds that search peram to our URL so at the top I'm just going to put it up here we're going to say const router equals use router and that will


come from next router sorry next navigation I apologize use router next navigation like that and we can go underneath our customizer controls CU we want our hooks at the top top and then we'll have our use effect here and this is going to take an arrow function and we'll say const URL equals new URL we're using the web API here and we'll say window.location.href this is inside a use effect so it will not run uh need to import it it will not run unless it is on the client so we know that window is


going to be there and we'll say if parenthesis is filled. key text we need to import our is filled from Prism client key text and we'll say selected wheel question mark. ID then we want to have uh on the next one we can say url. search prams do set say wheel in a string and selected wheel. ID so if that's there we want to set that parameter and we're going to do the same thing for our selected deck for our selected truck and selected bolt you're seeing a pattern I hope by now um so three more times so for the first or


for the I guess second one if is filled selected deck and then you also search for set deck to selected deck this is selected truck truck truck and copy this here and this will be bolt bolt and there we go so now the crucial part here is that we we want to do two things we want to say router. replace url. hrf and that will set our Uh current URL to what we just created and you won't notice any reload or anything like that cuz it's just changing the parameters but that pushes it onto our URL and then we want to have an array at


the end here that has router selected wheel selected deck selected bolt and sorry selected truck doesn't matter the order but selected bolt it just could to have some symmetry there and now let's see what we have going to reload the page we have some error I'm curious what those are two key with the same key gold okay we can handle that um but if we now click here you should see wheel cream deck Oni mask truck red bolt red um I mean you should see whatever you're seeing I'm going to keep clicking and


see if I get there you go so wheel black deck gray and black truck Black Bolt black so this should be working for you now and if you reload the page or copy this and open like an incognito window and paste that in you should get the exact board that you made and that works really well we're just saving the state into our URL pretty cool and I just went over and saw that uh this was actually set to Gold when I needed to have it as yellow so make sure that you have unique names for those or else it'll say yeah I


already have one of those but now with that change should be able to reload this and and this one should be yellow and there we go um same key gold that should go away cool now it's gone all right so yellow yellow gold gold all right we have a couple of uh metadata things to handle you see here it says create next app that's not what we want so let's head into our code and in the layout at the root of the project well first off we can remove the footer and the header because we got rid of those but we can


also update this uh metadata thing here so right now it's not fetching anything it's not async so we want to change this to uh export async function and then we're going to call this generate metadata and that is going to be a function that returns a prod promise that eventually resolves to be metadata get rid of the equals there and now we need to return this object and that's looking better but we want to call for that data from our settings file so we want to say const client equals create client from at/


prismic and call that function and we'll say cons settings equals a wait client. get single settings like that and then instead of title create next app we want settings. dat. site title like that and instead of description we want I'm going to copy this and change this out for meta description and we want to add another property so we'll say open graph if you you know the OG image you're going to get open graph this is an object we'll say images and here we want to check uh we'll say settings. dat. fallback OG


image like that question mark question mark undefined because some of the values that this could turn out to be uh are not supported but I need to put URL I forgot that so so that URL can be uh string null undefined but images has to be either uh string or undef you can't pass it no that's why we're either passing it undefined or that now if we save this check out our page we see Suburbia skateboard it's much better all right that's good now let's head back to our main page and let's see here we have


build your board and it just links to SL build that's fine that one works for me I'm good with that and that should work yep works great but we need some of these other ones to actually link to what they are cuz right now this does link anywhere that doesn't link anywhere so what we need to do is we need to recreate these boards and then grab their URLs and put those into prismic I'll do a couple with you and then I will let you do the rest so let's make this Oni board first and we're just going to get it close enough you know


like it doesn't have to be perfect for us but I see cream wheel black trucks uh silver um or like yeah grayish bolts and then the Oni mask for the board so let's go make that board here we have to add the loading screen there so we'll do that in a sec um and we have just about everything except for the bolts need to be that gray color and there we go I think that's pretty much exactly it yep so I'm going to grab forward SLB build question mark wheel that part and we're going to go to Suburbia and we're going to go to our


homepage and the latest drop Oni mask oh right so we need to actually go to the Oni mask itself so let's head there and in Oni mask we now have the customizer link we're just going to uh choose link type link to web page and paste that URL there we don't need to add any display text right just customize I think we're good so we'll say save and publish let's check that out and now it's there we go now it works so build wheel cream and it'll take us to that let's do one more together let's do the


pink drop so we have silver silver white pink so this is going to be silver silver white wheels and pink drop and that looks good I'm going to grab this from the forward slash all the way to the end and we're going to go to Pink drop choose link type link to web page paste that in update save publish and going to double reload and right here we have customize let's open that up and that takes us to our pink drop so go ahead and uh do do two things finish out these last two right get the thank you and you kind of


figure out how to do the rest and then what you can also do is don't worry about that part that's just uh cuz I'm building it right now um but go ahead and give them custom boards that doesn't doesn't matter it can be the same ones from up above but just give them some custom boards so that they um so that the build their board part makes a little bit of sense okay and then I'll see you on the other side all right I have a custom URL for each of these things build their board they all have their own unique boards if we check out


Carter Bells made him a cool like a bubble gum looking thing so yeah everybody has their own custom board pretty sweet and that URL thing is working great but the last thing we really want to do here is add a loading screen so we don't get that little flash it's going to be a lot worse on the web when it's not just local so let's go to our code and you can put it right alongside the build uh stuff so we'll just say loading TSX and I'm going to say tsrs f c here uh this won't take any props or anything so we


can get rid of the props there we go and this is going to be a use client component and we're going to say import use progress from react 3 dry we're going to import clsx as well and inside here for the loading part we're going to say con progress is equal to use progress this is a handy little helper that dry gives us I mean dry is just so so useful I I hope you can see how much uh work they've saved us with this great Library uh but inside this div we're going to have a class name and we're going to say


clsx in there and we're going to give a string going to give us own line going be a long string so we'll say abs lute inset zero grid Place content Center BG brand Navy font sanss text is going to be uh a custom value so 15 VW and then text white that's and then transition opacity and duration 1,000 just like that and after the string we're going to put a comma and say progress greater than or equal to 100 question mark if it is we're going to say pointer events none and opacity zero so we want to hide this uh completely


and not have it affect anything but otherwise you want to have opacity 100 and it'll have the default for its pointer events and we'll knock out this loading part in here and we're going to actually import our logo so say logo import that from component's logo class name it's going to be W custom value will be 15 VW just like the other thing uh we'll say animate squiggle and text brand pink and we can self close that and then we'll have a paragraph and inside this paragraph we're going to put the word


loading all caps dot dot dot and we'll say class name is equal to with full animate squiggle content Center text Center letting none and text brand lime if we hit save there we can now import this loading component into our page here and we can just put it right here on top say loading from loading if we save that cool we see that a little bit and let's go ahead and reload it see if that works nice so it's going to be a little funky on local don't worry about that too much like that should not snap in


like that uh once it's gone but you see that the loading screen does work awesome all right it's what we've all been waiting for let's get this onto GitHub so that we can get it onto netlify so that we can get it out and deployed so we have a very very slick polished site they can do all kinds of tricks I can build boards and do everything else let's get it onto GitHub so if we head to our IDE FS code you can either go ahead and initialize repository by using this Source control tab I I like this I like any kind of


goey um you can also open up your um terminal let's clear that out and just say uh get init and then you can take it from there I'm going to follow this Source control bit here so I'll say initialize repository and we can it it it it creates that get repository brings up all these things that need to be added to it um but it also is reading our get ignore so it's not adding everything like it's not going to add node modules or the next file which is great and I'll just say initial commit and usually you


commit with the project a little bit sooner than this but that's fine and oh I I didn't stage anything but it says hey do you want to Stage everything but first I'll actually just go ahead and add all of this and then yep these are all stage to be added to our git repository hit commit and there we go and you can either publish Branch here and we can uh if your GitHub account is already linked up but if not you can do it the old-fashioned way and that's totally fine so head to GitHub if you don't have


an account the website will look like this and you will have to go ahead and sign up it is completely free go ahead and sign up for it but if you do have an account it'll look something more like this when you head to github.com and we're going to go ahead and say create new repository and you can call this Suburbia it's going to be uh unique for you so just say Suburbia like that and you don't need to description or anything you can put it public and all the rest should be good here cuz we're going to be pushing our


own thing in just a second and we want to push an exist repository from the command line so go ahead and copy that and if we head to our terminal paste that in and just like that we've pushed all of our work up to GitHub and there it is if you reload the page you should see it all right there not sure how that was two oh yeah the the commit was 2 minutes ago like I just pushed this so great and if you want to continue to work on it you can continue to push uh changes to this repository and then when we connect


it to netlify that will automatically update netlify uh once these changes work in here now netlify once again is a free service or at least the parts that we are using are going to be free so if you don't have an account go ahead and sign up you can do it with GitHub gitlab doesn't really matter uh but once you have an account and you're logged in you it should look something more like this you won't have any sites unless you do um but we are going to say add new site and import an existing project


and it gives you these options we using GitHub and it authorized me it might have done something different for you you might have to like link them and give permission that's totally fine uh search your repositories let say Suburbia I should have two because I I already built this for so not demo but I'm I'm doing Suburbia the one from a minute ago and yep I'm just doing my my typical team that shouldn't really matter uh site name I'm going to say Suburbia but this is already taken I believe with NFI yes so I'll say


Suburbia skate there we go and you can name yours whatever um but you'll get a Nifty little URL Suburbia skate. ny. app depending on what you grab and we're going to deploy the main branch it recognizes that is a nextjs site very nice NFI has a bunch of great defaults it is it is a joy building with nextjs on netfi um don't worry about the this scary red thing uh but yeah they they do a great job of uh making sure that nexts runs really fast and perfectly on netlify so let's go ahead and deploy


Suburbia skate I don't think we need to change anything else here all the defaults are good so so site deploy is in progress and you can head into here and you can actually watch it build I'm going to see on the other side of this I won't make you watch my build all right my build failed and yours proba probably did two CU we have two errors that typescript is not liking so we have one in footer and one in skateboard so let's check out the skateboard one first we have this materials and an empty object there and


it explains here that it allows for non-n knowledge value including literals like zero and empty string we don't want that so let's actually change this to just be the word object like that that's to make that happy and it has another one in skate well yeah so skateboard here and then at line 130 has a missing dependency metal normal so let's go ahead and add that at line 130 and paste that in there and then in footer also uh we have this empty object for props that was just part of the uh tsrf C config and we can just remove


that forgot to remove that so uh go ahead and add both those and fix type errors I'm going to hit commit and sync changes and that should like I said before kick off a new build for us so there we go starting up and let's see if this one does the trick and just like that mine is deployed hopefully yours is as well if not um we kind of just saw how we can fix any errors with uh by just by reading the error logs and so if if we actually head to our link here is this it no that's that's the per link to


the actual deploy let's go to site overview I'm clicking my URL here and we see just like that we get our website that set Suburbia skate. ny. apppp everything's working exactly how we would expect it so this is fantastic now we want to set up a couple things in prismic to match this new URL so grab your UR L and let's head to our Suburbia prismic repository and inside really any of these docs we going to go to the homepage but uh for our preview the page and also for our slice previews we want to change the url to


our new production URL so up here first I'm going to change the live preview settings and right here has Local Host SL slice simulator I'm going to paste that in and Suburbia skate. apppp slice simulator and if I hit save and there we go so it's still working so even if I turn off my uh Local Host my my Dev environment this will still work now this will be live and I can actually hand this to people to work on and it's going to you know it's going to work uh for the preview we need to head into our


settings over here and we'll see previews and we just want to add a new one so we'll say site name is going to be production and domain for the application is curb es skate. ny. apppp and the preview route we actually get from inside here we have our app and so we have API and then we have these three routes here we have preview exit preview and revalidate so preview is just some boiler plate that pulls in um both some code written by the uh prismic SDK as well as some of the next functions that


are baked in for features like this and so we're going to say uh Slash API SL preview just like that we'll say create my preview and now we have a production preview that we can check out but before we do that let's go ahead and set up our web hooks here and the web Hook is you know it says learn more here but basically this is what's going to fire whenever one of these triggers happens and the only triggers we actually want is is uh document published and document unpublished we're going to unclick those


other ones and name of the web hook we're just going to say uh re trigger a netlify website build so I already have that there and then the URL is going to be this suburb escape. ny. apppp and so we can pop that in there and then oh sorry but but we're actually going to add a little bit more so we'll say uh SL API revalidate just like that we don't need a secet secret but I do want to show you what we are hitting there so once again this is an API route here and we're hitting this revalidate route and so


route. TS it is really just calling this revalidate tag from next cache and saying hey anything tagged prismic that might have changed so revalidate that and fetch anything um that is tagged with prismic and you might be saying like I don't remember tagging anything with prismic that's one of the things that uh prismic doio Sor sorry prismic .ts did for us so if you see right here it tags it with prismic so anything we fetch from prismic gets this tag so that we can then uh bust that cache later whenever


we update our prismic site so we can go ahead and set ahead and add that web hook and now uh if we ever want to change our data and we publish it will send that request and it'll re revalidate that data and so just like that we are launched we deployed we built a really sick sick site that has all kinds of cool features to it feels like a very real very cool uh stylish site that uh I hope you have a lot of fun playing with if you spend a few hours in this part I will not judge you um so yes I hope you had a lot of fun


with this course congratulations on completing the course you've built a fully custom customizable skateboard brand website using some of the most powerful Tools in web development you learned how to work with nextjs gap 3js prismic Tailwind all to create something really special I hope it's a project that you're super proud of if you haven't already please share your project in the prismic forums it's linked in the resources I would love to see what you created and it's a great way to inspire and work with the


community and if you found this course helpful and I guess if you're at this point you probably did it would mean the world if you like liked and subscribed and did all that stuff it really helps me to be able to create these videos and just kind of give you more and drop a comment all that stuff really does help bring more people and that I can create more videos so thank you so much and thanks for making it all the way to here I hope to see you in the next course take care